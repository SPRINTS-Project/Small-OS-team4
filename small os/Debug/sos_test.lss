
sos_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  000029fa  00002a8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003fe  00800180  00800180  00002bae  2**0
                  ALLOC
  3 .stab         00002eec  00000000  00000000  00002bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002618  00000000  00000000  00005a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000080b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b9  00000000  00000000  00008214  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c8f  00000000  00000000  000083cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000fff  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f2c  00000000  00000000  0000b05b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000bf88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002d0  00000000  00000000  0000c108  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000089e  00000000  00000000  0000c3d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0d 0f 	jmp	0x1e1a	; 0x1e1a <__vector_1>
       8:	0c 94 40 0f 	jmp	0x1e80	; 0x1e80 <__vector_2>
       c:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 b4 0d 	jmp	0x1b68	; 0x1b68 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ef       	ldi	r30, 0xFA	; 250
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b0 14 	call	0x2960	; 0x2960 <main>
      8a:	0c 94 fb 14 	jmp	0x29f6	; 0x29f6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 cb 02 	call	0x596	; 0x596 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 4a 05 	call	0xa94	; 0xa94 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 4a 05 	call	0xa94	; 0xa94 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 75 04 	call	0x8ea	; 0x8ea <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 4a 05 	call	0xa94	; 0xa94 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 4a 05 	call	0xa94	; 0xa94 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 75 04 	call	0x8ea	; 0x8ea <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__epilogue_restores__+0x18>

0000043e <__divsf3>:
     43e:	a8 e1       	ldi	r26, 0x18	; 24
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__prologue_saves__+0x10>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	b9 e0       	ldi	r27, 0x09	; 9
     45c:	eb 2e       	mov	r14, r27
     45e:	f1 2c       	mov	r15, r1
     460:	ec 0e       	add	r14, r28
     462:	fd 1e       	adc	r15, r29
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	b7 01       	movw	r22, r14
     46a:	0e 94 4a 05 	call	0xa94	; 0xa94 <__unpack_f>
     46e:	8e 01       	movw	r16, r28
     470:	0f 5e       	subi	r16, 0xEF	; 239
     472:	1f 4f       	sbci	r17, 0xFF	; 255
     474:	ce 01       	movw	r24, r28
     476:	05 96       	adiw	r24, 0x05	; 5
     478:	b8 01       	movw	r22, r16
     47a:	0e 94 4a 05 	call	0xa94	; 0xa94 <__unpack_f>
     47e:	29 85       	ldd	r18, Y+9	; 0x09
     480:	22 30       	cpi	r18, 0x02	; 2
     482:	08 f4       	brcc	.+2      	; 0x486 <__divsf3+0x48>
     484:	7e c0       	rjmp	.+252    	; 0x582 <__divsf3+0x144>
     486:	39 89       	ldd	r19, Y+17	; 0x11
     488:	32 30       	cpi	r19, 0x02	; 2
     48a:	10 f4       	brcc	.+4      	; 0x490 <__divsf3+0x52>
     48c:	b8 01       	movw	r22, r16
     48e:	7c c0       	rjmp	.+248    	; 0x588 <__divsf3+0x14a>
     490:	8a 85       	ldd	r24, Y+10	; 0x0a
     492:	9a 89       	ldd	r25, Y+18	; 0x12
     494:	89 27       	eor	r24, r25
     496:	8a 87       	std	Y+10, r24	; 0x0a
     498:	24 30       	cpi	r18, 0x04	; 4
     49a:	11 f0       	breq	.+4      	; 0x4a0 <__divsf3+0x62>
     49c:	22 30       	cpi	r18, 0x02	; 2
     49e:	31 f4       	brne	.+12     	; 0x4ac <__divsf3+0x6e>
     4a0:	23 17       	cp	r18, r19
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <__divsf3+0x68>
     4a4:	6e c0       	rjmp	.+220    	; 0x582 <__divsf3+0x144>
     4a6:	60 e6       	ldi	r22, 0x60	; 96
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	6e c0       	rjmp	.+220    	; 0x588 <__divsf3+0x14a>
     4ac:	34 30       	cpi	r19, 0x04	; 4
     4ae:	39 f4       	brne	.+14     	; 0x4be <__divsf3+0x80>
     4b0:	1d 86       	std	Y+13, r1	; 0x0d
     4b2:	1e 86       	std	Y+14, r1	; 0x0e
     4b4:	1f 86       	std	Y+15, r1	; 0x0f
     4b6:	18 8a       	std	Y+16, r1	; 0x10
     4b8:	1c 86       	std	Y+12, r1	; 0x0c
     4ba:	1b 86       	std	Y+11, r1	; 0x0b
     4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <__divsf3+0x88>
     4be:	32 30       	cpi	r19, 0x02	; 2
     4c0:	21 f4       	brne	.+8      	; 0x4ca <__divsf3+0x8c>
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	89 87       	std	Y+9, r24	; 0x09
     4c6:	b7 01       	movw	r22, r14
     4c8:	5f c0       	rjmp	.+190    	; 0x588 <__divsf3+0x14a>
     4ca:	2b 85       	ldd	r18, Y+11	; 0x0b
     4cc:	3c 85       	ldd	r19, Y+12	; 0x0c
     4ce:	8b 89       	ldd	r24, Y+19	; 0x13
     4d0:	9c 89       	ldd	r25, Y+20	; 0x14
     4d2:	28 1b       	sub	r18, r24
     4d4:	39 0b       	sbc	r19, r25
     4d6:	3c 87       	std	Y+12, r19	; 0x0c
     4d8:	2b 87       	std	Y+11, r18	; 0x0b
     4da:	ed 84       	ldd	r14, Y+13	; 0x0d
     4dc:	fe 84       	ldd	r15, Y+14	; 0x0e
     4de:	0f 85       	ldd	r16, Y+15	; 0x0f
     4e0:	18 89       	ldd	r17, Y+16	; 0x10
     4e2:	ad 88       	ldd	r10, Y+21	; 0x15
     4e4:	be 88       	ldd	r11, Y+22	; 0x16
     4e6:	cf 88       	ldd	r12, Y+23	; 0x17
     4e8:	d8 8c       	ldd	r13, Y+24	; 0x18
     4ea:	ea 14       	cp	r14, r10
     4ec:	fb 04       	cpc	r15, r11
     4ee:	0c 05       	cpc	r16, r12
     4f0:	1d 05       	cpc	r17, r13
     4f2:	40 f4       	brcc	.+16     	; 0x504 <__divsf3+0xc6>
     4f4:	ee 0c       	add	r14, r14
     4f6:	ff 1c       	adc	r15, r15
     4f8:	00 1f       	adc	r16, r16
     4fa:	11 1f       	adc	r17, r17
     4fc:	21 50       	subi	r18, 0x01	; 1
     4fe:	30 40       	sbci	r19, 0x00	; 0
     500:	3c 87       	std	Y+12, r19	; 0x0c
     502:	2b 87       	std	Y+11, r18	; 0x0b
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e4       	ldi	r27, 0x40	; 64
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	ea 14       	cp	r14, r10
     51a:	fb 04       	cpc	r15, r11
     51c:	0c 05       	cpc	r16, r12
     51e:	1d 05       	cpc	r17, r13
     520:	40 f0       	brcs	.+16     	; 0x532 <__divsf3+0xf4>
     522:	28 2b       	or	r18, r24
     524:	39 2b       	or	r19, r25
     526:	4a 2b       	or	r20, r26
     528:	5b 2b       	or	r21, r27
     52a:	ea 18       	sub	r14, r10
     52c:	fb 08       	sbc	r15, r11
     52e:	0c 09       	sbc	r16, r12
     530:	1d 09       	sbc	r17, r13
     532:	b6 95       	lsr	r27
     534:	a7 95       	ror	r26
     536:	97 95       	ror	r25
     538:	87 95       	ror	r24
     53a:	ee 0c       	add	r14, r14
     53c:	ff 1c       	adc	r15, r15
     53e:	00 1f       	adc	r16, r16
     540:	11 1f       	adc	r17, r17
     542:	6f 5f       	subi	r22, 0xFF	; 255
     544:	7f 4f       	sbci	r23, 0xFF	; 255
     546:	6f 31       	cpi	r22, 0x1F	; 31
     548:	71 05       	cpc	r23, r1
     54a:	31 f7       	brne	.-52     	; 0x518 <__divsf3+0xda>
     54c:	da 01       	movw	r26, r20
     54e:	c9 01       	movw	r24, r18
     550:	8f 77       	andi	r24, 0x7F	; 127
     552:	90 70       	andi	r25, 0x00	; 0
     554:	a0 70       	andi	r26, 0x00	; 0
     556:	b0 70       	andi	r27, 0x00	; 0
     558:	80 34       	cpi	r24, 0x40	; 64
     55a:	91 05       	cpc	r25, r1
     55c:	a1 05       	cpc	r26, r1
     55e:	b1 05       	cpc	r27, r1
     560:	61 f4       	brne	.+24     	; 0x57a <__divsf3+0x13c>
     562:	27 fd       	sbrc	r18, 7
     564:	0a c0       	rjmp	.+20     	; 0x57a <__divsf3+0x13c>
     566:	e1 14       	cp	r14, r1
     568:	f1 04       	cpc	r15, r1
     56a:	01 05       	cpc	r16, r1
     56c:	11 05       	cpc	r17, r1
     56e:	29 f0       	breq	.+10     	; 0x57a <__divsf3+0x13c>
     570:	20 5c       	subi	r18, 0xC0	; 192
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	4f 4f       	sbci	r20, 0xFF	; 255
     576:	5f 4f       	sbci	r21, 0xFF	; 255
     578:	20 78       	andi	r18, 0x80	; 128
     57a:	2d 87       	std	Y+13, r18	; 0x0d
     57c:	3e 87       	std	Y+14, r19	; 0x0e
     57e:	4f 87       	std	Y+15, r20	; 0x0f
     580:	58 8b       	std	Y+16, r21	; 0x10
     582:	be 01       	movw	r22, r28
     584:	67 5f       	subi	r22, 0xF7	; 247
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	cb 01       	movw	r24, r22
     58a:	0e 94 75 04 	call	0x8ea	; 0x8ea <__pack_f>
     58e:	68 96       	adiw	r28, 0x18	; 24
     590:	ea e0       	ldi	r30, 0x0A	; 10
     592:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__epilogue_restores__+0x10>

00000596 <__gesf2>:
     596:	a8 e1       	ldi	r26, 0x18	; 24
     598:	b0 e0       	ldi	r27, 0x00	; 0
     59a:	e1 ed       	ldi	r30, 0xD1	; 209
     59c:	f2 e0       	ldi	r31, 0x02	; 2
     59e:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__prologue_saves__+0x18>
     5a2:	69 83       	std	Y+1, r22	; 0x01
     5a4:	7a 83       	std	Y+2, r23	; 0x02
     5a6:	8b 83       	std	Y+3, r24	; 0x03
     5a8:	9c 83       	std	Y+4, r25	; 0x04
     5aa:	2d 83       	std	Y+5, r18	; 0x05
     5ac:	3e 83       	std	Y+6, r19	; 0x06
     5ae:	4f 83       	std	Y+7, r20	; 0x07
     5b0:	58 87       	std	Y+8, r21	; 0x08
     5b2:	89 e0       	ldi	r24, 0x09	; 9
     5b4:	e8 2e       	mov	r14, r24
     5b6:	f1 2c       	mov	r15, r1
     5b8:	ec 0e       	add	r14, r28
     5ba:	fd 1e       	adc	r15, r29
     5bc:	ce 01       	movw	r24, r28
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	b7 01       	movw	r22, r14
     5c2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__unpack_f>
     5c6:	8e 01       	movw	r16, r28
     5c8:	0f 5e       	subi	r16, 0xEF	; 239
     5ca:	1f 4f       	sbci	r17, 0xFF	; 255
     5cc:	ce 01       	movw	r24, r28
     5ce:	05 96       	adiw	r24, 0x05	; 5
     5d0:	b8 01       	movw	r22, r16
     5d2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__unpack_f>
     5d6:	89 85       	ldd	r24, Y+9	; 0x09
     5d8:	82 30       	cpi	r24, 0x02	; 2
     5da:	40 f0       	brcs	.+16     	; 0x5ec <__gesf2+0x56>
     5dc:	89 89       	ldd	r24, Y+17	; 0x11
     5de:	82 30       	cpi	r24, 0x02	; 2
     5e0:	28 f0       	brcs	.+10     	; 0x5ec <__gesf2+0x56>
     5e2:	c7 01       	movw	r24, r14
     5e4:	b8 01       	movw	r22, r16
     5e6:	0e 94 c2 05 	call	0xb84	; 0xb84 <__fpcmp_parts_f>
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <__gesf2+0x58>
     5ec:	8f ef       	ldi	r24, 0xFF	; 255
     5ee:	68 96       	adiw	r28, 0x18	; 24
     5f0:	e6 e0       	ldi	r30, 0x06	; 6
     5f2:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__epilogue_restores__+0x18>

000005f6 <__floatsisf>:
     5f6:	a8 e0       	ldi	r26, 0x08	; 8
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f3 e0       	ldi	r31, 0x03	; 3
     5fe:	0c 94 cd 14 	jmp	0x299a	; 0x299a <__prologue_saves__+0x12>
     602:	9b 01       	movw	r18, r22
     604:	ac 01       	movw	r20, r24
     606:	83 e0       	ldi	r24, 0x03	; 3
     608:	89 83       	std	Y+1, r24	; 0x01
     60a:	da 01       	movw	r26, r20
     60c:	c9 01       	movw	r24, r18
     60e:	88 27       	eor	r24, r24
     610:	b7 fd       	sbrc	r27, 7
     612:	83 95       	inc	r24
     614:	99 27       	eor	r25, r25
     616:	aa 27       	eor	r26, r26
     618:	bb 27       	eor	r27, r27
     61a:	b8 2e       	mov	r11, r24
     61c:	21 15       	cp	r18, r1
     61e:	31 05       	cpc	r19, r1
     620:	41 05       	cpc	r20, r1
     622:	51 05       	cpc	r21, r1
     624:	19 f4       	brne	.+6      	; 0x62c <__floatsisf+0x36>
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	89 83       	std	Y+1, r24	; 0x01
     62a:	3a c0       	rjmp	.+116    	; 0x6a0 <__floatsisf+0xaa>
     62c:	88 23       	and	r24, r24
     62e:	a9 f0       	breq	.+42     	; 0x65a <__floatsisf+0x64>
     630:	20 30       	cpi	r18, 0x00	; 0
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	38 07       	cpc	r19, r24
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	48 07       	cpc	r20, r24
     63a:	80 e8       	ldi	r24, 0x80	; 128
     63c:	58 07       	cpc	r21, r24
     63e:	29 f4       	brne	.+10     	; 0x64a <__floatsisf+0x54>
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	9f ec       	ldi	r25, 0xCF	; 207
     648:	30 c0       	rjmp	.+96     	; 0x6aa <__floatsisf+0xb4>
     64a:	ee 24       	eor	r14, r14
     64c:	ff 24       	eor	r15, r15
     64e:	87 01       	movw	r16, r14
     650:	e2 1a       	sub	r14, r18
     652:	f3 0a       	sbc	r15, r19
     654:	04 0b       	sbc	r16, r20
     656:	15 0b       	sbc	r17, r21
     658:	02 c0       	rjmp	.+4      	; 0x65e <__floatsisf+0x68>
     65a:	79 01       	movw	r14, r18
     65c:	8a 01       	movw	r16, r20
     65e:	8e e1       	ldi	r24, 0x1E	; 30
     660:	c8 2e       	mov	r12, r24
     662:	d1 2c       	mov	r13, r1
     664:	dc 82       	std	Y+4, r13	; 0x04
     666:	cb 82       	std	Y+3, r12	; 0x03
     668:	ed 82       	std	Y+5, r14	; 0x05
     66a:	fe 82       	std	Y+6, r15	; 0x06
     66c:	0f 83       	std	Y+7, r16	; 0x07
     66e:	18 87       	std	Y+8, r17	; 0x08
     670:	c8 01       	movw	r24, r16
     672:	b7 01       	movw	r22, r14
     674:	0e 94 26 04 	call	0x84c	; 0x84c <__clzsi2>
     678:	01 97       	sbiw	r24, 0x01	; 1
     67a:	18 16       	cp	r1, r24
     67c:	19 06       	cpc	r1, r25
     67e:	84 f4       	brge	.+32     	; 0x6a0 <__floatsisf+0xaa>
     680:	08 2e       	mov	r0, r24
     682:	04 c0       	rjmp	.+8      	; 0x68c <__floatsisf+0x96>
     684:	ee 0c       	add	r14, r14
     686:	ff 1c       	adc	r15, r15
     688:	00 1f       	adc	r16, r16
     68a:	11 1f       	adc	r17, r17
     68c:	0a 94       	dec	r0
     68e:	d2 f7       	brpl	.-12     	; 0x684 <__floatsisf+0x8e>
     690:	ed 82       	std	Y+5, r14	; 0x05
     692:	fe 82       	std	Y+6, r15	; 0x06
     694:	0f 83       	std	Y+7, r16	; 0x07
     696:	18 87       	std	Y+8, r17	; 0x08
     698:	c8 1a       	sub	r12, r24
     69a:	d9 0a       	sbc	r13, r25
     69c:	dc 82       	std	Y+4, r13	; 0x04
     69e:	cb 82       	std	Y+3, r12	; 0x03
     6a0:	ba 82       	std	Y+2, r11	; 0x02
     6a2:	ce 01       	movw	r24, r28
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	0e 94 75 04 	call	0x8ea	; 0x8ea <__pack_f>
     6aa:	28 96       	adiw	r28, 0x08	; 8
     6ac:	e9 e0       	ldi	r30, 0x09	; 9
     6ae:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__epilogue_restores__+0x12>

000006b2 <__fixsfsi>:
     6b2:	ac e0       	ldi	r26, 0x0C	; 12
     6b4:	b0 e0       	ldi	r27, 0x00	; 0
     6b6:	ef e5       	ldi	r30, 0x5F	; 95
     6b8:	f3 e0       	ldi	r31, 0x03	; 3
     6ba:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__prologue_saves__+0x20>
     6be:	69 83       	std	Y+1, r22	; 0x01
     6c0:	7a 83       	std	Y+2, r23	; 0x02
     6c2:	8b 83       	std	Y+3, r24	; 0x03
     6c4:	9c 83       	std	Y+4, r25	; 0x04
     6c6:	ce 01       	movw	r24, r28
     6c8:	01 96       	adiw	r24, 0x01	; 1
     6ca:	be 01       	movw	r22, r28
     6cc:	6b 5f       	subi	r22, 0xFB	; 251
     6ce:	7f 4f       	sbci	r23, 0xFF	; 255
     6d0:	0e 94 4a 05 	call	0xa94	; 0xa94 <__unpack_f>
     6d4:	8d 81       	ldd	r24, Y+5	; 0x05
     6d6:	82 30       	cpi	r24, 0x02	; 2
     6d8:	61 f1       	breq	.+88     	; 0x732 <__fixsfsi+0x80>
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	50 f1       	brcs	.+84     	; 0x732 <__fixsfsi+0x80>
     6de:	84 30       	cpi	r24, 0x04	; 4
     6e0:	21 f4       	brne	.+8      	; 0x6ea <__fixsfsi+0x38>
     6e2:	8e 81       	ldd	r24, Y+6	; 0x06
     6e4:	88 23       	and	r24, r24
     6e6:	51 f1       	breq	.+84     	; 0x73c <__fixsfsi+0x8a>
     6e8:	2e c0       	rjmp	.+92     	; 0x746 <__fixsfsi+0x94>
     6ea:	2f 81       	ldd	r18, Y+7	; 0x07
     6ec:	38 85       	ldd	r19, Y+8	; 0x08
     6ee:	37 fd       	sbrc	r19, 7
     6f0:	20 c0       	rjmp	.+64     	; 0x732 <__fixsfsi+0x80>
     6f2:	6e 81       	ldd	r22, Y+6	; 0x06
     6f4:	2f 31       	cpi	r18, 0x1F	; 31
     6f6:	31 05       	cpc	r19, r1
     6f8:	1c f0       	brlt	.+6      	; 0x700 <__fixsfsi+0x4e>
     6fa:	66 23       	and	r22, r22
     6fc:	f9 f0       	breq	.+62     	; 0x73c <__fixsfsi+0x8a>
     6fe:	23 c0       	rjmp	.+70     	; 0x746 <__fixsfsi+0x94>
     700:	8e e1       	ldi	r24, 0x1E	; 30
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	82 1b       	sub	r24, r18
     706:	93 0b       	sbc	r25, r19
     708:	29 85       	ldd	r18, Y+9	; 0x09
     70a:	3a 85       	ldd	r19, Y+10	; 0x0a
     70c:	4b 85       	ldd	r20, Y+11	; 0x0b
     70e:	5c 85       	ldd	r21, Y+12	; 0x0c
     710:	04 c0       	rjmp	.+8      	; 0x71a <__fixsfsi+0x68>
     712:	56 95       	lsr	r21
     714:	47 95       	ror	r20
     716:	37 95       	ror	r19
     718:	27 95       	ror	r18
     71a:	8a 95       	dec	r24
     71c:	d2 f7       	brpl	.-12     	; 0x712 <__fixsfsi+0x60>
     71e:	66 23       	and	r22, r22
     720:	b1 f0       	breq	.+44     	; 0x74e <__fixsfsi+0x9c>
     722:	50 95       	com	r21
     724:	40 95       	com	r20
     726:	30 95       	com	r19
     728:	21 95       	neg	r18
     72a:	3f 4f       	sbci	r19, 0xFF	; 255
     72c:	4f 4f       	sbci	r20, 0xFF	; 255
     72e:	5f 4f       	sbci	r21, 0xFF	; 255
     730:	0e c0       	rjmp	.+28     	; 0x74e <__fixsfsi+0x9c>
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	40 e0       	ldi	r20, 0x00	; 0
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	09 c0       	rjmp	.+18     	; 0x74e <__fixsfsi+0x9c>
     73c:	2f ef       	ldi	r18, 0xFF	; 255
     73e:	3f ef       	ldi	r19, 0xFF	; 255
     740:	4f ef       	ldi	r20, 0xFF	; 255
     742:	5f e7       	ldi	r21, 0x7F	; 127
     744:	04 c0       	rjmp	.+8      	; 0x74e <__fixsfsi+0x9c>
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	40 e0       	ldi	r20, 0x00	; 0
     74c:	50 e8       	ldi	r21, 0x80	; 128
     74e:	b9 01       	movw	r22, r18
     750:	ca 01       	movw	r24, r20
     752:	2c 96       	adiw	r28, 0x0c	; 12
     754:	e2 e0       	ldi	r30, 0x02	; 2
     756:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__epilogue_restores__+0x20>

0000075a <__floatunsisf>:
     75a:	a8 e0       	ldi	r26, 0x08	; 8
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	e3 eb       	ldi	r30, 0xB3	; 179
     760:	f3 e0       	ldi	r31, 0x03	; 3
     762:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__prologue_saves__+0x10>
     766:	7b 01       	movw	r14, r22
     768:	8c 01       	movw	r16, r24
     76a:	61 15       	cp	r22, r1
     76c:	71 05       	cpc	r23, r1
     76e:	81 05       	cpc	r24, r1
     770:	91 05       	cpc	r25, r1
     772:	19 f4       	brne	.+6      	; 0x77a <__floatunsisf+0x20>
     774:	82 e0       	ldi	r24, 0x02	; 2
     776:	89 83       	std	Y+1, r24	; 0x01
     778:	60 c0       	rjmp	.+192    	; 0x83a <__floatunsisf+0xe0>
     77a:	83 e0       	ldi	r24, 0x03	; 3
     77c:	89 83       	std	Y+1, r24	; 0x01
     77e:	8e e1       	ldi	r24, 0x1E	; 30
     780:	c8 2e       	mov	r12, r24
     782:	d1 2c       	mov	r13, r1
     784:	dc 82       	std	Y+4, r13	; 0x04
     786:	cb 82       	std	Y+3, r12	; 0x03
     788:	ed 82       	std	Y+5, r14	; 0x05
     78a:	fe 82       	std	Y+6, r15	; 0x06
     78c:	0f 83       	std	Y+7, r16	; 0x07
     78e:	18 87       	std	Y+8, r17	; 0x08
     790:	c8 01       	movw	r24, r16
     792:	b7 01       	movw	r22, r14
     794:	0e 94 26 04 	call	0x84c	; 0x84c <__clzsi2>
     798:	fc 01       	movw	r30, r24
     79a:	31 97       	sbiw	r30, 0x01	; 1
     79c:	f7 ff       	sbrs	r31, 7
     79e:	3b c0       	rjmp	.+118    	; 0x816 <__floatunsisf+0xbc>
     7a0:	22 27       	eor	r18, r18
     7a2:	33 27       	eor	r19, r19
     7a4:	2e 1b       	sub	r18, r30
     7a6:	3f 0b       	sbc	r19, r31
     7a8:	57 01       	movw	r10, r14
     7aa:	68 01       	movw	r12, r16
     7ac:	02 2e       	mov	r0, r18
     7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <__floatunsisf+0x5e>
     7b0:	d6 94       	lsr	r13
     7b2:	c7 94       	ror	r12
     7b4:	b7 94       	ror	r11
     7b6:	a7 94       	ror	r10
     7b8:	0a 94       	dec	r0
     7ba:	d2 f7       	brpl	.-12     	; 0x7b0 <__floatunsisf+0x56>
     7bc:	40 e0       	ldi	r20, 0x00	; 0
     7be:	50 e0       	ldi	r21, 0x00	; 0
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	a0 e0       	ldi	r26, 0x00	; 0
     7ca:	b0 e0       	ldi	r27, 0x00	; 0
     7cc:	04 c0       	rjmp	.+8      	; 0x7d6 <__floatunsisf+0x7c>
     7ce:	88 0f       	add	r24, r24
     7d0:	99 1f       	adc	r25, r25
     7d2:	aa 1f       	adc	r26, r26
     7d4:	bb 1f       	adc	r27, r27
     7d6:	2a 95       	dec	r18
     7d8:	d2 f7       	brpl	.-12     	; 0x7ce <__floatunsisf+0x74>
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	a1 09       	sbc	r26, r1
     7de:	b1 09       	sbc	r27, r1
     7e0:	8e 21       	and	r24, r14
     7e2:	9f 21       	and	r25, r15
     7e4:	a0 23       	and	r26, r16
     7e6:	b1 23       	and	r27, r17
     7e8:	00 97       	sbiw	r24, 0x00	; 0
     7ea:	a1 05       	cpc	r26, r1
     7ec:	b1 05       	cpc	r27, r1
     7ee:	21 f0       	breq	.+8      	; 0x7f8 <__floatunsisf+0x9e>
     7f0:	41 e0       	ldi	r20, 0x01	; 1
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	4a 29       	or	r20, r10
     7fa:	5b 29       	or	r21, r11
     7fc:	6c 29       	or	r22, r12
     7fe:	7d 29       	or	r23, r13
     800:	4d 83       	std	Y+5, r20	; 0x05
     802:	5e 83       	std	Y+6, r21	; 0x06
     804:	6f 83       	std	Y+7, r22	; 0x07
     806:	78 87       	std	Y+8, r23	; 0x08
     808:	8e e1       	ldi	r24, 0x1E	; 30
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	8e 1b       	sub	r24, r30
     80e:	9f 0b       	sbc	r25, r31
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	8b 83       	std	Y+3, r24	; 0x03
     814:	12 c0       	rjmp	.+36     	; 0x83a <__floatunsisf+0xe0>
     816:	30 97       	sbiw	r30, 0x00	; 0
     818:	81 f0       	breq	.+32     	; 0x83a <__floatunsisf+0xe0>
     81a:	0e 2e       	mov	r0, r30
     81c:	04 c0       	rjmp	.+8      	; 0x826 <__floatunsisf+0xcc>
     81e:	ee 0c       	add	r14, r14
     820:	ff 1c       	adc	r15, r15
     822:	00 1f       	adc	r16, r16
     824:	11 1f       	adc	r17, r17
     826:	0a 94       	dec	r0
     828:	d2 f7       	brpl	.-12     	; 0x81e <__floatunsisf+0xc4>
     82a:	ed 82       	std	Y+5, r14	; 0x05
     82c:	fe 82       	std	Y+6, r15	; 0x06
     82e:	0f 83       	std	Y+7, r16	; 0x07
     830:	18 87       	std	Y+8, r17	; 0x08
     832:	ce 1a       	sub	r12, r30
     834:	df 0a       	sbc	r13, r31
     836:	dc 82       	std	Y+4, r13	; 0x04
     838:	cb 82       	std	Y+3, r12	; 0x03
     83a:	1a 82       	std	Y+2, r1	; 0x02
     83c:	ce 01       	movw	r24, r28
     83e:	01 96       	adiw	r24, 0x01	; 1
     840:	0e 94 75 04 	call	0x8ea	; 0x8ea <__pack_f>
     844:	28 96       	adiw	r28, 0x08	; 8
     846:	ea e0       	ldi	r30, 0x0A	; 10
     848:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__epilogue_restores__+0x10>

0000084c <__clzsi2>:
     84c:	ef 92       	push	r14
     84e:	ff 92       	push	r15
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	7b 01       	movw	r14, r22
     856:	8c 01       	movw	r16, r24
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	e8 16       	cp	r14, r24
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	f8 06       	cpc	r15, r24
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	08 07       	cpc	r16, r24
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	18 07       	cpc	r17, r24
     868:	88 f4       	brcc	.+34     	; 0x88c <__stack+0x2d>
     86a:	8f ef       	ldi	r24, 0xFF	; 255
     86c:	e8 16       	cp	r14, r24
     86e:	f1 04       	cpc	r15, r1
     870:	01 05       	cpc	r16, r1
     872:	11 05       	cpc	r17, r1
     874:	31 f0       	breq	.+12     	; 0x882 <__stack+0x23>
     876:	28 f0       	brcs	.+10     	; 0x882 <__stack+0x23>
     878:	88 e0       	ldi	r24, 0x08	; 8
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	a0 e0       	ldi	r26, 0x00	; 0
     87e:	b0 e0       	ldi	r27, 0x00	; 0
     880:	17 c0       	rjmp	.+46     	; 0x8b0 <__stack+0x51>
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	a0 e0       	ldi	r26, 0x00	; 0
     888:	b0 e0       	ldi	r27, 0x00	; 0
     88a:	12 c0       	rjmp	.+36     	; 0x8b0 <__stack+0x51>
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	e8 16       	cp	r14, r24
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	f8 06       	cpc	r15, r24
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	08 07       	cpc	r16, r24
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	18 07       	cpc	r17, r24
     89c:	28 f0       	brcs	.+10     	; 0x8a8 <__stack+0x49>
     89e:	88 e1       	ldi	r24, 0x18	; 24
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	a0 e0       	ldi	r26, 0x00	; 0
     8a4:	b0 e0       	ldi	r27, 0x00	; 0
     8a6:	04 c0       	rjmp	.+8      	; 0x8b0 <__stack+0x51>
     8a8:	80 e1       	ldi	r24, 0x10	; 16
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	a0 e0       	ldi	r26, 0x00	; 0
     8ae:	b0 e0       	ldi	r27, 0x00	; 0
     8b0:	20 e2       	ldi	r18, 0x20	; 32
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	28 1b       	sub	r18, r24
     8ba:	39 0b       	sbc	r19, r25
     8bc:	4a 0b       	sbc	r20, r26
     8be:	5b 0b       	sbc	r21, r27
     8c0:	04 c0       	rjmp	.+8      	; 0x8ca <__stack+0x6b>
     8c2:	16 95       	lsr	r17
     8c4:	07 95       	ror	r16
     8c6:	f7 94       	ror	r15
     8c8:	e7 94       	ror	r14
     8ca:	8a 95       	dec	r24
     8cc:	d2 f7       	brpl	.-12     	; 0x8c2 <__stack+0x63>
     8ce:	f7 01       	movw	r30, r14
     8d0:	e8 59       	subi	r30, 0x98	; 152
     8d2:	ff 4f       	sbci	r31, 0xFF	; 255
     8d4:	80 81       	ld	r24, Z
     8d6:	28 1b       	sub	r18, r24
     8d8:	31 09       	sbc	r19, r1
     8da:	41 09       	sbc	r20, r1
     8dc:	51 09       	sbc	r21, r1
     8de:	c9 01       	movw	r24, r18
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	ff 90       	pop	r15
     8e6:	ef 90       	pop	r14
     8e8:	08 95       	ret

000008ea <__pack_f>:
     8ea:	df 92       	push	r13
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	fc 01       	movw	r30, r24
     8f6:	e4 80       	ldd	r14, Z+4	; 0x04
     8f8:	f5 80       	ldd	r15, Z+5	; 0x05
     8fa:	06 81       	ldd	r16, Z+6	; 0x06
     8fc:	17 81       	ldd	r17, Z+7	; 0x07
     8fe:	d1 80       	ldd	r13, Z+1	; 0x01
     900:	80 81       	ld	r24, Z
     902:	82 30       	cpi	r24, 0x02	; 2
     904:	48 f4       	brcc	.+18     	; 0x918 <__pack_f+0x2e>
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	a0 e1       	ldi	r26, 0x10	; 16
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	e8 2a       	or	r14, r24
     910:	f9 2a       	or	r15, r25
     912:	0a 2b       	or	r16, r26
     914:	1b 2b       	or	r17, r27
     916:	a5 c0       	rjmp	.+330    	; 0xa62 <__pack_f+0x178>
     918:	84 30       	cpi	r24, 0x04	; 4
     91a:	09 f4       	brne	.+2      	; 0x91e <__pack_f+0x34>
     91c:	9f c0       	rjmp	.+318    	; 0xa5c <__pack_f+0x172>
     91e:	82 30       	cpi	r24, 0x02	; 2
     920:	21 f4       	brne	.+8      	; 0x92a <__pack_f+0x40>
     922:	ee 24       	eor	r14, r14
     924:	ff 24       	eor	r15, r15
     926:	87 01       	movw	r16, r14
     928:	05 c0       	rjmp	.+10     	; 0x934 <__pack_f+0x4a>
     92a:	e1 14       	cp	r14, r1
     92c:	f1 04       	cpc	r15, r1
     92e:	01 05       	cpc	r16, r1
     930:	11 05       	cpc	r17, r1
     932:	19 f4       	brne	.+6      	; 0x93a <__pack_f+0x50>
     934:	e0 e0       	ldi	r30, 0x00	; 0
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	96 c0       	rjmp	.+300    	; 0xa66 <__pack_f+0x17c>
     93a:	62 81       	ldd	r22, Z+2	; 0x02
     93c:	73 81       	ldd	r23, Z+3	; 0x03
     93e:	9f ef       	ldi	r25, 0xFF	; 255
     940:	62 38       	cpi	r22, 0x82	; 130
     942:	79 07       	cpc	r23, r25
     944:	0c f0       	brlt	.+2      	; 0x948 <__pack_f+0x5e>
     946:	5b c0       	rjmp	.+182    	; 0x9fe <__pack_f+0x114>
     948:	22 e8       	ldi	r18, 0x82	; 130
     94a:	3f ef       	ldi	r19, 0xFF	; 255
     94c:	26 1b       	sub	r18, r22
     94e:	37 0b       	sbc	r19, r23
     950:	2a 31       	cpi	r18, 0x1A	; 26
     952:	31 05       	cpc	r19, r1
     954:	2c f0       	brlt	.+10     	; 0x960 <__pack_f+0x76>
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	40 e0       	ldi	r20, 0x00	; 0
     95c:	50 e0       	ldi	r21, 0x00	; 0
     95e:	2a c0       	rjmp	.+84     	; 0x9b4 <__pack_f+0xca>
     960:	b8 01       	movw	r22, r16
     962:	a7 01       	movw	r20, r14
     964:	02 2e       	mov	r0, r18
     966:	04 c0       	rjmp	.+8      	; 0x970 <__pack_f+0x86>
     968:	76 95       	lsr	r23
     96a:	67 95       	ror	r22
     96c:	57 95       	ror	r21
     96e:	47 95       	ror	r20
     970:	0a 94       	dec	r0
     972:	d2 f7       	brpl	.-12     	; 0x968 <__pack_f+0x7e>
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	a0 e0       	ldi	r26, 0x00	; 0
     97a:	b0 e0       	ldi	r27, 0x00	; 0
     97c:	04 c0       	rjmp	.+8      	; 0x986 <__pack_f+0x9c>
     97e:	88 0f       	add	r24, r24
     980:	99 1f       	adc	r25, r25
     982:	aa 1f       	adc	r26, r26
     984:	bb 1f       	adc	r27, r27
     986:	2a 95       	dec	r18
     988:	d2 f7       	brpl	.-12     	; 0x97e <__pack_f+0x94>
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	a1 09       	sbc	r26, r1
     98e:	b1 09       	sbc	r27, r1
     990:	8e 21       	and	r24, r14
     992:	9f 21       	and	r25, r15
     994:	a0 23       	and	r26, r16
     996:	b1 23       	and	r27, r17
     998:	00 97       	sbiw	r24, 0x00	; 0
     99a:	a1 05       	cpc	r26, r1
     99c:	b1 05       	cpc	r27, r1
     99e:	21 f0       	breq	.+8      	; 0x9a8 <__pack_f+0xbe>
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	a0 e0       	ldi	r26, 0x00	; 0
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	9a 01       	movw	r18, r20
     9aa:	ab 01       	movw	r20, r22
     9ac:	28 2b       	or	r18, r24
     9ae:	39 2b       	or	r19, r25
     9b0:	4a 2b       	or	r20, r26
     9b2:	5b 2b       	or	r21, r27
     9b4:	da 01       	movw	r26, r20
     9b6:	c9 01       	movw	r24, r18
     9b8:	8f 77       	andi	r24, 0x7F	; 127
     9ba:	90 70       	andi	r25, 0x00	; 0
     9bc:	a0 70       	andi	r26, 0x00	; 0
     9be:	b0 70       	andi	r27, 0x00	; 0
     9c0:	80 34       	cpi	r24, 0x40	; 64
     9c2:	91 05       	cpc	r25, r1
     9c4:	a1 05       	cpc	r26, r1
     9c6:	b1 05       	cpc	r27, r1
     9c8:	39 f4       	brne	.+14     	; 0x9d8 <__pack_f+0xee>
     9ca:	27 ff       	sbrs	r18, 7
     9cc:	09 c0       	rjmp	.+18     	; 0x9e0 <__pack_f+0xf6>
     9ce:	20 5c       	subi	r18, 0xC0	; 192
     9d0:	3f 4f       	sbci	r19, 0xFF	; 255
     9d2:	4f 4f       	sbci	r20, 0xFF	; 255
     9d4:	5f 4f       	sbci	r21, 0xFF	; 255
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0xf6>
     9d8:	21 5c       	subi	r18, 0xC1	; 193
     9da:	3f 4f       	sbci	r19, 0xFF	; 255
     9dc:	4f 4f       	sbci	r20, 0xFF	; 255
     9de:	5f 4f       	sbci	r21, 0xFF	; 255
     9e0:	e0 e0       	ldi	r30, 0x00	; 0
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	20 30       	cpi	r18, 0x00	; 0
     9e6:	a0 e0       	ldi	r26, 0x00	; 0
     9e8:	3a 07       	cpc	r19, r26
     9ea:	a0 e0       	ldi	r26, 0x00	; 0
     9ec:	4a 07       	cpc	r20, r26
     9ee:	a0 e4       	ldi	r26, 0x40	; 64
     9f0:	5a 07       	cpc	r21, r26
     9f2:	10 f0       	brcs	.+4      	; 0x9f8 <__pack_f+0x10e>
     9f4:	e1 e0       	ldi	r30, 0x01	; 1
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	79 01       	movw	r14, r18
     9fa:	8a 01       	movw	r16, r20
     9fc:	27 c0       	rjmp	.+78     	; 0xa4c <__pack_f+0x162>
     9fe:	60 38       	cpi	r22, 0x80	; 128
     a00:	71 05       	cpc	r23, r1
     a02:	64 f5       	brge	.+88     	; 0xa5c <__pack_f+0x172>
     a04:	fb 01       	movw	r30, r22
     a06:	e1 58       	subi	r30, 0x81	; 129
     a08:	ff 4f       	sbci	r31, 0xFF	; 255
     a0a:	d8 01       	movw	r26, r16
     a0c:	c7 01       	movw	r24, r14
     a0e:	8f 77       	andi	r24, 0x7F	; 127
     a10:	90 70       	andi	r25, 0x00	; 0
     a12:	a0 70       	andi	r26, 0x00	; 0
     a14:	b0 70       	andi	r27, 0x00	; 0
     a16:	80 34       	cpi	r24, 0x40	; 64
     a18:	91 05       	cpc	r25, r1
     a1a:	a1 05       	cpc	r26, r1
     a1c:	b1 05       	cpc	r27, r1
     a1e:	39 f4       	brne	.+14     	; 0xa2e <__pack_f+0x144>
     a20:	e7 fe       	sbrs	r14, 7
     a22:	0d c0       	rjmp	.+26     	; 0xa3e <__pack_f+0x154>
     a24:	80 e4       	ldi	r24, 0x40	; 64
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	a0 e0       	ldi	r26, 0x00	; 0
     a2a:	b0 e0       	ldi	r27, 0x00	; 0
     a2c:	04 c0       	rjmp	.+8      	; 0xa36 <__pack_f+0x14c>
     a2e:	8f e3       	ldi	r24, 0x3F	; 63
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	a0 e0       	ldi	r26, 0x00	; 0
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	e8 0e       	add	r14, r24
     a38:	f9 1e       	adc	r15, r25
     a3a:	0a 1f       	adc	r16, r26
     a3c:	1b 1f       	adc	r17, r27
     a3e:	17 ff       	sbrs	r17, 7
     a40:	05 c0       	rjmp	.+10     	; 0xa4c <__pack_f+0x162>
     a42:	16 95       	lsr	r17
     a44:	07 95       	ror	r16
     a46:	f7 94       	ror	r15
     a48:	e7 94       	ror	r14
     a4a:	31 96       	adiw	r30, 0x01	; 1
     a4c:	87 e0       	ldi	r24, 0x07	; 7
     a4e:	16 95       	lsr	r17
     a50:	07 95       	ror	r16
     a52:	f7 94       	ror	r15
     a54:	e7 94       	ror	r14
     a56:	8a 95       	dec	r24
     a58:	d1 f7       	brne	.-12     	; 0xa4e <__pack_f+0x164>
     a5a:	05 c0       	rjmp	.+10     	; 0xa66 <__pack_f+0x17c>
     a5c:	ee 24       	eor	r14, r14
     a5e:	ff 24       	eor	r15, r15
     a60:	87 01       	movw	r16, r14
     a62:	ef ef       	ldi	r30, 0xFF	; 255
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	6e 2f       	mov	r22, r30
     a68:	67 95       	ror	r22
     a6a:	66 27       	eor	r22, r22
     a6c:	67 95       	ror	r22
     a6e:	90 2f       	mov	r25, r16
     a70:	9f 77       	andi	r25, 0x7F	; 127
     a72:	d7 94       	ror	r13
     a74:	dd 24       	eor	r13, r13
     a76:	d7 94       	ror	r13
     a78:	8e 2f       	mov	r24, r30
     a7a:	86 95       	lsr	r24
     a7c:	49 2f       	mov	r20, r25
     a7e:	46 2b       	or	r20, r22
     a80:	58 2f       	mov	r21, r24
     a82:	5d 29       	or	r21, r13
     a84:	b7 01       	movw	r22, r14
     a86:	ca 01       	movw	r24, r20
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	ff 90       	pop	r15
     a8e:	ef 90       	pop	r14
     a90:	df 90       	pop	r13
     a92:	08 95       	ret

00000a94 <__unpack_f>:
     a94:	fc 01       	movw	r30, r24
     a96:	db 01       	movw	r26, r22
     a98:	40 81       	ld	r20, Z
     a9a:	51 81       	ldd	r21, Z+1	; 0x01
     a9c:	22 81       	ldd	r18, Z+2	; 0x02
     a9e:	62 2f       	mov	r22, r18
     aa0:	6f 77       	andi	r22, 0x7F	; 127
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	22 1f       	adc	r18, r18
     aa6:	22 27       	eor	r18, r18
     aa8:	22 1f       	adc	r18, r18
     aaa:	93 81       	ldd	r25, Z+3	; 0x03
     aac:	89 2f       	mov	r24, r25
     aae:	88 0f       	add	r24, r24
     ab0:	82 2b       	or	r24, r18
     ab2:	28 2f       	mov	r18, r24
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	99 1f       	adc	r25, r25
     ab8:	99 27       	eor	r25, r25
     aba:	99 1f       	adc	r25, r25
     abc:	11 96       	adiw	r26, 0x01	; 1
     abe:	9c 93       	st	X, r25
     ac0:	11 97       	sbiw	r26, 0x01	; 1
     ac2:	21 15       	cp	r18, r1
     ac4:	31 05       	cpc	r19, r1
     ac6:	a9 f5       	brne	.+106    	; 0xb32 <__unpack_f+0x9e>
     ac8:	41 15       	cp	r20, r1
     aca:	51 05       	cpc	r21, r1
     acc:	61 05       	cpc	r22, r1
     ace:	71 05       	cpc	r23, r1
     ad0:	11 f4       	brne	.+4      	; 0xad6 <__unpack_f+0x42>
     ad2:	82 e0       	ldi	r24, 0x02	; 2
     ad4:	37 c0       	rjmp	.+110    	; 0xb44 <__unpack_f+0xb0>
     ad6:	82 e8       	ldi	r24, 0x82	; 130
     ad8:	9f ef       	ldi	r25, 0xFF	; 255
     ada:	13 96       	adiw	r26, 0x03	; 3
     adc:	9c 93       	st	X, r25
     ade:	8e 93       	st	-X, r24
     ae0:	12 97       	sbiw	r26, 0x02	; 2
     ae2:	9a 01       	movw	r18, r20
     ae4:	ab 01       	movw	r20, r22
     ae6:	67 e0       	ldi	r22, 0x07	; 7
     ae8:	22 0f       	add	r18, r18
     aea:	33 1f       	adc	r19, r19
     aec:	44 1f       	adc	r20, r20
     aee:	55 1f       	adc	r21, r21
     af0:	6a 95       	dec	r22
     af2:	d1 f7       	brne	.-12     	; 0xae8 <__unpack_f+0x54>
     af4:	83 e0       	ldi	r24, 0x03	; 3
     af6:	8c 93       	st	X, r24
     af8:	0d c0       	rjmp	.+26     	; 0xb14 <__unpack_f+0x80>
     afa:	22 0f       	add	r18, r18
     afc:	33 1f       	adc	r19, r19
     afe:	44 1f       	adc	r20, r20
     b00:	55 1f       	adc	r21, r21
     b02:	12 96       	adiw	r26, 0x02	; 2
     b04:	8d 91       	ld	r24, X+
     b06:	9c 91       	ld	r25, X
     b08:	13 97       	sbiw	r26, 0x03	; 3
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	13 96       	adiw	r26, 0x03	; 3
     b0e:	9c 93       	st	X, r25
     b10:	8e 93       	st	-X, r24
     b12:	12 97       	sbiw	r26, 0x02	; 2
     b14:	20 30       	cpi	r18, 0x00	; 0
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	38 07       	cpc	r19, r24
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	48 07       	cpc	r20, r24
     b1e:	80 e4       	ldi	r24, 0x40	; 64
     b20:	58 07       	cpc	r21, r24
     b22:	58 f3       	brcs	.-42     	; 0xafa <__unpack_f+0x66>
     b24:	14 96       	adiw	r26, 0x04	; 4
     b26:	2d 93       	st	X+, r18
     b28:	3d 93       	st	X+, r19
     b2a:	4d 93       	st	X+, r20
     b2c:	5c 93       	st	X, r21
     b2e:	17 97       	sbiw	r26, 0x07	; 7
     b30:	08 95       	ret
     b32:	2f 3f       	cpi	r18, 0xFF	; 255
     b34:	31 05       	cpc	r19, r1
     b36:	79 f4       	brne	.+30     	; 0xb56 <__unpack_f+0xc2>
     b38:	41 15       	cp	r20, r1
     b3a:	51 05       	cpc	r21, r1
     b3c:	61 05       	cpc	r22, r1
     b3e:	71 05       	cpc	r23, r1
     b40:	19 f4       	brne	.+6      	; 0xb48 <__unpack_f+0xb4>
     b42:	84 e0       	ldi	r24, 0x04	; 4
     b44:	8c 93       	st	X, r24
     b46:	08 95       	ret
     b48:	64 ff       	sbrs	r22, 4
     b4a:	03 c0       	rjmp	.+6      	; 0xb52 <__unpack_f+0xbe>
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	8c 93       	st	X, r24
     b50:	12 c0       	rjmp	.+36     	; 0xb76 <__unpack_f+0xe2>
     b52:	1c 92       	st	X, r1
     b54:	10 c0       	rjmp	.+32     	; 0xb76 <__unpack_f+0xe2>
     b56:	2f 57       	subi	r18, 0x7F	; 127
     b58:	30 40       	sbci	r19, 0x00	; 0
     b5a:	13 96       	adiw	r26, 0x03	; 3
     b5c:	3c 93       	st	X, r19
     b5e:	2e 93       	st	-X, r18
     b60:	12 97       	sbiw	r26, 0x02	; 2
     b62:	83 e0       	ldi	r24, 0x03	; 3
     b64:	8c 93       	st	X, r24
     b66:	87 e0       	ldi	r24, 0x07	; 7
     b68:	44 0f       	add	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	66 1f       	adc	r22, r22
     b6e:	77 1f       	adc	r23, r23
     b70:	8a 95       	dec	r24
     b72:	d1 f7       	brne	.-12     	; 0xb68 <__unpack_f+0xd4>
     b74:	70 64       	ori	r23, 0x40	; 64
     b76:	14 96       	adiw	r26, 0x04	; 4
     b78:	4d 93       	st	X+, r20
     b7a:	5d 93       	st	X+, r21
     b7c:	6d 93       	st	X+, r22
     b7e:	7c 93       	st	X, r23
     b80:	17 97       	sbiw	r26, 0x07	; 7
     b82:	08 95       	ret

00000b84 <__fpcmp_parts_f>:
     b84:	1f 93       	push	r17
     b86:	dc 01       	movw	r26, r24
     b88:	fb 01       	movw	r30, r22
     b8a:	9c 91       	ld	r25, X
     b8c:	92 30       	cpi	r25, 0x02	; 2
     b8e:	08 f4       	brcc	.+2      	; 0xb92 <__fpcmp_parts_f+0xe>
     b90:	47 c0       	rjmp	.+142    	; 0xc20 <__fpcmp_parts_f+0x9c>
     b92:	80 81       	ld	r24, Z
     b94:	82 30       	cpi	r24, 0x02	; 2
     b96:	08 f4       	brcc	.+2      	; 0xb9a <__fpcmp_parts_f+0x16>
     b98:	43 c0       	rjmp	.+134    	; 0xc20 <__fpcmp_parts_f+0x9c>
     b9a:	94 30       	cpi	r25, 0x04	; 4
     b9c:	51 f4       	brne	.+20     	; 0xbb2 <__fpcmp_parts_f+0x2e>
     b9e:	11 96       	adiw	r26, 0x01	; 1
     ba0:	1c 91       	ld	r17, X
     ba2:	84 30       	cpi	r24, 0x04	; 4
     ba4:	99 f5       	brne	.+102    	; 0xc0c <__fpcmp_parts_f+0x88>
     ba6:	81 81       	ldd	r24, Z+1	; 0x01
     ba8:	68 2f       	mov	r22, r24
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	61 1b       	sub	r22, r17
     bae:	71 09       	sbc	r23, r1
     bb0:	3f c0       	rjmp	.+126    	; 0xc30 <__fpcmp_parts_f+0xac>
     bb2:	84 30       	cpi	r24, 0x04	; 4
     bb4:	21 f0       	breq	.+8      	; 0xbbe <__fpcmp_parts_f+0x3a>
     bb6:	92 30       	cpi	r25, 0x02	; 2
     bb8:	31 f4       	brne	.+12     	; 0xbc6 <__fpcmp_parts_f+0x42>
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	b9 f1       	breq	.+110    	; 0xc2c <__fpcmp_parts_f+0xa8>
     bbe:	81 81       	ldd	r24, Z+1	; 0x01
     bc0:	88 23       	and	r24, r24
     bc2:	89 f1       	breq	.+98     	; 0xc26 <__fpcmp_parts_f+0xa2>
     bc4:	2d c0       	rjmp	.+90     	; 0xc20 <__fpcmp_parts_f+0x9c>
     bc6:	11 96       	adiw	r26, 0x01	; 1
     bc8:	1c 91       	ld	r17, X
     bca:	11 97       	sbiw	r26, 0x01	; 1
     bcc:	82 30       	cpi	r24, 0x02	; 2
     bce:	f1 f0       	breq	.+60     	; 0xc0c <__fpcmp_parts_f+0x88>
     bd0:	81 81       	ldd	r24, Z+1	; 0x01
     bd2:	18 17       	cp	r17, r24
     bd4:	d9 f4       	brne	.+54     	; 0xc0c <__fpcmp_parts_f+0x88>
     bd6:	12 96       	adiw	r26, 0x02	; 2
     bd8:	2d 91       	ld	r18, X+
     bda:	3c 91       	ld	r19, X
     bdc:	13 97       	sbiw	r26, 0x03	; 3
     bde:	82 81       	ldd	r24, Z+2	; 0x02
     be0:	93 81       	ldd	r25, Z+3	; 0x03
     be2:	82 17       	cp	r24, r18
     be4:	93 07       	cpc	r25, r19
     be6:	94 f0       	brlt	.+36     	; 0xc0c <__fpcmp_parts_f+0x88>
     be8:	28 17       	cp	r18, r24
     bea:	39 07       	cpc	r19, r25
     bec:	bc f0       	brlt	.+46     	; 0xc1c <__fpcmp_parts_f+0x98>
     bee:	14 96       	adiw	r26, 0x04	; 4
     bf0:	8d 91       	ld	r24, X+
     bf2:	9d 91       	ld	r25, X+
     bf4:	0d 90       	ld	r0, X+
     bf6:	bc 91       	ld	r27, X
     bf8:	a0 2d       	mov	r26, r0
     bfa:	24 81       	ldd	r18, Z+4	; 0x04
     bfc:	35 81       	ldd	r19, Z+5	; 0x05
     bfe:	46 81       	ldd	r20, Z+6	; 0x06
     c00:	57 81       	ldd	r21, Z+7	; 0x07
     c02:	28 17       	cp	r18, r24
     c04:	39 07       	cpc	r19, r25
     c06:	4a 07       	cpc	r20, r26
     c08:	5b 07       	cpc	r21, r27
     c0a:	18 f4       	brcc	.+6      	; 0xc12 <__fpcmp_parts_f+0x8e>
     c0c:	11 23       	and	r17, r17
     c0e:	41 f0       	breq	.+16     	; 0xc20 <__fpcmp_parts_f+0x9c>
     c10:	0a c0       	rjmp	.+20     	; 0xc26 <__fpcmp_parts_f+0xa2>
     c12:	82 17       	cp	r24, r18
     c14:	93 07       	cpc	r25, r19
     c16:	a4 07       	cpc	r26, r20
     c18:	b5 07       	cpc	r27, r21
     c1a:	40 f4       	brcc	.+16     	; 0xc2c <__fpcmp_parts_f+0xa8>
     c1c:	11 23       	and	r17, r17
     c1e:	19 f0       	breq	.+6      	; 0xc26 <__fpcmp_parts_f+0xa2>
     c20:	61 e0       	ldi	r22, 0x01	; 1
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	05 c0       	rjmp	.+10     	; 0xc30 <__fpcmp_parts_f+0xac>
     c26:	6f ef       	ldi	r22, 0xFF	; 255
     c28:	7f ef       	ldi	r23, 0xFF	; 255
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <__fpcmp_parts_f+0xac>
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	cb 01       	movw	r24, r22
     c32:	1f 91       	pop	r17
     c34:	08 95       	ret

00000c36 <SOS_init>:
* Input : void
* Output : SOS_STATUS_SUCCESS if done successfully
*		   SOS_STATUS_INVALID_STATE if anything wrong
*/
enu_system_status_t SOS_init(void)
{
     c36:	df 93       	push	r29
     c38:	cf 93       	push	r28
     c3a:	0f 92       	push	r0
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
	enu_system_status_t enu_system_status_retVal = SOS_STATUS_SUCCESS;
     c40:	19 82       	std	Y+1, r1	; 0x01
	if (NOT_INIT == u8_gs_sos_module_state)
     c42:	80 91 a0 04 	lds	r24, 0x04A0
     c46:	88 23       	and	r24, r24
     c48:	d1 f4       	brne	.+52     	; 0xc7e <SOS_init+0x48>
	{
		enu_system_status_retVal = TIMER2_enuInit(OVF_MODE);
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	0e 94 3f 0c 	call	0x187e	; 0x187e <TIMER2_enuInit>
     c50:	89 83       	std	Y+1, r24	; 0x01
		enu_system_status_retVal = TIMER2_enuSetPrescallar(TIMER_PRE_64);
     c52:	84 e0       	ldi	r24, 0x04	; 4
     c54:	0e 94 b6 0c 	call	0x196c	; 0x196c <TIMER2_enuSetPrescallar>
     c58:	89 83       	std	Y+1, r24	; 0x01
		enu_system_status_retVal = TIMER2_enuSetTime_ms(TICK_TIME_1_MS);
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <TIMER2_enuSetTime_ms>
     c60:	89 83       	std	Y+1, r24	; 0x01
		enu_system_status_retVal = TIMER2_enuOVFIrqEnable();
     c62:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <TIMER2_enuOVFIrqEnable>
     c66:	89 83       	std	Y+1, r24	; 0x01
		TIMER2_vidSetcbf_OVF(SOS_tick_cbf);
     c68:	8b e9       	ldi	r24, 0x9B	; 155
     c6a:	9b e0       	ldi	r25, 0x0B	; 11
     c6c:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <TIMER2_vidSetcbf_OVF>
		if (SOS_STATUS_SUCCESS == enu_system_status_retVal)
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	88 23       	and	r24, r24
     c74:	31 f4       	brne	.+12     	; 0xc82 <SOS_init+0x4c>
		{
			u8_gs_sos_module_state = INIT;
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	80 93 a0 04 	sts	0x04A0, r24
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <SOS_init+0x4c>
		}
	}
	else
	{
		enu_system_status_retVal = SOS_STATUS_INVALID_STATE;
     c7e:	87 e0       	ldi	r24, 0x07	; 7
     c80:	89 83       	std	Y+1, r24	; 0x01
	}
	if (enu_system_status_retVal)
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	88 23       	and	r24, r24
     c86:	11 f0       	breq	.+4      	; 0xc8c <SOS_init+0x56>
	{
		enu_system_status_retVal = SOS_STATUS_INVALID_STATE;
     c88:	87 e0       	ldi	r24, 0x07	; 7
     c8a:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		// do nothing
	}
	return enu_system_status_retVal;
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
}
     c8e:	0f 90       	pop	r0
     c90:	cf 91       	pop	r28
     c92:	df 91       	pop	r29
     c94:	08 95       	ret

00000c96 <SOS_deinit>:
* Input : void
* Output : SOS_STATUS_SUCCESS if done successfully
*		   SOS_STATUS_INVALID_STATE if anything wrong
*/
enu_system_status_t SOS_deinit (void)
{
     c96:	df 93       	push	r29
     c98:	cf 93       	push	r28
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <SOS_deinit+0x6>
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
	enu_system_status_t enu_system_status_retVal = SOS_STATUS_SUCCESS;
     ca0:	1a 82       	std	Y+2, r1	; 0x02
	if (INIT == u8_gs_sos_module_state)
     ca2:	80 91 a0 04 	lds	r24, 0x04A0
     ca6:	81 30       	cpi	r24, 0x01	; 1
     ca8:	09 f0       	breq	.+2      	; 0xcac <SOS_deinit+0x16>
     caa:	80 c0       	rjmp	.+256    	; 0xdac <SOS_deinit+0x116>
	{
		for(uint8_t i = DATABASE_FIRST_INDEX ; i < u8_gs_max_count_of_tasks ; i++)
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	89 83       	std	Y+1, r24	; 0x01
     cb0:	71 c0       	rjmp	.+226    	; 0xd94 <SOS_deinit+0xfe>
		{
			//delete task parameters
			u8_gs_arr_index_periority[arr_st_gs_task_parameters[i].u8_task_periority]		= NOT_INIT;
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	c9 01       	movw	r24, r18
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	82 0f       	add	r24, r18
     cc0:	93 1f       	adc	r25, r19
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	fc 01       	movw	r30, r24
     cc8:	ed 57       	subi	r30, 0x7D	; 125
     cca:	fe 4f       	sbci	r31, 0xFE	; 254
     ccc:	80 81       	ld	r24, Z
     cce:	88 2f       	mov	r24, r24
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	fc 01       	movw	r30, r24
     cd4:	e4 5c       	subi	r30, 0xC4	; 196
     cd6:	fb 4f       	sbci	r31, 0xFB	; 251
     cd8:	10 82       	st	Z, r1
			arr_st_gs_task_parameters[i].ptr_function_name									= NULL;
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	c9 01       	movw	r24, r18
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	82 0f       	add	r24, r18
     ce8:	93 1f       	adc	r25, r19
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	fc 01       	movw	r30, r24
     cf0:	e0 58       	subi	r30, 0x80	; 128
     cf2:	fe 4f       	sbci	r31, 0xFE	; 254
     cf4:	11 82       	std	Z+1, r1	; 0x01
     cf6:	10 82       	st	Z, r1
			arr_st_gs_task_parameters[i].u8_task_periority									= NOT_INIT;
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	c9 01       	movw	r24, r18
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	82 0f       	add	r24, r18
     d06:	93 1f       	adc	r25, r19
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	fc 01       	movw	r30, r24
     d0e:	ed 57       	subi	r30, 0x7D	; 125
     d10:	fe 4f       	sbci	r31, 0xFE	; 254
     d12:	10 82       	st	Z, r1
			arr_st_gs_task_parameters[i].u16_task_period									= NOT_INIT;
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	c9 01       	movw	r24, r18
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	82 0f       	add	r24, r18
     d22:	93 1f       	adc	r25, r19
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	fc 01       	movw	r30, r24
     d2a:	ec 57       	subi	r30, 0x7C	; 124
     d2c:	fe 4f       	sbci	r31, 0xFE	; 254
     d2e:	11 82       	std	Z+1, r1	; 0x01
     d30:	10 82       	st	Z, r1
			
			// delete task index
			u8_gs_arr_index_id[arr_st_gs_task_parameters[i].u8_task_id]						= NOT_INIT;
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	c9 01       	movw	r24, r18
     d3a:	88 0f       	add	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	82 0f       	add	r24, r18
     d40:	93 1f       	adc	r25, r19
     d42:	01 96       	adiw	r24, 0x01	; 1
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	fc 01       	movw	r30, r24
     d4a:	e0 58       	subi	r30, 0x80	; 128
     d4c:	fe 4f       	sbci	r31, 0xFE	; 254
     d4e:	80 81       	ld	r24, Z
     d50:	88 2f       	mov	r24, r24
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	fc 01       	movw	r30, r24
     d56:	e8 52       	subi	r30, 0x28	; 40
     d58:	fc 4f       	sbci	r31, 0xFC	; 252
     d5a:	10 82       	st	Z, r1
			
			// delete task ID
			arr_st_gs_task_parameters[i].u8_task_id											= NOT_INIT;
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	28 2f       	mov	r18, r24
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	c9 01       	movw	r24, r18
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	82 0f       	add	r24, r18
     d6a:	93 1f       	adc	r25, r19
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	fc 01       	movw	r30, r24
     d74:	e0 58       	subi	r30, 0x80	; 128
     d76:	fe 4f       	sbci	r31, 0xFE	; 254
     d78:	10 82       	st	Z, r1
			
			// delete task tick counter
			u16_sos_task_tick[i]															= NOT_INIT;
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	88 2f       	mov	r24, r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	fc 01       	movw	r30, r24
     d86:	ef 55       	subi	r30, 0x5F	; 95
     d88:	fb 4f       	sbci	r31, 0xFB	; 251
     d8a:	11 82       	std	Z+1, r1	; 0x01
     d8c:	10 82       	st	Z, r1
enu_system_status_t SOS_deinit (void)
{
	enu_system_status_t enu_system_status_retVal = SOS_STATUS_SUCCESS;
	if (INIT == u8_gs_sos_module_state)
	{
		for(uint8_t i = DATABASE_FIRST_INDEX ; i < u8_gs_max_count_of_tasks ; i++)
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	8f 5f       	subi	r24, 0xFF	; 255
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	90 91 68 01 	lds	r25, 0x0168
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	89 17       	cp	r24, r25
     d9c:	08 f4       	brcc	.+2      	; 0xda0 <SOS_deinit+0x10a>
     d9e:	89 cf       	rjmp	.-238    	; 0xcb2 <SOS_deinit+0x1c>
			// delete task tick counter
			u16_sos_task_tick[i]															= NOT_INIT;
		}
		
		// set max count of tasks to the initial value
		u8_gs_max_count_of_tasks	= DATABASE_FIRST_INDEX;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	80 93 68 01 	sts	0x0168, r24
		
		// change module state
		u8_gs_sos_module_state		= NOT_INIT;
     da6:	10 92 a0 04 	sts	0x04A0, r1
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <SOS_deinit+0x11a>
	}
	else
	{
		enu_system_status_retVal = SOS_STATUS_INVALID_STATE;
     dac:	87 e0       	ldi	r24, 0x07	; 7
     dae:	8a 83       	std	Y+2, r24	; 0x02
	}
	return enu_system_status_retVal;
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
}
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	08 95       	ret

00000dbc <SOS_create_task>:
*			u16_task_period : task period
* Output : SOS_STATUS_SUCCESS if done successfully
*		   SOS_STATUS_INVALID_STATE if anything wrong
*/
enu_system_status_t SOS_create_task(ptr_function_name_t ptr_function_name , uint8_t u8_task_id , uint8_t u8_task_periority,uint16_t u16_task_period)
{
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	27 97       	sbiw	r28, 0x07	; 7
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
     dd0:	9b 83       	std	Y+3, r25	; 0x03
     dd2:	8a 83       	std	Y+2, r24	; 0x02
     dd4:	6c 83       	std	Y+4, r22	; 0x04
     dd6:	4d 83       	std	Y+5, r20	; 0x05
     dd8:	3f 83       	std	Y+7, r19	; 0x07
     dda:	2e 83       	std	Y+6, r18	; 0x06
	enu_system_status_t enu_system_status_retVal = SOS_STATUS_SUCCESS;
     ddc:	19 82       	std	Y+1, r1	; 0x01
	
		//  if not null pointer
	if ((NULL != ptr_function_name)														&&
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	9b 81       	ldd	r25, Y+3	; 0x03
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	09 f4       	brne	.+2      	; 0xde8 <SOS_create_task+0x2c>
     de6:	8a c0       	rjmp	.+276    	; 0xefc <SOS_create_task+0x140>
     de8:	8c 81       	ldd	r24, Y+4	; 0x04
     dea:	84 36       	cpi	r24, 0x64	; 100
     dec:	08 f0       	brcs	.+2      	; 0xdf0 <SOS_create_task+0x34>
     dee:	86 c0       	rjmp	.+268    	; 0xefc <SOS_create_task+0x140>
     df0:	8c 81       	ldd	r24, Y+4	; 0x04
     df2:	88 23       	and	r24, r24
     df4:	09 f4       	brne	.+2      	; 0xdf8 <SOS_create_task+0x3c>
     df6:	82 c0       	rjmp	.+260    	; 0xefc <SOS_create_task+0x140>
     df8:	8d 81       	ldd	r24, Y+5	; 0x05
     dfa:	84 36       	cpi	r24, 0x64	; 100
     dfc:	08 f0       	brcs	.+2      	; 0xe00 <SOS_create_task+0x44>
     dfe:	7e c0       	rjmp	.+252    	; 0xefc <SOS_create_task+0x140>
     e00:	80 91 68 01 	lds	r24, 0x0168
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	c9 01       	movw	r24, r18
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	82 0f       	add	r24, r18
     e10:	93 1f       	adc	r25, r19
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	fc 01       	movw	r30, r24
     e18:	e0 58       	subi	r30, 0x80	; 128
     e1a:	fe 4f       	sbci	r31, 0xFE	; 254
     e1c:	80 81       	ld	r24, Z
     e1e:	91 81       	ldd	r25, Z+1	; 0x01
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	09 f0       	breq	.+2      	; 0xe26 <SOS_create_task+0x6a>
     e24:	6b c0       	rjmp	.+214    	; 0xefc <SOS_create_task+0x140>
     e26:	80 91 a0 04 	lds	r24, 0x04A0
     e2a:	81 30       	cpi	r24, 0x01	; 1
     e2c:	09 f0       	breq	.+2      	; 0xe30 <SOS_create_task+0x74>
     e2e:	66 c0       	rjmp	.+204    	; 0xefc <SOS_create_task+0x140>
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	9b 81       	ldd	r25, Y+3	; 0x03
     e34:	6c 81       	ldd	r22, Y+4	; 0x04
     e36:	4d 81       	ldd	r20, Y+5	; 0x05
     e38:	0e 94 9e 09 	call	0x133c	; 0x133c <SOS_token_config_param>
     e3c:	87 30       	cpi	r24, 0x07	; 7
     e3e:	09 f4       	brne	.+2      	; 0xe42 <SOS_create_task+0x86>
     e40:	5d c0       	rjmp	.+186    	; 0xefc <SOS_create_task+0x140>
		
		// if any of the parameters was taken before 
		(SOS_STATUS_INVALID_STATE != SOS_token_config_param(ptr_function_name,u8_task_id,u8_task_periority)))
	{
		// store the task parameters
		arr_st_gs_task_parameters[u8_gs_max_count_of_tasks].ptr_function_name		= ptr_function_name;
     e42:	80 91 68 01 	lds	r24, 0x0168
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	c9 01       	movw	r24, r18
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	82 0f       	add	r24, r18
     e52:	93 1f       	adc	r25, r19
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	fc 01       	movw	r30, r24
     e5a:	e0 58       	subi	r30, 0x80	; 128
     e5c:	fe 4f       	sbci	r31, 0xFE	; 254
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	9b 81       	ldd	r25, Y+3	; 0x03
     e62:	91 83       	std	Z+1, r25	; 0x01
     e64:	80 83       	st	Z, r24
		arr_st_gs_task_parameters[u8_gs_max_count_of_tasks].u8_task_periority		= u8_task_periority;
     e66:	80 91 68 01 	lds	r24, 0x0168
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	c9 01       	movw	r24, r18
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	82 0f       	add	r24, r18
     e76:	93 1f       	adc	r25, r19
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	fc 01       	movw	r30, r24
     e7e:	ed 57       	subi	r30, 0x7D	; 125
     e80:	fe 4f       	sbci	r31, 0xFE	; 254
     e82:	8d 81       	ldd	r24, Y+5	; 0x05
     e84:	80 83       	st	Z, r24
		arr_st_gs_task_parameters[u8_gs_max_count_of_tasks].u16_task_period			= u16_task_period;
     e86:	80 91 68 01 	lds	r24, 0x0168
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	c9 01       	movw	r24, r18
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	82 0f       	add	r24, r18
     e96:	93 1f       	adc	r25, r19
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	fc 01       	movw	r30, r24
     e9e:	ec 57       	subi	r30, 0x7C	; 124
     ea0:	fe 4f       	sbci	r31, 0xFE	; 254
     ea2:	8e 81       	ldd	r24, Y+6	; 0x06
     ea4:	9f 81       	ldd	r25, Y+7	; 0x07
     ea6:	91 83       	std	Z+1, r25	; 0x01
     ea8:	80 83       	st	Z, r24
		arr_st_gs_task_parameters[u8_gs_max_count_of_tasks].u8_task_id				= u8_task_id;
     eaa:	80 91 68 01 	lds	r24, 0x0168
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	c9 01       	movw	r24, r18
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	82 0f       	add	r24, r18
     eba:	93 1f       	adc	r25, r19
     ebc:	01 96       	adiw	r24, 0x01	; 1
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	fc 01       	movw	r30, r24
     ec4:	e0 58       	subi	r30, 0x80	; 128
     ec6:	fe 4f       	sbci	r31, 0xFE	; 254
     ec8:	8c 81       	ldd	r24, Y+4	; 0x04
     eca:	80 83       	st	Z, r24
		
		
		// store priority index
		u8_gs_arr_index_periority[u8_task_periority]								= u8_gs_max_count_of_tasks;
     ecc:	8d 81       	ldd	r24, Y+5	; 0x05
     ece:	88 2f       	mov	r24, r24
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	20 91 68 01 	lds	r18, 0x0168
     ed6:	fc 01       	movw	r30, r24
     ed8:	e4 5c       	subi	r30, 0xC4	; 196
     eda:	fb 4f       	sbci	r31, 0xFB	; 251
     edc:	20 83       	st	Z, r18
		
		// store task index by using task id
		u8_gs_arr_index_id[u8_task_id]												= u8_gs_max_count_of_tasks;
     ede:	8c 81       	ldd	r24, Y+4	; 0x04
     ee0:	88 2f       	mov	r24, r24
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	20 91 68 01 	lds	r18, 0x0168
     ee8:	fc 01       	movw	r30, r24
     eea:	e8 52       	subi	r30, 0x28	; 40
     eec:	fc 4f       	sbci	r31, 0xFC	; 252
     eee:	20 83       	st	Z, r18
		
		
		// increment task counter
		u8_gs_max_count_of_tasks++;
     ef0:	80 91 68 01 	lds	r24, 0x0168
     ef4:	8f 5f       	subi	r24, 0xFF	; 255
     ef6:	80 93 68 01 	sts	0x0168, r24
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <SOS_create_task+0x144>
	}
	else
	{
		enu_system_status_retVal = SOS_STATUS_INVALID_STATE;
     efc:	87 e0       	ldi	r24, 0x07	; 7
     efe:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_system_status_retVal;
     f00:	89 81       	ldd	r24, Y+1	; 0x01
}
     f02:	27 96       	adiw	r28, 0x07	; 7
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	f8 94       	cli
     f08:	de bf       	out	0x3e, r29	; 62
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	cd bf       	out	0x3d, r28	; 61
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	08 95       	ret

00000f14 <SOS_delete_task>:
* Input : u8_task_id : task ID
* Output : SOS_STATUS_SUCCESS if done successfully
*		   SOS_STATUS_INVALID_STATE if anything wrong
*/
enu_system_status_t SOS_delete_task(uint8_t u8_task_id)
{
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	00 d0       	rcall	.+0      	; 0xf1a <SOS_delete_task+0x6>
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	8a 83       	std	Y+2, r24	; 0x02
	enu_system_status_t enu_system_status_retVal = SOS_STATUS_SUCCESS;
     f20:	19 82       	std	Y+1, r1	; 0x01
	
	
		// If the module state was init
	if ((INIT == u8_gs_sos_module_state)						&&
     f22:	80 91 a0 04 	lds	r24, 0x04A0
     f26:	81 30       	cpi	r24, 0x01	; 1
     f28:	09 f0       	breq	.+2      	; 0xf2c <SOS_delete_task+0x18>
     f2a:	a1 c0       	rjmp	.+322    	; 0x106e <SOS_delete_task+0x15a>
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	88 23       	and	r24, r24
     f30:	09 f4       	brne	.+2      	; 0xf34 <SOS_delete_task+0x20>
     f32:	9d c0       	rjmp	.+314    	; 0x106e <SOS_delete_task+0x15a>
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	84 36       	cpi	r24, 0x64	; 100
     f38:	08 f0       	brcs	.+2      	; 0xf3c <SOS_delete_task+0x28>
     f3a:	99 c0       	rjmp	.+306    	; 0x106e <SOS_delete_task+0x15a>
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	88 2f       	mov	r24, r24
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	fc 01       	movw	r30, r24
     f44:	e8 52       	subi	r30, 0x28	; 40
     f46:	fc 4f       	sbci	r31, 0xFC	; 252
     f48:	80 81       	ld	r24, Z
     f4a:	88 23       	and	r24, r24
     f4c:	09 f4       	brne	.+2      	; 0xf50 <SOS_delete_task+0x3c>
     f4e:	8f c0       	rjmp	.+286    	; 0x106e <SOS_delete_task+0x15a>
		// If there is a task with the given ID 
		(NOT_INIT != u8_gs_arr_index_id[u8_task_id]))
	{
		
		// clear task parameters
		u8_gs_arr_index_periority[arr_st_gs_task_parameters[u8_gs_arr_index_id[u8_task_id]].u8_task_periority]	= NOT_INIT;
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	88 2f       	mov	r24, r24
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	fc 01       	movw	r30, r24
     f58:	e8 52       	subi	r30, 0x28	; 40
     f5a:	fc 4f       	sbci	r31, 0xFC	; 252
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	c9 01       	movw	r24, r18
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	82 0f       	add	r24, r18
     f6a:	93 1f       	adc	r25, r19
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	fc 01       	movw	r30, r24
     f72:	ed 57       	subi	r30, 0x7D	; 125
     f74:	fe 4f       	sbci	r31, 0xFE	; 254
     f76:	80 81       	ld	r24, Z
     f78:	88 2f       	mov	r24, r24
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	fc 01       	movw	r30, r24
     f7e:	e4 5c       	subi	r30, 0xC4	; 196
     f80:	fb 4f       	sbci	r31, 0xFB	; 251
     f82:	10 82       	st	Z, r1
		arr_st_gs_task_parameters[u8_gs_arr_index_id[u8_task_id]].ptr_function_name								= NULL;
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	88 2f       	mov	r24, r24
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	fc 01       	movw	r30, r24
     f8c:	e8 52       	subi	r30, 0x28	; 40
     f8e:	fc 4f       	sbci	r31, 0xFC	; 252
     f90:	80 81       	ld	r24, Z
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	c9 01       	movw	r24, r18
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	82 0f       	add	r24, r18
     f9e:	93 1f       	adc	r25, r19
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	fc 01       	movw	r30, r24
     fa6:	e0 58       	subi	r30, 0x80	; 128
     fa8:	fe 4f       	sbci	r31, 0xFE	; 254
     faa:	11 82       	std	Z+1, r1	; 0x01
     fac:	10 82       	st	Z, r1
		arr_st_gs_task_parameters[u8_gs_arr_index_id[u8_task_id]].u8_task_periority								= NOT_INIT;
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	88 2f       	mov	r24, r24
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	fc 01       	movw	r30, r24
     fb6:	e8 52       	subi	r30, 0x28	; 40
     fb8:	fc 4f       	sbci	r31, 0xFC	; 252
     fba:	80 81       	ld	r24, Z
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	c9 01       	movw	r24, r18
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	82 0f       	add	r24, r18
     fc8:	93 1f       	adc	r25, r19
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	fc 01       	movw	r30, r24
     fd0:	ed 57       	subi	r30, 0x7D	; 125
     fd2:	fe 4f       	sbci	r31, 0xFE	; 254
     fd4:	10 82       	st	Z, r1
		arr_st_gs_task_parameters[u8_gs_arr_index_id[u8_task_id]].u16_task_period								= NOT_INIT;
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	88 2f       	mov	r24, r24
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	fc 01       	movw	r30, r24
     fde:	e8 52       	subi	r30, 0x28	; 40
     fe0:	fc 4f       	sbci	r31, 0xFC	; 252
     fe2:	80 81       	ld	r24, Z
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	c9 01       	movw	r24, r18
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	82 0f       	add	r24, r18
     ff0:	93 1f       	adc	r25, r19
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	fc 01       	movw	r30, r24
     ff8:	ec 57       	subi	r30, 0x7C	; 124
     ffa:	fe 4f       	sbci	r31, 0xFE	; 254
     ffc:	11 82       	std	Z+1, r1	; 0x01
     ffe:	10 82       	st	Z, r1
		arr_st_gs_task_parameters[u8_gs_arr_index_id[u8_task_id]].u8_task_id									= NOT_INIT;
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	88 2f       	mov	r24, r24
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	fc 01       	movw	r30, r24
    1008:	e8 52       	subi	r30, 0x28	; 40
    100a:	fc 4f       	sbci	r31, 0xFC	; 252
    100c:	80 81       	ld	r24, Z
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	c9 01       	movw	r24, r18
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	82 0f       	add	r24, r18
    101a:	93 1f       	adc	r25, r19
    101c:	01 96       	adiw	r24, 0x01	; 1
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	fc 01       	movw	r30, r24
    1024:	e0 58       	subi	r30, 0x80	; 128
    1026:	fe 4f       	sbci	r31, 0xFE	; 254
    1028:	10 82       	st	Z, r1
		u8_gs_arr_index_id[u8_task_id]																			= NOT_INIT;
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	88 2f       	mov	r24, r24
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	fc 01       	movw	r30, r24
    1032:	e8 52       	subi	r30, 0x28	; 40
    1034:	fc 4f       	sbci	r31, 0xFC	; 252
    1036:	10 82       	st	Z, r1
		
		
		// if it is not the final task rearrange tasks
		if (u8_gs_max_count_of_tasks-DATABASE_FIRST_INDEX != u8_gs_arr_index_id[u8_task_id])
    1038:	80 91 68 01 	lds	r24, 0x0168
    103c:	88 2f       	mov	r24, r24
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	9c 01       	movw	r18, r24
    1042:	21 50       	subi	r18, 0x01	; 1
    1044:	30 40       	sbci	r19, 0x00	; 0
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	88 2f       	mov	r24, r24
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	fc 01       	movw	r30, r24
    104e:	e8 52       	subi	r30, 0x28	; 40
    1050:	fc 4f       	sbci	r31, 0xFC	; 252
    1052:	80 81       	ld	r24, Z
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	28 17       	cp	r18, r24
    105a:	39 07       	cpc	r19, r25
    105c:	11 f0       	breq	.+4      	; 0x1062 <SOS_delete_task+0x14e>
		{
			SOS_rearrange_tasks();
    105e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <SOS_rearrange_tasks>
		else
		{
			// do nothing
		}
		
		u8_gs_max_count_of_tasks--;
    1062:	80 91 68 01 	lds	r24, 0x0168
    1066:	81 50       	subi	r24, 0x01	; 1
    1068:	80 93 68 01 	sts	0x0168, r24
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <SOS_delete_task+0x15e>
	}
	else
	{
		enu_system_status_retVal = SOS_STATUS_INVALID_STATE;
    106e:	87 e0       	ldi	r24, 0x07	; 7
    1070:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_system_status_retVal;
    1072:	89 81       	ldd	r24, Y+1	; 0x01
}
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <SOS_modify_task>:
*			u16_task_period : task period
* Output : SOS_STATUS_SUCCESS if done successfully
*		   SOS_STATUS_INVALID_STATE if anything wrong
*/
enu_system_status_t SOS_modify_task(uint8_t u8_task_id , uint8_t u8_task_periority,uint16_t u16_task_period)
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <SOS_modify_task+0x6>
    1084:	00 d0       	rcall	.+0      	; 0x1086 <SOS_modify_task+0x8>
    1086:	0f 92       	push	r0
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	8a 83       	std	Y+2, r24	; 0x02
    108e:	6b 83       	std	Y+3, r22	; 0x03
    1090:	5d 83       	std	Y+5, r21	; 0x05
    1092:	4c 83       	std	Y+4, r20	; 0x04
	enu_system_status_t enu_system_status_retVal = SOS_STATUS_SUCCESS;
    1094:	19 82       	std	Y+1, r1	; 0x01
		
		// if the module state is init 
	if ((INIT == u8_gs_sos_module_state)						&&
    1096:	80 91 a0 04 	lds	r24, 0x04A0
    109a:	81 30       	cpi	r24, 0x01	; 1
    109c:	09 f0       	breq	.+2      	; 0x10a0 <SOS_modify_task+0x22>
    109e:	b8 c0       	rjmp	.+368    	; 0x1210 <SOS_modify_task+0x192>
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	84 36       	cpi	r24, 0x64	; 100
    10a4:	08 f0       	brcs	.+2      	; 0x10a8 <SOS_modify_task+0x2a>
    10a6:	b4 c0       	rjmp	.+360    	; 0x1210 <SOS_modify_task+0x192>
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	84 36       	cpi	r24, 0x64	; 100
    10ac:	08 f0       	brcs	.+2      	; 0x10b0 <SOS_modify_task+0x32>
    10ae:	b0 c0       	rjmp	.+352    	; 0x1210 <SOS_modify_task+0x192>
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	88 23       	and	r24, r24
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <SOS_modify_task+0x3a>
    10b6:	ac c0       	rjmp	.+344    	; 0x1210 <SOS_modify_task+0x192>
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	88 2f       	mov	r24, r24
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	fc 01       	movw	r30, r24
    10c0:	e8 52       	subi	r30, 0x28	; 40
    10c2:	fc 4f       	sbci	r31, 0xFC	; 252
    10c4:	80 81       	ld	r24, Z
    10c6:	88 23       	and	r24, r24
    10c8:	09 f4       	brne	.+2      	; 0x10cc <SOS_modify_task+0x4e>
    10ca:	a2 c0       	rjmp	.+324    	; 0x1210 <SOS_modify_task+0x192>
		
		// if the place in the database is not empty and stored before
		(NOT_INIT != u8_gs_arr_index_id[u8_task_id]))
	{
		// if it is a different priority
		if (arr_st_gs_task_parameters[u8_gs_arr_index_id[u8_task_id]].u8_task_periority != u8_task_periority)
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	88 2f       	mov	r24, r24
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	fc 01       	movw	r30, r24
    10d4:	e8 52       	subi	r30, 0x28	; 40
    10d6:	fc 4f       	sbci	r31, 0xFC	; 252
    10d8:	80 81       	ld	r24, Z
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	c9 01       	movw	r24, r18
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	82 0f       	add	r24, r18
    10e6:	93 1f       	adc	r25, r19
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	fc 01       	movw	r30, r24
    10ee:	ed 57       	subi	r30, 0x7D	; 125
    10f0:	fe 4f       	sbci	r31, 0xFE	; 254
    10f2:	90 81       	ld	r25, Z
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	98 17       	cp	r25, r24
    10f8:	09 f4       	brne	.+2      	; 0x10fc <SOS_modify_task+0x7e>
    10fa:	64 c0       	rjmp	.+200    	; 0x11c4 <SOS_modify_task+0x146>
		{
			if (NOT_INIT == u8_gs_arr_index_periority[u8_task_periority])
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	88 2f       	mov	r24, r24
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	fc 01       	movw	r30, r24
    1104:	e4 5c       	subi	r30, 0xC4	; 196
    1106:	fb 4f       	sbci	r31, 0xFB	; 251
    1108:	80 81       	ld	r24, Z
    110a:	88 23       	and	r24, r24
    110c:	09 f0       	breq	.+2      	; 0x1110 <SOS_modify_task+0x92>
    110e:	57 c0       	rjmp	.+174    	; 0x11be <SOS_modify_task+0x140>
			{
				u8_gs_arr_index_periority[arr_st_gs_task_parameters[u8_gs_arr_index_id[u8_task_id]].u8_task_periority] = NOT_INIT;
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	88 2f       	mov	r24, r24
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	fc 01       	movw	r30, r24
    1118:	e8 52       	subi	r30, 0x28	; 40
    111a:	fc 4f       	sbci	r31, 0xFC	; 252
    111c:	80 81       	ld	r24, Z
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	c9 01       	movw	r24, r18
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	82 0f       	add	r24, r18
    112a:	93 1f       	adc	r25, r19
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	fc 01       	movw	r30, r24
    1132:	ed 57       	subi	r30, 0x7D	; 125
    1134:	fe 4f       	sbci	r31, 0xFE	; 254
    1136:	80 81       	ld	r24, Z
    1138:	88 2f       	mov	r24, r24
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	fc 01       	movw	r30, r24
    113e:	e4 5c       	subi	r30, 0xC4	; 196
    1140:	fb 4f       	sbci	r31, 0xFB	; 251
    1142:	10 82       	st	Z, r1
				
				// modify task parameters
				arr_st_gs_task_parameters[u8_gs_arr_index_id[u8_task_id]].u8_task_periority		= u8_task_periority;
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	88 2f       	mov	r24, r24
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	fc 01       	movw	r30, r24
    114c:	e8 52       	subi	r30, 0x28	; 40
    114e:	fc 4f       	sbci	r31, 0xFC	; 252
    1150:	80 81       	ld	r24, Z
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	c9 01       	movw	r24, r18
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	82 0f       	add	r24, r18
    115e:	93 1f       	adc	r25, r19
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	fc 01       	movw	r30, r24
    1166:	ed 57       	subi	r30, 0x7D	; 125
    1168:	fe 4f       	sbci	r31, 0xFE	; 254
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	80 83       	st	Z, r24
				arr_st_gs_task_parameters[u8_gs_arr_index_id[u8_task_id]].u16_task_period		= u16_task_period;
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	88 2f       	mov	r24, r24
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	fc 01       	movw	r30, r24
    1176:	e8 52       	subi	r30, 0x28	; 40
    1178:	fc 4f       	sbci	r31, 0xFC	; 252
    117a:	80 81       	ld	r24, Z
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	c9 01       	movw	r24, r18
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	82 0f       	add	r24, r18
    1188:	93 1f       	adc	r25, r19
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	fc 01       	movw	r30, r24
    1190:	ec 57       	subi	r30, 0x7C	; 124
    1192:	fe 4f       	sbci	r31, 0xFE	; 254
    1194:	8c 81       	ldd	r24, Y+4	; 0x04
    1196:	9d 81       	ldd	r25, Y+5	; 0x05
    1198:	91 83       	std	Z+1, r25	; 0x01
    119a:	80 83       	st	Z, r24
				u8_gs_arr_index_periority[u8_task_periority]									= u8_gs_arr_index_id[u8_task_id];
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	88 2f       	mov	r24, r24
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	fc 01       	movw	r30, r24
    11aa:	e8 52       	subi	r30, 0x28	; 40
    11ac:	fc 4f       	sbci	r31, 0xFC	; 252
    11ae:	80 81       	ld	r24, Z
    11b0:	f9 01       	movw	r30, r18
    11b2:	e4 5c       	subi	r30, 0xC4	; 196
    11b4:	fb 4f       	sbci	r31, 0xFB	; 251
    11b6:	80 83       	st	Z, r24
				SOS_rearrange_tasks();
    11b8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <SOS_rearrange_tasks>
    11bc:	2b c0       	rjmp	.+86     	; 0x1214 <SOS_modify_task+0x196>
			}
			else
			{
				enu_system_status_retVal = SOS_STATUS_INVALID_STATE;
    11be:	87 e0       	ldi	r24, 0x07	; 7
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	28 c0       	rjmp	.+80     	; 0x1214 <SOS_modify_task+0x196>
		}
		else
		{
			// modify task parameters
			//arr_st_gs_task_parameters[u8_gs_arr_index_id[u8_task_id]].u8_task_periority		= u8_task_periority;
			arr_st_gs_task_parameters[u8_gs_arr_index_id[u8_task_id]].u16_task_period		= u16_task_period;
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	88 2f       	mov	r24, r24
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	fc 01       	movw	r30, r24
    11cc:	e8 52       	subi	r30, 0x28	; 40
    11ce:	fc 4f       	sbci	r31, 0xFC	; 252
    11d0:	80 81       	ld	r24, Z
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	c9 01       	movw	r24, r18
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	82 0f       	add	r24, r18
    11de:	93 1f       	adc	r25, r19
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	fc 01       	movw	r30, r24
    11e6:	ec 57       	subi	r30, 0x7C	; 124
    11e8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ea:	8c 81       	ldd	r24, Y+4	; 0x04
    11ec:	9d 81       	ldd	r25, Y+5	; 0x05
    11ee:	91 83       	std	Z+1, r25	; 0x01
    11f0:	80 83       	st	Z, r24
			u8_gs_arr_index_periority[u8_task_periority]									= u8_gs_arr_index_id[u8_task_id];
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	88 2f       	mov	r24, r24
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	fc 01       	movw	r30, r24
    1200:	e8 52       	subi	r30, 0x28	; 40
    1202:	fc 4f       	sbci	r31, 0xFC	; 252
    1204:	80 81       	ld	r24, Z
    1206:	f9 01       	movw	r30, r18
    1208:	e4 5c       	subi	r30, 0xC4	; 196
    120a:	fb 4f       	sbci	r31, 0xFB	; 251
    120c:	80 83       	st	Z, r24
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <SOS_modify_task+0x196>
		}
	}
	else
	{
		enu_system_status_retVal = SOS_STATUS_INVALID_STATE;
    1210:	87 e0       	ldi	r24, 0x07	; 7
    1212:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_system_status_retVal;
    1214:	89 81       	ldd	r24, Y+1	; 0x01
}
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	08 95       	ret

00001226 <SOS_run>:
* Desc : SOS_run to run the sos module
* Input : void
* Output : void
*/
void SOS_run(void)
{
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	0f 92       	push	r0
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
	// arrange tasks for 1 time only in the first start
	if (INIT == u8_gs_rearrange_flag)
    1230:	80 91 69 01 	lds	r24, 0x0169
    1234:	90 91 6a 01 	lds	r25, 0x016A
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	31 f4       	brne	.+12     	; 0x124a <SOS_run+0x24>
	{
		SOS_rearrange_tasks();
    123e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <SOS_rearrange_tasks>
		u8_gs_rearrange_flag = NOT_INIT;
    1242:	10 92 6a 01 	sts	0x016A, r1
    1246:	10 92 69 01 	sts	0x0169, r1
	}
	
	
	// disable start external interrupt
	// enable stop external interrupt
	if (NULL != ptr_function_disable_ext_interrupt)
    124a:	80 91 69 05 	lds	r24, 0x0569
    124e:	90 91 6a 05 	lds	r25, 0x056A
    1252:	00 97       	sbiw	r24, 0x00	; 0
    1254:	49 f0       	breq	.+18     	; 0x1268 <SOS_run+0x42>
	{
		// run handler
		(ptr_function_disable_ext_interrupt)();
    1256:	e0 91 69 05 	lds	r30, 0x0569
    125a:	f0 91 6a 05 	lds	r31, 0x056A
    125e:	09 95       	icall
		
		// clear the pointer
		ptr_function_disable_ext_interrupt = NULL;
    1260:	10 92 6a 05 	sts	0x056A, r1
    1264:	10 92 69 05 	sts	0x0569, r1
		// do nothing
	}
	
	
	// start timer 
	TIMER2_enuStart();
    1268:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <TIMER2_enuStart>
    126c:	42 c0       	rjmp	.+132    	; 0x12f2 <SOS_run+0xcc>
	// loop till the state change 
	while(INIT == u8_gs_sos_module_state)
	{
		
		// loop on tasks based on priority and execution time
		for(uint8_t i = DATABASE_FIRST_INDEX ; i  < u8_gs_max_count_of_tasks ; i++)
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	89 83       	std	Y+1, r24	; 0x01
    1272:	3a c0       	rjmp	.+116    	; 0x12e8 <SOS_run+0xc2>
		{
			// if its the time to be executed the task will run
			if (arr_st_gs_task_parameters[i].u16_task_period == u16_sos_task_tick[i])
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	c9 01       	movw	r24, r18
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	82 0f       	add	r24, r18
    1282:	93 1f       	adc	r25, r19
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	fc 01       	movw	r30, r24
    128a:	ec 57       	subi	r30, 0x7C	; 124
    128c:	fe 4f       	sbci	r31, 0xFE	; 254
    128e:	20 81       	ld	r18, Z
    1290:	31 81       	ldd	r19, Z+1	; 0x01
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	88 2f       	mov	r24, r24
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	fc 01       	movw	r30, r24
    129e:	ef 55       	subi	r30, 0x5F	; 95
    12a0:	fb 4f       	sbci	r31, 0xFB	; 251
    12a2:	80 81       	ld	r24, Z
    12a4:	91 81       	ldd	r25, Z+1	; 0x01
    12a6:	28 17       	cp	r18, r24
    12a8:	39 07       	cpc	r19, r25
    12aa:	d9 f4       	brne	.+54     	; 0x12e2 <SOS_run+0xbc>
			{
				// run the task
				(arr_st_gs_task_parameters[i].ptr_function_name)();
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	c9 01       	movw	r24, r18
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	82 0f       	add	r24, r18
    12ba:	93 1f       	adc	r25, r19
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	fc 01       	movw	r30, r24
    12c2:	e0 58       	subi	r30, 0x80	; 128
    12c4:	fe 4f       	sbci	r31, 0xFE	; 254
    12c6:	01 90       	ld	r0, Z+
    12c8:	f0 81       	ld	r31, Z
    12ca:	e0 2d       	mov	r30, r0
    12cc:	09 95       	icall
				
				// clear the task tick counter
				u16_sos_task_tick[i] = 0;
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	88 2f       	mov	r24, r24
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	fc 01       	movw	r30, r24
    12da:	ef 55       	subi	r30, 0x5F	; 95
    12dc:	fb 4f       	sbci	r31, 0xFB	; 251
    12de:	11 82       	std	Z+1, r1	; 0x01
    12e0:	10 82       	st	Z, r1
	// loop till the state change 
	while(INIT == u8_gs_sos_module_state)
	{
		
		// loop on tasks based on priority and execution time
		for(uint8_t i = DATABASE_FIRST_INDEX ; i  < u8_gs_max_count_of_tasks ; i++)
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	8f 5f       	subi	r24, 0xFF	; 255
    12e6:	89 83       	std	Y+1, r24	; 0x01
    12e8:	90 91 68 01 	lds	r25, 0x0168
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	89 17       	cp	r24, r25
    12f0:	08 f2       	brcs	.-126    	; 0x1274 <SOS_run+0x4e>
	// start timer 
	TIMER2_enuStart();
	
	
	// loop till the state change 
	while(INIT == u8_gs_sos_module_state)
    12f2:	80 91 a0 04 	lds	r24, 0x04A0
    12f6:	81 30       	cpi	r24, 0x01	; 1
    12f8:	09 f4       	brne	.+2      	; 0x12fc <SOS_run+0xd6>
    12fa:	b9 cf       	rjmp	.-142    	; 0x126e <SOS_run+0x48>
				// clear the task tick counter
				u16_sos_task_tick[i] = 0;
			}
		}
	}
}
    12fc:	0f 90       	pop	r0
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <SOS_disable>:
* Desc : SOS_disable to disable the sos module
* Input : void
* Output : void
*/
void SOS_disable(void)
{
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
	// stop timer
	TIMER2_vidStop();
    130c:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <TIMER2_vidStop>
	
	// disable stop external interrupt
	// enable start external interrupt
	if (NULL != ptr_function_disable_ext_interrupt)
    1310:	80 91 69 05 	lds	r24, 0x0569
    1314:	90 91 6a 05 	lds	r25, 0x056A
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	49 f0       	breq	.+18     	; 0x132e <SOS_disable+0x2a>
	{
		// run handler
		(ptr_function_disable_ext_interrupt)();
    131c:	e0 91 69 05 	lds	r30, 0x0569
    1320:	f0 91 6a 05 	lds	r31, 0x056A
    1324:	09 95       	icall
		
		// clear the pointer
		ptr_function_disable_ext_interrupt = NULL;
    1326:	10 92 6a 05 	sts	0x056A, r1
    132a:	10 92 69 05 	sts	0x0569, r1
	}
	while(DISABLE == u8_gs_sos_module_state)
    132e:	80 91 a0 04 	lds	r24, 0x04A0
    1332:	82 30       	cpi	r24, 0x02	; 2
    1334:	e1 f3       	breq	.-8      	; 0x132e <SOS_disable+0x2a>
	{
		// stay here till the state changes
	}
}
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <SOS_token_config_param>:
*			u16_task_period : task period
* Output : SOS_STATUS_SUCCESS if done successfully
*		   SOS_STATUS_INVALID_STATE if anything wrong
*/
static enu_system_status_t SOS_token_config_param(ptr_function_name_t ptr_function_name , uint8_t u8_task_id , uint8_t u8_task_periority)
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	00 d0       	rcall	.+0      	; 0x1342 <SOS_token_config_param+0x6>
    1342:	00 d0       	rcall	.+0      	; 0x1344 <SOS_token_config_param+0x8>
    1344:	00 d0       	rcall	.+0      	; 0x1346 <SOS_token_config_param+0xa>
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	9c 83       	std	Y+4, r25	; 0x04
    134c:	8b 83       	std	Y+3, r24	; 0x03
    134e:	6d 83       	std	Y+5, r22	; 0x05
    1350:	4e 83       	std	Y+6, r20	; 0x06
	enu_system_status_t enu_system_status_retVal = SOS_STATUS_SUCCESS;
    1352:	1a 82       	std	Y+2, r1	; 0x02
	
	
	// The task ID was taken before
	if ((NOT_INIT != u8_gs_arr_index_id[u8_task_id]) ||
    1354:	8d 81       	ldd	r24, Y+5	; 0x05
    1356:	88 2f       	mov	r24, r24
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	fc 01       	movw	r30, r24
    135c:	e8 52       	subi	r30, 0x28	; 40
    135e:	fc 4f       	sbci	r31, 0xFC	; 252
    1360:	80 81       	ld	r24, Z
    1362:	88 23       	and	r24, r24
    1364:	49 f4       	brne	.+18     	; 0x1378 <SOS_token_config_param+0x3c>
    1366:	8e 81       	ldd	r24, Y+6	; 0x06
    1368:	88 2f       	mov	r24, r24
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	fc 01       	movw	r30, r24
    136e:	e4 5c       	subi	r30, 0xC4	; 196
    1370:	fb 4f       	sbci	r31, 0xFB	; 251
    1372:	80 81       	ld	r24, Z
    1374:	88 23       	and	r24, r24
    1376:	19 f0       	breq	.+6      	; 0x137e <SOS_token_config_param+0x42>
		// The task priority was taken before 
		(NOT_INIT != u8_gs_arr_index_periority[u8_task_periority]))
	{
		enu_system_status_retVal = SOS_STATUS_INVALID_STATE;
    1378:	87 e0       	ldi	r24, 0x07	; 7
    137a:	8a 83       	std	Y+2, r24	; 0x02
    137c:	22 c0       	rjmp	.+68     	; 0x13c2 <SOS_token_config_param+0x86>
	}
	else
	{
		// check if the function name (pointer) was taken before
		for (uint8_t i = DATABASE_FIRST_INDEX ; i < u8_gs_max_count_of_tasks ; i++)
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	89 83       	std	Y+1, r24	; 0x01
    1382:	1a c0       	rjmp	.+52     	; 0x13b8 <SOS_token_config_param+0x7c>
		{
			if (arr_st_gs_task_parameters[i].ptr_function_name == ptr_function_name)
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	c9 01       	movw	r24, r18
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	82 0f       	add	r24, r18
    1392:	93 1f       	adc	r25, r19
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	fc 01       	movw	r30, r24
    139a:	e0 58       	subi	r30, 0x80	; 128
    139c:	fe 4f       	sbci	r31, 0xFE	; 254
    139e:	20 81       	ld	r18, Z
    13a0:	31 81       	ldd	r19, Z+1	; 0x01
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	9c 81       	ldd	r25, Y+4	; 0x04
    13a6:	28 17       	cp	r18, r24
    13a8:	39 07       	cpc	r19, r25
    13aa:	19 f4       	brne	.+6      	; 0x13b2 <SOS_token_config_param+0x76>
			{
				enu_system_status_retVal = SOS_STATUS_INVALID_STATE;
    13ac:	87 e0       	ldi	r24, 0x07	; 7
    13ae:	8a 83       	std	Y+2, r24	; 0x02
    13b0:	08 c0       	rjmp	.+16     	; 0x13c2 <SOS_token_config_param+0x86>
		enu_system_status_retVal = SOS_STATUS_INVALID_STATE;
	}
	else
	{
		// check if the function name (pointer) was taken before
		for (uint8_t i = DATABASE_FIRST_INDEX ; i < u8_gs_max_count_of_tasks ; i++)
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	8f 5f       	subi	r24, 0xFF	; 255
    13b6:	89 83       	std	Y+1, r24	; 0x01
    13b8:	90 91 68 01 	lds	r25, 0x0168
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	89 17       	cp	r24, r25
    13c0:	08 f3       	brcs	.-62     	; 0x1384 <SOS_token_config_param+0x48>
			{
				// do nothing
			}
		}
	}
	return enu_system_status_retVal;
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    13c4:	26 96       	adiw	r28, 0x06	; 6
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <SOS_rearrange_tasks>:
* Desc : SOS_rearrange_tasks to rearrange tasks in the sos module
* Input : void
* Output : void
*/
static void SOS_rearrange_tasks(void)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	00 d0       	rcall	.+0      	; 0x13dc <SOS_rearrange_tasks+0x6>
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
	static st_task_parameters_t st_task_config;
	static uint8_t u8_s_tick_index = 0;
	for(uint8_t i = DATABASE_FIRST_INDEX ; i < u8_gs_max_count_of_tasks ; i++)
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	8a 83       	std	Y+2, r24	; 0x02
    13e4:	9d c1       	rjmp	.+826    	; 0x1720 <SOS_rearrange_tasks+0x34a>
	{
		for(uint8_t j = i+1 ; j < u8_gs_max_count_of_tasks ; j++)
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	8f 5f       	subi	r24, 0xFF	; 255
    13ea:	89 83       	std	Y+1, r24	; 0x01
    13ec:	90 c1       	rjmp	.+800    	; 0x170e <SOS_rearrange_tasks+0x338>
		{
			if ((arr_st_gs_task_parameters[i].u8_task_periority > arr_st_gs_task_parameters[j].u8_task_periority))
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	c9 01       	movw	r24, r18
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	82 0f       	add	r24, r18
    13fc:	93 1f       	adc	r25, r19
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	fc 01       	movw	r30, r24
    1404:	ed 57       	subi	r30, 0x7D	; 125
    1406:	fe 4f       	sbci	r31, 0xFE	; 254
    1408:	40 81       	ld	r20, Z
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	c9 01       	movw	r24, r18
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	82 0f       	add	r24, r18
    1418:	93 1f       	adc	r25, r19
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	fc 01       	movw	r30, r24
    1420:	ed 57       	subi	r30, 0x7D	; 125
    1422:	fe 4f       	sbci	r31, 0xFE	; 254
    1424:	80 81       	ld	r24, Z
    1426:	84 17       	cp	r24, r20
    1428:	08 f0       	brcs	.+2      	; 0x142c <SOS_rearrange_tasks+0x56>
    142a:	6e c1       	rjmp	.+732    	; 0x1708 <SOS_rearrange_tasks+0x332>
			{
				// switch function name (pointer)
				st_task_config.ptr_function_name				= arr_st_gs_task_parameters[i].ptr_function_name;
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	c9 01       	movw	r24, r18
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	82 0f       	add	r24, r18
    143a:	93 1f       	adc	r25, r19
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	fc 01       	movw	r30, r24
    1442:	e0 58       	subi	r30, 0x80	; 128
    1444:	fe 4f       	sbci	r31, 0xFE	; 254
    1446:	80 81       	ld	r24, Z
    1448:	91 81       	ldd	r25, Z+1	; 0x01
    144a:	90 93 6d 05 	sts	0x056D, r25
    144e:	80 93 6c 05 	sts	0x056C, r24
				arr_st_gs_task_parameters[i].ptr_function_name	= arr_st_gs_task_parameters[j].ptr_function_name;
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	48 2f       	mov	r20, r24
    1456:	50 e0       	ldi	r21, 0x00	; 0
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	c9 01       	movw	r24, r18
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	82 0f       	add	r24, r18
    1466:	93 1f       	adc	r25, r19
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	fc 01       	movw	r30, r24
    146e:	e0 58       	subi	r30, 0x80	; 128
    1470:	fe 4f       	sbci	r31, 0xFE	; 254
    1472:	20 81       	ld	r18, Z
    1474:	31 81       	ldd	r19, Z+1	; 0x01
    1476:	ca 01       	movw	r24, r20
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	84 0f       	add	r24, r20
    147e:	95 1f       	adc	r25, r21
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	fc 01       	movw	r30, r24
    1486:	e0 58       	subi	r30, 0x80	; 128
    1488:	fe 4f       	sbci	r31, 0xFE	; 254
    148a:	31 83       	std	Z+1, r19	; 0x01
    148c:	20 83       	st	Z, r18
				arr_st_gs_task_parameters[j].ptr_function_name	= st_task_config.ptr_function_name;
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 91 6c 05 	lds	r20, 0x056C
    1498:	50 91 6d 05 	lds	r21, 0x056D
    149c:	c9 01       	movw	r24, r18
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	82 0f       	add	r24, r18
    14a4:	93 1f       	adc	r25, r19
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	fc 01       	movw	r30, r24
    14ac:	e0 58       	subi	r30, 0x80	; 128
    14ae:	fe 4f       	sbci	r31, 0xFE	; 254
    14b0:	51 83       	std	Z+1, r21	; 0x01
    14b2:	40 83       	st	Z, r20
				st_task_config.ptr_function_name				= NULL;
    14b4:	10 92 6d 05 	sts	0x056D, r1
    14b8:	10 92 6c 05 	sts	0x056C, r1
				
				// switch task tick counter
				u8_s_tick_index			= u16_sos_task_tick[i];
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	88 2f       	mov	r24, r24
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	fc 01       	movw	r30, r24
    14c8:	ef 55       	subi	r30, 0x5F	; 95
    14ca:	fb 4f       	sbci	r31, 0xFB	; 251
    14cc:	80 81       	ld	r24, Z
    14ce:	91 81       	ldd	r25, Z+1	; 0x01
    14d0:	80 93 6b 05 	sts	0x056B, r24
				u16_sos_task_tick[i]	= u16_sos_task_tick[j];
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	48 2f       	mov	r20, r24
    14d8:	50 e0       	ldi	r21, 0x00	; 0
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	88 2f       	mov	r24, r24
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	fc 01       	movw	r30, r24
    14e6:	ef 55       	subi	r30, 0x5F	; 95
    14e8:	fb 4f       	sbci	r31, 0xFB	; 251
    14ea:	20 81       	ld	r18, Z
    14ec:	31 81       	ldd	r19, Z+1	; 0x01
    14ee:	ca 01       	movw	r24, r20
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	fc 01       	movw	r30, r24
    14f6:	ef 55       	subi	r30, 0x5F	; 95
    14f8:	fb 4f       	sbci	r31, 0xFB	; 251
    14fa:	31 83       	std	Z+1, r19	; 0x01
    14fc:	20 83       	st	Z, r18
				u16_sos_task_tick[j]	= u8_s_tick_index;
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	80 91 6b 05 	lds	r24, 0x056B
    1508:	48 2f       	mov	r20, r24
    150a:	50 e0       	ldi	r21, 0x00	; 0
    150c:	c9 01       	movw	r24, r18
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	fc 01       	movw	r30, r24
    1514:	ef 55       	subi	r30, 0x5F	; 95
    1516:	fb 4f       	sbci	r31, 0xFB	; 251
    1518:	51 83       	std	Z+1, r21	; 0x01
    151a:	40 83       	st	Z, r20
				u8_s_tick_index			= NOT_INIT;
    151c:	10 92 6b 05 	sts	0x056B, r1
				
				// switch task period
				st_task_config.u16_task_period					= arr_st_gs_task_parameters[i].u16_task_period;
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	c9 01       	movw	r24, r18
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	82 0f       	add	r24, r18
    152e:	93 1f       	adc	r25, r19
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	fc 01       	movw	r30, r24
    1536:	ec 57       	subi	r30, 0x7C	; 124
    1538:	fe 4f       	sbci	r31, 0xFE	; 254
    153a:	80 81       	ld	r24, Z
    153c:	91 81       	ldd	r25, Z+1	; 0x01
    153e:	90 93 71 05 	sts	0x0571, r25
    1542:	80 93 70 05 	sts	0x0570, r24
				arr_st_gs_task_parameters[i].u16_task_period	= arr_st_gs_task_parameters[j].u16_task_period;
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	48 2f       	mov	r20, r24
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	c9 01       	movw	r24, r18
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	82 0f       	add	r24, r18
    155a:	93 1f       	adc	r25, r19
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	fc 01       	movw	r30, r24
    1562:	ec 57       	subi	r30, 0x7C	; 124
    1564:	fe 4f       	sbci	r31, 0xFE	; 254
    1566:	20 81       	ld	r18, Z
    1568:	31 81       	ldd	r19, Z+1	; 0x01
    156a:	ca 01       	movw	r24, r20
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	84 0f       	add	r24, r20
    1572:	95 1f       	adc	r25, r21
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	fc 01       	movw	r30, r24
    157a:	ec 57       	subi	r30, 0x7C	; 124
    157c:	fe 4f       	sbci	r31, 0xFE	; 254
    157e:	31 83       	std	Z+1, r19	; 0x01
    1580:	20 83       	st	Z, r18
				arr_st_gs_task_parameters[j].u16_task_period	= st_task_config.u16_task_period;
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	40 91 70 05 	lds	r20, 0x0570
    158c:	50 91 71 05 	lds	r21, 0x0571
    1590:	c9 01       	movw	r24, r18
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	82 0f       	add	r24, r18
    1598:	93 1f       	adc	r25, r19
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	fc 01       	movw	r30, r24
    15a0:	ec 57       	subi	r30, 0x7C	; 124
    15a2:	fe 4f       	sbci	r31, 0xFE	; 254
    15a4:	51 83       	std	Z+1, r21	; 0x01
    15a6:	40 83       	st	Z, r20
				st_task_config.u16_task_period					= NOT_INIT;
    15a8:	10 92 71 05 	sts	0x0571, r1
    15ac:	10 92 70 05 	sts	0x0570, r1
				
				// switch task ID
				st_task_config.u8_task_id					= arr_st_gs_task_parameters[i].u8_task_id;
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	c9 01       	movw	r24, r18
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	82 0f       	add	r24, r18
    15be:	93 1f       	adc	r25, r19
    15c0:	01 96       	adiw	r24, 0x01	; 1
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	fc 01       	movw	r30, r24
    15c8:	e0 58       	subi	r30, 0x80	; 128
    15ca:	fe 4f       	sbci	r31, 0xFE	; 254
    15cc:	80 81       	ld	r24, Z
    15ce:	80 93 6e 05 	sts	0x056E, r24
				arr_st_gs_task_parameters[i].u8_task_id		= arr_st_gs_task_parameters[j].u8_task_id;
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	48 2f       	mov	r20, r24
    15d6:	50 e0       	ldi	r21, 0x00	; 0
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	c9 01       	movw	r24, r18
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	82 0f       	add	r24, r18
    15e6:	93 1f       	adc	r25, r19
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	fc 01       	movw	r30, r24
    15f0:	e0 58       	subi	r30, 0x80	; 128
    15f2:	fe 4f       	sbci	r31, 0xFE	; 254
    15f4:	20 81       	ld	r18, Z
    15f6:	ca 01       	movw	r24, r20
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	84 0f       	add	r24, r20
    15fe:	95 1f       	adc	r25, r21
    1600:	01 96       	adiw	r24, 0x01	; 1
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	fc 01       	movw	r30, r24
    1608:	e0 58       	subi	r30, 0x80	; 128
    160a:	fe 4f       	sbci	r31, 0xFE	; 254
    160c:	20 83       	st	Z, r18
				arr_st_gs_task_parameters[j].u8_task_id		= st_task_config.u8_task_id;
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	40 91 6e 05 	lds	r20, 0x056E
    1618:	c9 01       	movw	r24, r18
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	82 0f       	add	r24, r18
    1620:	93 1f       	adc	r25, r19
    1622:	01 96       	adiw	r24, 0x01	; 1
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	fc 01       	movw	r30, r24
    162a:	e0 58       	subi	r30, 0x80	; 128
    162c:	fe 4f       	sbci	r31, 0xFE	; 254
    162e:	40 83       	st	Z, r20
				
				// update task ID index
				u8_gs_arr_index_id[arr_st_gs_task_parameters[i].u8_task_id] = i;
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	c9 01       	movw	r24, r18
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	82 0f       	add	r24, r18
    163e:	93 1f       	adc	r25, r19
    1640:	01 96       	adiw	r24, 0x01	; 1
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	fc 01       	movw	r30, r24
    1648:	e0 58       	subi	r30, 0x80	; 128
    164a:	fe 4f       	sbci	r31, 0xFE	; 254
    164c:	80 81       	ld	r24, Z
    164e:	88 2f       	mov	r24, r24
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	fc 01       	movw	r30, r24
    1654:	e8 52       	subi	r30, 0x28	; 40
    1656:	fc 4f       	sbci	r31, 0xFC	; 252
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	80 83       	st	Z, r24
				u8_gs_arr_index_id[arr_st_gs_task_parameters[j].u8_task_id] = j;
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	c9 01       	movw	r24, r18
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	82 0f       	add	r24, r18
    166a:	93 1f       	adc	r25, r19
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	fc 01       	movw	r30, r24
    1674:	e0 58       	subi	r30, 0x80	; 128
    1676:	fe 4f       	sbci	r31, 0xFE	; 254
    1678:	80 81       	ld	r24, Z
    167a:	88 2f       	mov	r24, r24
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	fc 01       	movw	r30, r24
    1680:	e8 52       	subi	r30, 0x28	; 40
    1682:	fc 4f       	sbci	r31, 0xFC	; 252
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	80 83       	st	Z, r24
				st_task_config.u8_task_id									= NOT_INIT;
    1688:	10 92 6e 05 	sts	0x056E, r1
				
				// switch task priority
				st_task_config.u8_task_periority				= arr_st_gs_task_parameters[i].u8_task_periority;
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	c9 01       	movw	r24, r18
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	82 0f       	add	r24, r18
    169a:	93 1f       	adc	r25, r19
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	fc 01       	movw	r30, r24
    16a2:	ed 57       	subi	r30, 0x7D	; 125
    16a4:	fe 4f       	sbci	r31, 0xFE	; 254
    16a6:	80 81       	ld	r24, Z
    16a8:	80 93 6f 05 	sts	0x056F, r24
				arr_st_gs_task_parameters[i].u8_task_periority	= arr_st_gs_task_parameters[j].u8_task_periority;
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	48 2f       	mov	r20, r24
    16b0:	50 e0       	ldi	r21, 0x00	; 0
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	c9 01       	movw	r24, r18
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	82 0f       	add	r24, r18
    16c0:	93 1f       	adc	r25, r19
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	fc 01       	movw	r30, r24
    16c8:	ed 57       	subi	r30, 0x7D	; 125
    16ca:	fe 4f       	sbci	r31, 0xFE	; 254
    16cc:	20 81       	ld	r18, Z
    16ce:	ca 01       	movw	r24, r20
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	84 0f       	add	r24, r20
    16d6:	95 1f       	adc	r25, r21
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	fc 01       	movw	r30, r24
    16de:	ed 57       	subi	r30, 0x7D	; 125
    16e0:	fe 4f       	sbci	r31, 0xFE	; 254
    16e2:	20 83       	st	Z, r18
				arr_st_gs_task_parameters[j].u8_task_periority	= st_task_config.u8_task_periority;
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	40 91 6f 05 	lds	r20, 0x056F
    16ee:	c9 01       	movw	r24, r18
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	82 0f       	add	r24, r18
    16f6:	93 1f       	adc	r25, r19
    16f8:	88 0f       	add	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	fc 01       	movw	r30, r24
    16fe:	ed 57       	subi	r30, 0x7D	; 125
    1700:	fe 4f       	sbci	r31, 0xFE	; 254
    1702:	40 83       	st	Z, r20
				st_task_config.u8_task_periority				= NOT_INIT;
    1704:	10 92 6f 05 	sts	0x056F, r1
{
	static st_task_parameters_t st_task_config;
	static uint8_t u8_s_tick_index = 0;
	for(uint8_t i = DATABASE_FIRST_INDEX ; i < u8_gs_max_count_of_tasks ; i++)
	{
		for(uint8_t j = i+1 ; j < u8_gs_max_count_of_tasks ; j++)
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	8f 5f       	subi	r24, 0xFF	; 255
    170c:	89 83       	std	Y+1, r24	; 0x01
    170e:	90 91 68 01 	lds	r25, 0x0168
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	89 17       	cp	r24, r25
    1716:	08 f4       	brcc	.+2      	; 0x171a <SOS_rearrange_tasks+0x344>
    1718:	6a ce       	rjmp	.-812    	; 0x13ee <SOS_rearrange_tasks+0x18>
*/
static void SOS_rearrange_tasks(void)
{
	static st_task_parameters_t st_task_config;
	static uint8_t u8_s_tick_index = 0;
	for(uint8_t i = DATABASE_FIRST_INDEX ; i < u8_gs_max_count_of_tasks ; i++)
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	8f 5f       	subi	r24, 0xFF	; 255
    171e:	8a 83       	std	Y+2, r24	; 0x02
    1720:	90 91 68 01 	lds	r25, 0x0168
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	89 17       	cp	r24, r25
    1728:	08 f4       	brcc	.+2      	; 0x172c <SOS_rearrange_tasks+0x356>
    172a:	5d ce       	rjmp	.-838    	; 0x13e6 <SOS_rearrange_tasks+0x10>
				st_task_config.u8_task_periority				= NOT_INIT;
				
			}
		}
	}
}
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	cf 91       	pop	r28
    1732:	df 91       	pop	r29
    1734:	08 95       	ret

00001736 <SOS_tick_cbf>:


void SOS_tick_cbf(void)
{
    1736:	df 93       	push	r29
    1738:	cf 93       	push	r28
    173a:	0f 92       	push	r0
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
	// loop and increment tasks tick counter
	for (uint8_t i = 1 ; i < u8_gs_max_count_of_tasks; i++)
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	35 c0       	rjmp	.+106    	; 0x17b0 <SOS_tick_cbf+0x7a>
	{
		/****************************************************************************************************************/
		/*                       increment to the task period only														*/
		/* to insure tasks will take action and not skipped in the case of the equaled priority in same execution time	*/
		/****************************************************************************************************************/  
		if (u16_sos_task_tick[i] != arr_st_gs_task_parameters[i].u16_task_period)
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	88 2f       	mov	r24, r24
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	fc 01       	movw	r30, r24
    1752:	ef 55       	subi	r30, 0x5F	; 95
    1754:	fb 4f       	sbci	r31, 0xFB	; 251
    1756:	40 81       	ld	r20, Z
    1758:	51 81       	ldd	r21, Z+1	; 0x01
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	c9 01       	movw	r24, r18
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	82 0f       	add	r24, r18
    1768:	93 1f       	adc	r25, r19
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	fc 01       	movw	r30, r24
    1770:	ec 57       	subi	r30, 0x7C	; 124
    1772:	fe 4f       	sbci	r31, 0xFE	; 254
    1774:	80 81       	ld	r24, Z
    1776:	91 81       	ldd	r25, Z+1	; 0x01
    1778:	48 17       	cp	r20, r24
    177a:	59 07       	cpc	r21, r25
    177c:	b1 f0       	breq	.+44     	; 0x17aa <SOS_tick_cbf+0x74>
		{
			u16_sos_task_tick[i]++;
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	c9 01       	movw	r24, r18
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	fc 01       	movw	r30, r24
    178c:	ef 55       	subi	r30, 0x5F	; 95
    178e:	fb 4f       	sbci	r31, 0xFB	; 251
    1790:	80 81       	ld	r24, Z
    1792:	91 81       	ldd	r25, Z+1	; 0x01
    1794:	ac 01       	movw	r20, r24
    1796:	4f 5f       	subi	r20, 0xFF	; 255
    1798:	5f 4f       	sbci	r21, 0xFF	; 255
    179a:	c9 01       	movw	r24, r18
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	fc 01       	movw	r30, r24
    17a2:	ef 55       	subi	r30, 0x5F	; 95
    17a4:	fb 4f       	sbci	r31, 0xFB	; 251
    17a6:	51 83       	std	Z+1, r21	; 0x01
    17a8:	40 83       	st	Z, r20


void SOS_tick_cbf(void)
{
	// loop and increment tasks tick counter
	for (uint8_t i = 1 ; i < u8_gs_max_count_of_tasks; i++)
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	8f 5f       	subi	r24, 0xFF	; 255
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	90 91 68 01 	lds	r25, 0x0168
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	89 17       	cp	r24, r25
    17b8:	30 f2       	brcs	.-116    	; 0x1746 <SOS_tick_cbf+0x10>
		if (u16_sos_task_tick[i] != arr_st_gs_task_parameters[i].u16_task_period)
		{
			u16_sos_task_tick[i]++;
		}
	}
}
    17ba:	0f 90       	pop	r0
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <SOS_change_state>:

void SOS_change_state(uint8_t u8_state)
{
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	0f 92       	push	r0
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	89 83       	std	Y+1, r24	; 0x01
	u8_gs_sos_module_state = u8_state;
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	80 93 a0 04 	sts	0x04A0, r24
}
    17d4:	0f 90       	pop	r0
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	08 95       	ret

000017dc <SOS_disable_ext_interrupt>:

/***********************************************************************************/
/* Desc : save the callback function locally to call it in SOS_run and SOS_disable */
/***********************************************************************************/
void SOS_disable_ext_interrupt(ptr_function_name_t ptr_function_name)
{
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	00 d0       	rcall	.+0      	; 0x17e2 <SOS_disable_ext_interrupt+0x6>
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	9a 83       	std	Y+2, r25	; 0x02
    17e8:	89 83       	std	Y+1, r24	; 0x01
	ptr_function_disable_ext_interrupt = ptr_function_name;
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	9a 81       	ldd	r25, Y+2	; 0x02
    17ee:	90 93 6a 05 	sts	0x056A, r25
    17f2:	80 93 69 05 	sts	0x0569, r24
}
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <EXT_INTERRUPT_MANAGER_init>:
 *  Author: Mahmoud Sarhan
 */ 
#include "ext_interrupt_manager.h"

u8_interruptError_t EXT_INTERRUPT_MANAGER_init(en_ext_interrupt_num_t en_ext_interrupt_num,void(*callback)(void))
{
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	00 d0       	rcall	.+0      	; 0x1806 <EXT_INTERRUPT_MANAGER_init+0x6>
    1806:	00 d0       	rcall	.+0      	; 0x1808 <EXT_INTERRUPT_MANAGER_init+0x8>
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	8a 83       	std	Y+2, r24	; 0x02
    180e:	7c 83       	std	Y+4, r23	; 0x04
    1810:	6b 83       	std	Y+3, r22	; 0x03
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
    1812:	19 82       	std	Y+1, r1	; 0x01
	u8_interruptError_retVal = EXT_INTERRUPT_init(en_ext_interrupt_num);
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <EXT_INTERRUPT_init>
    181a:	89 83       	std	Y+1, r24	; 0x01
	u8_interruptError_retVal = EXT_INTERRUPT_set_callback_init(en_ext_interrupt_num,callback);
    181c:	2b 81       	ldd	r18, Y+3	; 0x03
    181e:	3c 81       	ldd	r19, Y+4	; 0x04
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	b9 01       	movw	r22, r18
    1824:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <EXT_INTERRUPT_set_callback_init>
    1828:	89 83       	std	Y+1, r24	; 0x01
	return u8_interruptError_retVal;
    182a:	89 81       	ldd	r24, Y+1	; 0x01
}
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	08 95       	ret

0000183a <EXT_INTERRUPT_MANAGER_enable>:
u8_interruptError_t EXT_INTERRUPT_MANAGER_enable(en_ext_interrupt_num_t en_ext_interrupt_num)
{
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	00 d0       	rcall	.+0      	; 0x1840 <EXT_INTERRUPT_MANAGER_enable+0x6>
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	8a 83       	std	Y+2, r24	; 0x02
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
    1846:	19 82       	std	Y+1, r1	; 0x01
	u8_interruptError_retVal = EXT_INTERRUPT_enable(en_ext_interrupt_num);
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <EXT_INTERRUPT_enable>
    184e:	89 83       	std	Y+1, r24	; 0x01
	return u8_interruptError_retVal;
    1850:	89 81       	ldd	r24, Y+1	; 0x01
}
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <EXT_INTERRUPT_MANAGER_disable>:
u8_interruptError_t EXT_INTERRUPT_MANAGER_disable(en_ext_interrupt_num_t en_ext_interrupt_num)
{
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	00 d0       	rcall	.+0      	; 0x1862 <EXT_INTERRUPT_MANAGER_disable+0x6>
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	8a 83       	std	Y+2, r24	; 0x02
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
    1868:	19 82       	std	Y+1, r1	; 0x01
	u8_interruptError_retVal = EXT_INTERRUPT_disable(en_ext_interrupt_num);
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <EXT_INTERRUPT_disable>
    1870:	89 83       	std	Y+1, r24	; 0x01
	return u8_interruptError_retVal;
    1872:	89 81       	ldd	r24, Y+1	; 0x01
}
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <TIMER2_enuInit>:

/*************************************************************************************************************
 * 							Function Implementation
 ************************************************************************************************************/
enu_timerStatus_t TIMER2_enuInit (enu_timerMode_t enTimerMode)
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	00 d0       	rcall	.+0      	; 0x1884 <TIMER2_enuInit+0x6>
    1884:	00 d0       	rcall	.+0      	; 0x1886 <TIMER2_enuInit+0x8>
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	8a 83       	std	Y+2, r24	; 0x02
	enu_timerStatus_t errorStatus = TIMER_OK;
    188c:	19 82       	std	Y+1, r1	; 0x01

	if(enTimerMode < TIMER_MODE_INVALID)
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	84 30       	cpi	r24, 0x04	; 4
    1892:	08 f0       	brcs	.+2      	; 0x1896 <TIMER2_enuInit+0x18>
    1894:	61 c0       	rjmp	.+194    	; 0x1958 <TIMER2_enuInit+0xda>
	{
		TCNT2 = 0;
    1896:	e4 e4       	ldi	r30, 0x44	; 68
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	10 82       	st	Z, r1
		switch (enTimerMode)
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	3c 83       	std	Y+4, r19	; 0x04
    18a4:	2b 83       	std	Y+3, r18	; 0x03
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	9c 81       	ldd	r25, Y+4	; 0x04
    18aa:	81 30       	cpi	r24, 0x01	; 1
    18ac:	91 05       	cpc	r25, r1
    18ae:	21 f1       	breq	.+72     	; 0x18f8 <TIMER2_enuInit+0x7a>
    18b0:	2b 81       	ldd	r18, Y+3	; 0x03
    18b2:	3c 81       	ldd	r19, Y+4	; 0x04
    18b4:	22 30       	cpi	r18, 0x02	; 2
    18b6:	31 05       	cpc	r19, r1
    18b8:	2c f4       	brge	.+10     	; 0x18c4 <TIMER2_enuInit+0x46>
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	9c 81       	ldd	r25, Y+4	; 0x04
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	61 f0       	breq	.+24     	; 0x18da <TIMER2_enuInit+0x5c>
    18c2:	47 c0       	rjmp	.+142    	; 0x1952 <TIMER2_enuInit+0xd4>
    18c4:	2b 81       	ldd	r18, Y+3	; 0x03
    18c6:	3c 81       	ldd	r19, Y+4	; 0x04
    18c8:	22 30       	cpi	r18, 0x02	; 2
    18ca:	31 05       	cpc	r19, r1
    18cc:	21 f1       	breq	.+72     	; 0x1916 <TIMER2_enuInit+0x98>
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	9c 81       	ldd	r25, Y+4	; 0x04
    18d2:	83 30       	cpi	r24, 0x03	; 3
    18d4:	91 05       	cpc	r25, r1
    18d6:	71 f1       	breq	.+92     	; 0x1934 <TIMER2_enuInit+0xb6>
    18d8:	3c c0       	rjmp	.+120    	; 0x1952 <TIMER2_enuInit+0xd4>
		{
		case OVF_MODE 				: CLEAR_BIT(TCCR2, WGM01);CLEAR_BIT(TCCR2, WGM00); break;
    18da:	a5 e4       	ldi	r26, 0x45	; 69
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e5 e4       	ldi	r30, 0x45	; 69
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	87 7f       	andi	r24, 0xF7	; 247
    18e6:	8c 93       	st	X, r24
    18e8:	a5 e4       	ldi	r26, 0x45	; 69
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e5 e4       	ldi	r30, 0x45	; 69
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	8f 7b       	andi	r24, 0xBF	; 191
    18f4:	8c 93       	st	X, r24
    18f6:	32 c0       	rjmp	.+100    	; 0x195c <TIMER2_enuInit+0xde>
		case PHASE_CORRECT_PWM_MODE : CLEAR_BIT(TCCR2, WGM01);SET_BIT(TCCR2, WGM00); break;
    18f8:	a5 e4       	ldi	r26, 0x45	; 69
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e5 e4       	ldi	r30, 0x45	; 69
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	87 7f       	andi	r24, 0xF7	; 247
    1904:	8c 93       	st	X, r24
    1906:	a5 e4       	ldi	r26, 0x45	; 69
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	e5 e4       	ldi	r30, 0x45	; 69
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	80 64       	ori	r24, 0x40	; 64
    1912:	8c 93       	st	X, r24
    1914:	23 c0       	rjmp	.+70     	; 0x195c <TIMER2_enuInit+0xde>
		case CTC_MODE 				: SET_BIT(TCCR2, WGM01);CLEAR_BIT(TCCR2, WGM00); break;
    1916:	a5 e4       	ldi	r26, 0x45	; 69
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e5 e4       	ldi	r30, 0x45	; 69
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	88 60       	ori	r24, 0x08	; 8
    1922:	8c 93       	st	X, r24
    1924:	a5 e4       	ldi	r26, 0x45	; 69
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e5 e4       	ldi	r30, 0x45	; 69
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	8f 7b       	andi	r24, 0xBF	; 191
    1930:	8c 93       	st	X, r24
    1932:	14 c0       	rjmp	.+40     	; 0x195c <TIMER2_enuInit+0xde>
		case FAST_PWM_MODE 			: SET_BIT(TCCR2, WGM01);SET_BIT(TCCR2, WGM00); break;
    1934:	a5 e4       	ldi	r26, 0x45	; 69
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	e5 e4       	ldi	r30, 0x45	; 69
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	88 60       	ori	r24, 0x08	; 8
    1940:	8c 93       	st	X, r24
    1942:	a5 e4       	ldi	r26, 0x45	; 69
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e5 e4       	ldi	r30, 0x45	; 69
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	80 64       	ori	r24, 0x40	; 64
    194e:	8c 93       	st	X, r24
    1950:	05 c0       	rjmp	.+10     	; 0x195c <TIMER2_enuInit+0xde>
		default 					: errorStatus = TIMER_NOK; break;
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	89 83       	std	Y+1, r24	; 0x01
    1956:	02 c0       	rjmp	.+4      	; 0x195c <TIMER2_enuInit+0xde>
		}
	}
	else
	{
		errorStatus = TIMER_NOK;
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	89 83       	std	Y+1, r24	; 0x01
	}
	return errorStatus;
    195c:	89 81       	ldd	r24, Y+1	; 0x01
}
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <TIMER2_enuSetPrescallar>:


/*************************************************************************************************************/
enu_timerStatus_t TIMER2_enuSetPrescallar(enu_timerPrescalar_t Copy_enPrescal)
{
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	00 d0       	rcall	.+0      	; 0x1972 <TIMER2_enuSetPrescallar+0x6>
    1972:	0f 92       	push	r0
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	8b 83       	std	Y+3, r24	; 0x03
	enu_timerStatus_t errorStatus = TIMER_OK;
    197a:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t temp_reg;
	if(Copy_enPrescal < TIMER_PRESCALR_INVALID)
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	88 30       	cpi	r24, 0x08	; 8
    1980:	e0 f4       	brcc	.+56     	; 0x19ba <TIMER2_enuSetPrescallar+0x4e>
	{
		gl_enu_prescaller = Copy_enPrescal;
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	80 93 76 05 	sts	0x0576, r24
		if (gl_u8_timerStatus == RUNNING)
    1988:	80 91 77 05 	lds	r24, 0x0577
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	b9 f4       	brne	.+46     	; 0x19be <TIMER2_enuSetPrescallar+0x52>
		{
			temp_reg = TCCR2;		 // read
    1990:	e5 e4       	ldi	r30, 0x45	; 69
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	89 83       	std	Y+1, r24	; 0x01
			temp_reg &= PRESCALLER_CLR_MSK;  // mod
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	88 7f       	andi	r24, 0xF8	; 248
    199c:	89 83       	std	Y+1, r24	; 0x01
			temp_reg |=  gl_enu_prescaller << PRESCALLER_OFFSET; // mod
    199e:	90 91 76 05 	lds	r25, 0x0576
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	89 2b       	or	r24, r25
    19a6:	89 83       	std	Y+1, r24	; 0x01
			TCCR2 |= temp_reg;		// write
    19a8:	a5 e4       	ldi	r26, 0x45	; 69
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e5 e4       	ldi	r30, 0x45	; 69
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	90 81       	ld	r25, Z
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	89 2b       	or	r24, r25
    19b6:	8c 93       	st	X, r24
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <TIMER2_enuSetPrescallar+0x52>
			/* do nothing */
		}
	}
	else
	{
		errorStatus = TIMER_NOK;
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	8a 83       	std	Y+2, r24	; 0x02
	}


	return errorStatus;
    19be:	8a 81       	ldd	r24, Y+2	; 0x02

}
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <TIMER2_enuOVFIrqEnable>:

/*************************************************************************************************************/
enu_timerStatus_t TIMER2_enuOVFIrqEnable(void)
{
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	0f 92       	push	r0
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
	enu_timerStatus_t errorStatus = TIMER_OK;
    19d6:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(TIFR, 6);
    19d8:	a8 e5       	ldi	r26, 0x58	; 88
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e8 e5       	ldi	r30, 0x58	; 88
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	80 64       	ori	r24, 0x40	; 64
    19e4:	8c 93       	st	X, r24
	SET_BIT(TIMSK, TOIE2);
    19e6:	a9 e5       	ldi	r26, 0x59	; 89
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e9 e5       	ldi	r30, 0x59	; 89
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	80 64       	ori	r24, 0x40	; 64
    19f2:	8c 93       	st	X, r24
//	SET_BIT(SREG_REG, 7);

	return errorStatus;
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    19f6:	0f 90       	pop	r0
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <TIMER2_enuOVFIrqDisable>:

/*************************************************************************************************************/
enu_timerStatus_t TIMER2_enuOVFIrqDisable(void)
{
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	0f 92       	push	r0
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
	enu_timerStatus_t errorStatus = TIMER_OK;
    1a08:	19 82       	std	Y+1, r1	; 0x01

	CLEAR_BIT(TIMSK, TOIE2);
    1a0a:	a9 e5       	ldi	r26, 0x59	; 89
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e9 e5       	ldi	r30, 0x59	; 89
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	8f 7b       	andi	r24, 0xBF	; 191
    1a16:	8c 93       	st	X, r24

	return errorStatus;
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a1a:	0f 90       	pop	r0
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <TIMER2_enuStart>:

/*************************************************************************************************************/
enu_timerStatus_t TIMER2_enuStart(void)
{
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	0f 92       	push	r0
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
	enu_timerStatus_t errorStatus = TIMER_OK;
    1a2c:	19 82       	std	Y+1, r1	; 0x01

	TCCR2 |=  gl_enu_prescaller << PRESCALLER_OFFSET;
    1a2e:	a5 e4       	ldi	r26, 0x45	; 69
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	e5 e4       	ldi	r30, 0x45	; 69
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	90 81       	ld	r25, Z
    1a38:	80 91 76 05 	lds	r24, 0x0576
    1a3c:	89 2b       	or	r24, r25
    1a3e:	8c 93       	st	X, r24
	gl_u8_timerStatus  = RUNNING;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	80 93 77 05 	sts	0x0577, r24

	return errorStatus;
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a48:	0f 90       	pop	r0
    1a4a:	cf 91       	pop	r28
    1a4c:	df 91       	pop	r29
    1a4e:	08 95       	ret

00001a50 <TIMER2_vidStop>:

/*************************************************************************************************************/
enu_timerStatus_t TIMER2_vidStop(void)
{
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	0f 92       	push	r0
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
	enu_timerStatus_t errorStatus = TIMER_OK;
    1a5a:	19 82       	std	Y+1, r1	; 0x01

	TCCR2 &=  PRESCALLER_CLR_MSK;
    1a5c:	a5 e4       	ldi	r26, 0x45	; 69
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e5 e4       	ldi	r30, 0x45	; 69
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	88 7f       	andi	r24, 0xF8	; 248
    1a68:	8c 93       	st	X, r24
	gl_u8_timerStatus = STOPPED;
    1a6a:	10 92 77 05 	sts	0x0577, r1

	return errorStatus;
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a70:	0f 90       	pop	r0
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	08 95       	ret

00001a78 <TIMER2_enuSetTime_ms>:
/*************************************************************************************************************/
enu_timerStatus_t TIMER2_enuSetTime_ms(uint8_t u32_time_ms)
{
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	27 97       	sbiw	r28, 0x07	; 7
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	8f 83       	std	Y+7, r24	; 0x07
	enu_timerStatus_t errorStatus = TIMER_OK;
    1a8e:	1e 82       	std	Y+6, r1	; 0x06
	uint8_t desired_ticks;
	float32_t tick_time_ms;
	if( u32_time_ms < MAX_TIM_MS )
	{
		tick_time_ms = ((float32_t)prescaller_map[gl_enu_prescaller]) / ((uint32_t)F_CPU / 1000U)  ;
    1a90:	80 91 76 05 	lds	r24, 0x0576
    1a94:	88 2f       	mov	r24, r24
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	88 0f       	add	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	e5 59       	subi	r30, 0x95	; 149
    1aa0:	fe 4f       	sbci	r31, 0xFE	; 254
    1aa2:	80 81       	ld	r24, Z
    1aa4:	91 81       	ldd	r25, Z+1	; 0x01
    1aa6:	cc 01       	movw	r24, r24
    1aa8:	a0 e0       	ldi	r26, 0x00	; 0
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	bc 01       	movw	r22, r24
    1aae:	cd 01       	movw	r24, r26
    1ab0:	0e 94 ad 03 	call	0x75a	; 0x75a <__floatunsisf>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	bc 01       	movw	r22, r24
    1aba:	cd 01       	movw	r24, r26
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	4a ef       	ldi	r20, 0xFA	; 250
    1ac2:	55 e4       	ldi	r21, 0x45	; 69
    1ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	89 83       	std	Y+1, r24	; 0x01
    1ace:	9a 83       	std	Y+2, r25	; 0x02
    1ad0:	ab 83       	std	Y+3, r26	; 0x03
    1ad2:	bc 83       	std	Y+4, r27	; 0x04
		desired_ticks = u32_time_ms / tick_time_ms;
    1ad4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ad6:	88 2f       	mov	r24, r24
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	aa 27       	eor	r26, r26
    1adc:	97 fd       	sbrc	r25, 7
    1ade:	a0 95       	com	r26
    1ae0:	ba 2f       	mov	r27, r26
    1ae2:	bc 01       	movw	r22, r24
    1ae4:	cd 01       	movw	r24, r26
    1ae6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__floatsisf>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	bc 01       	movw	r22, r24
    1af0:	cd 01       	movw	r24, r26
    1af2:	29 81       	ldd	r18, Y+1	; 0x01
    1af4:	3a 81       	ldd	r19, Y+2	; 0x02
    1af6:	4b 81       	ldd	r20, Y+3	; 0x03
    1af8:	5c 81       	ldd	r21, Y+4	; 0x04
    1afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	bc 01       	movw	r22, r24
    1b04:	cd 01       	movw	r24, r26
    1b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	8d 83       	std	Y+5, r24	; 0x05
		{
			gl_u8_ovf = 1;
		}
		else if(desired_ticks < OVF_TICKS)
		{
			gl_u8_preload = OVF_TICKS - desired_ticks;
    1b10:	8d 81       	ldd	r24, Y+5	; 0x05
    1b12:	81 95       	neg	r24
    1b14:	80 93 73 05 	sts	0x0573, r24
			TCNT2 = gl_u8_preload;
    1b18:	e4 e4       	ldi	r30, 0x44	; 68
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 91 73 05 	lds	r24, 0x0573
    1b20:	80 83       	st	Z, r24
			gl_u8_ovf = 1;
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	80 93 72 05 	sts	0x0572, r24
		{
			errorStatus = TIMER_NOK;
		}


		return errorStatus;
    1b28:	8e 81       	ldd	r24, Y+6	; 0x06
	}
    1b2a:	27 96       	adiw	r28, 0x07	; 7
    1b2c:	0f b6       	in	r0, 0x3f	; 63
    1b2e:	f8 94       	cli
    1b30:	de bf       	out	0x3e, r29	; 62
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	cd bf       	out	0x3d, r28	; 61
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	08 95       	ret

00001b3c <TIMER2_vidSetcbf_OVF>:

/*************************************************************************************************************/
void TIMER2_vidSetcbf_OVF(ptrFunc cbf)
{
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	00 d0       	rcall	.+0      	; 0x1b42 <TIMER2_vidSetcbf_OVF+0x6>
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	9a 83       	std	Y+2, r25	; 0x02
    1b48:	89 83       	std	Y+1, r24	; 0x01
	if (cbf != NULL)
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	31 f0       	breq	.+12     	; 0x1b5e <TIMER2_vidSetcbf_OVF+0x22>
	{
		gl_CallFunc = cbf;
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	9a 81       	ldd	r25, Y+2	; 0x02
    1b56:	90 93 75 05 	sts	0x0575, r25
    1b5a:	80 93 74 05 	sts	0x0574, r24
	}
	return;
}
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <__vector_5>:

/*************************************************************************************************************
 * 							ISR Interrupt Handling
 ************************************************************************************************************/
ISR(TIMER2_OVF)
{
    1b68:	1f 92       	push	r1
    1b6a:	0f 92       	push	r0
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	0f 92       	push	r0
    1b70:	11 24       	eor	r1, r1
    1b72:	2f 93       	push	r18
    1b74:	3f 93       	push	r19
    1b76:	4f 93       	push	r20
    1b78:	5f 93       	push	r21
    1b7a:	6f 93       	push	r22
    1b7c:	7f 93       	push	r23
    1b7e:	8f 93       	push	r24
    1b80:	9f 93       	push	r25
    1b82:	af 93       	push	r26
    1b84:	bf 93       	push	r27
    1b86:	ef 93       	push	r30
    1b88:	ff 93       	push	r31
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
	if (gl_CallFunc != NULL)
    1b92:	80 91 74 05 	lds	r24, 0x0574
    1b96:	90 91 75 05 	lds	r25, 0x0575
    1b9a:	00 97       	sbiw	r24, 0x00	; 0
    1b9c:	51 f0       	breq	.+20     	; 0x1bb2 <__vector_5+0x4a>
	{
		TCNT2 = gl_u8_preload;
    1b9e:	e4 e4       	ldi	r30, 0x44	; 68
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 91 73 05 	lds	r24, 0x0573
    1ba6:	80 83       	st	Z, r24
		gl_CallFunc();
    1ba8:	e0 91 74 05 	lds	r30, 0x0574
    1bac:	f0 91 75 05 	lds	r31, 0x0575
    1bb0:	09 95       	icall
			TCNT2 = gl_u8_preload;
			gl_CallFunc();	
			
		}
	}*/
}
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	ff 91       	pop	r31
    1bb8:	ef 91       	pop	r30
    1bba:	bf 91       	pop	r27
    1bbc:	af 91       	pop	r26
    1bbe:	9f 91       	pop	r25
    1bc0:	8f 91       	pop	r24
    1bc2:	7f 91       	pop	r23
    1bc4:	6f 91       	pop	r22
    1bc6:	5f 91       	pop	r21
    1bc8:	4f 91       	pop	r20
    1bca:	3f 91       	pop	r19
    1bcc:	2f 91       	pop	r18
    1bce:	0f 90       	pop	r0
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	0f 90       	pop	r0
    1bd4:	1f 90       	pop	r1
    1bd6:	18 95       	reti

00001bd8 <EXT_INTERRUPT_init>:
#include "ext_interrupt_private_reg.h"
#include "ext_interrupt.h"

ptr_function_t EXT_INT_callbacks[INVALID_EXT_INT] ={NULL};

u8_interruptError_t EXT_INTERRUPT_init(en_ext_interrupt_num_t en_ext_interrupt_num){
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <EXT_INTERRUPT_init+0x6>
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <EXT_INTERRUPT_init+0x8>
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	8a 83       	std	Y+2, r24	; 0x02
	u8_interruptError_t ret_state = EXT_INT_E_OK;
    1be6:	19 82       	std	Y+1, r1	; 0x01
	
	if(en_ext_interrupt_num < INVALID_EXT_INT){
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	83 30       	cpi	r24, 0x03	; 3
    1bec:	08 f0       	brcs	.+2      	; 0x1bf0 <EXT_INTERRUPT_init+0x18>
    1bee:	5a c0       	rjmp	.+180    	; 0x1ca4 <EXT_INTERRUPT_init+0xcc>
		switch(en_ext_interrupt_num){
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	3c 83       	std	Y+4, r19	; 0x04
    1bf8:	2b 83       	std	Y+3, r18	; 0x03
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfe:	81 30       	cpi	r24, 0x01	; 1
    1c00:	91 05       	cpc	r25, r1
    1c02:	d1 f0       	breq	.+52     	; 0x1c38 <EXT_INTERRUPT_init+0x60>
    1c04:	2b 81       	ldd	r18, Y+3	; 0x03
    1c06:	3c 81       	ldd	r19, Y+4	; 0x04
    1c08:	22 30       	cpi	r18, 0x02	; 2
    1c0a:	31 05       	cpc	r19, r1
    1c0c:	61 f1       	breq	.+88     	; 0x1c66 <EXT_INTERRUPT_init+0x8e>
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	9c 81       	ldd	r25, Y+4	; 0x04
    1c12:	00 97       	sbiw	r24, 0x00	; 0
    1c14:	09 f0       	breq	.+2      	; 0x1c18 <EXT_INTERRUPT_init+0x40>
    1c16:	43 c0       	rjmp	.+134    	; 0x1c9e <EXT_INTERRUPT_init+0xc6>
			case EXT_0:
				sei();	
    1c18:	78 94       	sei
				DIO_init (portd, pin2, STD_INPUT);
    1c1a:	83 e0       	ldi	r24, 0x03	; 3
    1c1c:	62 e0       	ldi	r22, 0x02	; 2
    1c1e:	40 e0       	ldi	r20, 0x00	; 0
    1c20:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <DIO_init>
				MCUCR_ADD |= ( arr_en_gc_edge_detection[EXT_0]<<INT0_MODE_INDEX);
    1c24:	a5 e5       	ldi	r26, 0x55	; 85
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e5 e5       	ldi	r30, 0x55	; 85
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	90 81       	ld	r25, Z
    1c2e:	80 91 79 01 	lds	r24, 0x0179
    1c32:	89 2b       	or	r24, r25
    1c34:	8c 93       	st	X, r24
    1c36:	38 c0       	rjmp	.+112    	; 0x1ca8 <EXT_INTERRUPT_init+0xd0>
				break;
			case EXT_1:
				sei();
    1c38:	78 94       	sei
				DIO_init (portd, pin3, STD_INPUT);
    1c3a:	83 e0       	ldi	r24, 0x03	; 3
    1c3c:	63 e0       	ldi	r22, 0x03	; 3
    1c3e:	40 e0       	ldi	r20, 0x00	; 0
    1c40:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <DIO_init>
				MCUCR_ADD |= ( arr_en_gc_edge_detection[EXT_1]<<INT1_MODE_INDEX);
    1c44:	a5 e5       	ldi	r26, 0x55	; 85
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e5 e5       	ldi	r30, 0x55	; 85
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	28 2f       	mov	r18, r24
    1c50:	80 91 7a 01 	lds	r24, 0x017A
    1c54:	88 2f       	mov	r24, r24
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	82 2b       	or	r24, r18
    1c62:	8c 93       	st	X, r24
    1c64:	21 c0       	rjmp	.+66     	; 0x1ca8 <EXT_INTERRUPT_init+0xd0>
				break;
			case EXT_2:
				sei();
    1c66:	78 94       	sei
				DIO_init (portb, pin2, STD_INPUT);
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	62 e0       	ldi	r22, 0x02	; 2
    1c6c:	40 e0       	ldi	r20, 0x00	; 0
    1c6e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <DIO_init>
				MCUCSR_ADD |= ( arr_en_gc_edge_detection[EXT_2]<<INT2_MODE_INDEX);
    1c72:	a4 e5       	ldi	r26, 0x54	; 84
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e4 e5       	ldi	r30, 0x54	; 84
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	80 91 7b 01 	lds	r24, 0x017B
    1c82:	88 2f       	mov	r24, r24
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	00 24       	eor	r0, r0
    1c88:	96 95       	lsr	r25
    1c8a:	87 95       	ror	r24
    1c8c:	07 94       	ror	r0
    1c8e:	96 95       	lsr	r25
    1c90:	87 95       	ror	r24
    1c92:	07 94       	ror	r0
    1c94:	98 2f       	mov	r25, r24
    1c96:	80 2d       	mov	r24, r0
    1c98:	82 2b       	or	r24, r18
    1c9a:	8c 93       	st	X, r24
    1c9c:	05 c0       	rjmp	.+10     	; 0x1ca8 <EXT_INTERRUPT_init+0xd0>
				break;
			default:
				ret_state = EXT_INT_WRONG_EXT_NUM;
    1c9e:	82 e0       	ldi	r24, 0x02	; 2
    1ca0:	89 83       	std	Y+1, r24	; 0x01
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <EXT_INTERRUPT_init+0xd0>
				break;
		}
	}
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM;
    1ca4:	82 e0       	ldi	r24, 0x02	; 2
    1ca6:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret_state;
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <EXT_INTERRUPT_enable>:
u8_interruptError_t EXT_INTERRUPT_enable(en_ext_interrupt_num_t en_ext_interrupt_num){
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	00 d0       	rcall	.+0      	; 0x1cbe <EXT_INTERRUPT_enable+0x6>
    1cbe:	00 d0       	rcall	.+0      	; 0x1cc0 <EXT_INTERRUPT_enable+0x8>
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	8a 83       	std	Y+2, r24	; 0x02
	u8_interruptError_t ret_state = EXT_INT_E_OK;
    1cc6:	19 82       	std	Y+1, r1	; 0x01
	
	if(en_ext_interrupt_num < INVALID_EXT_INT){
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	83 30       	cpi	r24, 0x03	; 3
    1ccc:	70 f5       	brcc	.+92     	; 0x1d2a <EXT_INTERRUPT_enable+0x72>
		switch(en_ext_interrupt_num){
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	3c 83       	std	Y+4, r19	; 0x04
    1cd6:	2b 83       	std	Y+3, r18	; 0x03
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	9c 81       	ldd	r25, Y+4	; 0x04
    1cdc:	81 30       	cpi	r24, 0x01	; 1
    1cde:	91 05       	cpc	r25, r1
    1ce0:	89 f0       	breq	.+34     	; 0x1d04 <EXT_INTERRUPT_enable+0x4c>
    1ce2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce6:	22 30       	cpi	r18, 0x02	; 2
    1ce8:	31 05       	cpc	r19, r1
    1cea:	a1 f0       	breq	.+40     	; 0x1d14 <EXT_INTERRUPT_enable+0x5c>
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	c1 f4       	brne	.+48     	; 0x1d24 <EXT_INTERRUPT_enable+0x6c>
			case EXT_0:
			SET_BIT(GICR_ADD,INT0_Globle);
    1cf4:	ab e5       	ldi	r26, 0x5B	; 91
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	eb e5       	ldi	r30, 0x5B	; 91
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	80 64       	ori	r24, 0x40	; 64
    1d00:	8c 93       	st	X, r24
    1d02:	15 c0       	rjmp	.+42     	; 0x1d2e <EXT_INTERRUPT_enable+0x76>
			break;
			case EXT_1:
			SET_BIT(GICR_ADD,INT1_Globle);
    1d04:	ab e5       	ldi	r26, 0x5B	; 91
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	eb e5       	ldi	r30, 0x5B	; 91
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	80 68       	ori	r24, 0x80	; 128
    1d10:	8c 93       	st	X, r24
    1d12:	0d c0       	rjmp	.+26     	; 0x1d2e <EXT_INTERRUPT_enable+0x76>
			break;
			case EXT_2:
			SET_BIT(GICR_ADD,INT2_Globle);
    1d14:	ab e5       	ldi	r26, 0x5B	; 91
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	eb e5       	ldi	r30, 0x5B	; 91
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	80 62       	ori	r24, 0x20	; 32
    1d20:	8c 93       	st	X, r24
    1d22:	05 c0       	rjmp	.+10     	; 0x1d2e <EXT_INTERRUPT_enable+0x76>
			break;
			default:
			ret_state = EXT_INT_WRONG_EXT_NUM;
    1d24:	82 e0       	ldi	r24, 0x02	; 2
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <EXT_INTERRUPT_enable+0x76>
			break;
		}
	}
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM;
    1d2a:	82 e0       	ldi	r24, 0x02	; 2
    1d2c:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret_state;
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <EXT_INTERRUPT_disable>:
u8_interruptError_t EXT_INTERRUPT_disable(en_ext_interrupt_num_t en_ext_interrupt_num){
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <EXT_INTERRUPT_disable+0x6>
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <EXT_INTERRUPT_disable+0x8>
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	8a 83       	std	Y+2, r24	; 0x02
	u8_interruptError_t ret_state = EXT_INT_E_OK;
    1d4c:	19 82       	std	Y+1, r1	; 0x01
	
	if(en_ext_interrupt_num < INVALID_EXT_INT){
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	83 30       	cpi	r24, 0x03	; 3
    1d52:	70 f5       	brcc	.+92     	; 0x1db0 <EXT_INTERRUPT_disable+0x72>
		switch(en_ext_interrupt_num){
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	3c 83       	std	Y+4, r19	; 0x04
    1d5c:	2b 83       	std	Y+3, r18	; 0x03
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	9c 81       	ldd	r25, Y+4	; 0x04
    1d62:	81 30       	cpi	r24, 0x01	; 1
    1d64:	91 05       	cpc	r25, r1
    1d66:	89 f0       	breq	.+34     	; 0x1d8a <EXT_INTERRUPT_disable+0x4c>
    1d68:	2b 81       	ldd	r18, Y+3	; 0x03
    1d6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d6c:	22 30       	cpi	r18, 0x02	; 2
    1d6e:	31 05       	cpc	r19, r1
    1d70:	a1 f0       	breq	.+40     	; 0x1d9a <EXT_INTERRUPT_disable+0x5c>
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	9c 81       	ldd	r25, Y+4	; 0x04
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	c1 f4       	brne	.+48     	; 0x1daa <EXT_INTERRUPT_disable+0x6c>
			case EXT_0:
			CLEAR_BIT(GICR_ADD,INT0_Globle);
    1d7a:	ab e5       	ldi	r26, 0x5B	; 91
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	eb e5       	ldi	r30, 0x5B	; 91
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	8f 7b       	andi	r24, 0xBF	; 191
    1d86:	8c 93       	st	X, r24
    1d88:	15 c0       	rjmp	.+42     	; 0x1db4 <EXT_INTERRUPT_disable+0x76>
			break;
			case EXT_1:
			CLEAR_BIT(GICR_ADD,INT1_Globle);
    1d8a:	ab e5       	ldi	r26, 0x5B	; 91
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	eb e5       	ldi	r30, 0x5B	; 91
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	8f 77       	andi	r24, 0x7F	; 127
    1d96:	8c 93       	st	X, r24
    1d98:	0d c0       	rjmp	.+26     	; 0x1db4 <EXT_INTERRUPT_disable+0x76>
			break;
			case EXT_2:
			CLEAR_BIT(GICR_ADD,INT2_Globle);
    1d9a:	ab e5       	ldi	r26, 0x5B	; 91
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	eb e5       	ldi	r30, 0x5B	; 91
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	8f 7d       	andi	r24, 0xDF	; 223
    1da6:	8c 93       	st	X, r24
    1da8:	05 c0       	rjmp	.+10     	; 0x1db4 <EXT_INTERRUPT_disable+0x76>
			break;
			default:
			ret_state = EXT_INT_WRONG_EXT_NUM;
    1daa:	82 e0       	ldi	r24, 0x02	; 2
    1dac:	89 83       	std	Y+1, r24	; 0x01
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <EXT_INTERRUPT_disable+0x76>
			break;
		}
	}
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM;
    1db0:	82 e0       	ldi	r24, 0x02	; 2
    1db2:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret_state;
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	cf 91       	pop	r28
    1dc0:	df 91       	pop	r29
    1dc2:	08 95       	ret

00001dc4 <EXT_INTERRUPT_set_callback_init>:
u8_interruptError_t EXT_INTERRUPT_set_callback_init(en_ext_interrupt_num_t en_ext_interrupt_num ,void(*callback)(void)){
    1dc4:	df 93       	push	r29
    1dc6:	cf 93       	push	r28
    1dc8:	00 d0       	rcall	.+0      	; 0x1dca <EXT_INTERRUPT_set_callback_init+0x6>
    1dca:	00 d0       	rcall	.+0      	; 0x1dcc <EXT_INTERRUPT_set_callback_init+0x8>
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62
    1dd0:	8a 83       	std	Y+2, r24	; 0x02
    1dd2:	7c 83       	std	Y+4, r23	; 0x04
    1dd4:	6b 83       	std	Y+3, r22	; 0x03
	u8_interruptError_t ret_state = EXT_INT_E_OK;
    1dd6:	19 82       	std	Y+1, r1	; 0x01
	
	if(en_ext_interrupt_num < INVALID_EXT_INT){
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	83 30       	cpi	r24, 0x03	; 3
    1ddc:	a0 f4       	brcc	.+40     	; 0x1e06 <EXT_INTERRUPT_set_callback_init+0x42>
		if(callback != NULL){
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	9c 81       	ldd	r25, Y+4	; 0x04
    1de2:	00 97       	sbiw	r24, 0x00	; 0
    1de4:	69 f0       	breq	.+26     	; 0x1e00 <EXT_INTERRUPT_set_callback_init+0x3c>
			EXT_INT_callbacks[en_ext_interrupt_num] = callback;
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	88 2f       	mov	r24, r24
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	fc 01       	movw	r30, r24
    1df2:	e8 58       	subi	r30, 0x88	; 136
    1df4:	fa 4f       	sbci	r31, 0xFA	; 250
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfa:	91 83       	std	Z+1, r25	; 0x01
    1dfc:	80 83       	st	Z, r24
    1dfe:	05 c0       	rjmp	.+10     	; 0x1e0a <EXT_INTERRUPT_set_callback_init+0x46>
		}
		else{
			ret_state = EXT_INT_NULL_PTR;
    1e00:	83 e0       	ldi	r24, 0x03	; 3
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <EXT_INTERRUPT_set_callback_init+0x46>
		}
		
	}
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM;
    1e06:	82 e0       	ldi	r24, 0x02	; 2
    1e08:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret_state;
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	08 95       	ret

00001e1a <__vector_1>:


ISR(EXT_INT0){
    1e1a:	1f 92       	push	r1
    1e1c:	0f 92       	push	r0
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	0f 92       	push	r0
    1e22:	11 24       	eor	r1, r1
    1e24:	2f 93       	push	r18
    1e26:	3f 93       	push	r19
    1e28:	4f 93       	push	r20
    1e2a:	5f 93       	push	r21
    1e2c:	6f 93       	push	r22
    1e2e:	7f 93       	push	r23
    1e30:	8f 93       	push	r24
    1e32:	9f 93       	push	r25
    1e34:	af 93       	push	r26
    1e36:	bf 93       	push	r27
    1e38:	ef 93       	push	r30
    1e3a:	ff 93       	push	r31
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
	if(EXT_INT_callbacks[EXT_0] != NULL){
    1e44:	80 91 78 05 	lds	r24, 0x0578
    1e48:	90 91 79 05 	lds	r25, 0x0579
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	29 f0       	breq	.+10     	; 0x1e5a <__vector_1+0x40>
		(*EXT_INT_callbacks[EXT_0])();
    1e50:	e0 91 78 05 	lds	r30, 0x0578
    1e54:	f0 91 79 05 	lds	r31, 0x0579
    1e58:	09 95       	icall
	else{
		return;
	}
	
	
}
    1e5a:	cf 91       	pop	r28
    1e5c:	df 91       	pop	r29
    1e5e:	ff 91       	pop	r31
    1e60:	ef 91       	pop	r30
    1e62:	bf 91       	pop	r27
    1e64:	af 91       	pop	r26
    1e66:	9f 91       	pop	r25
    1e68:	8f 91       	pop	r24
    1e6a:	7f 91       	pop	r23
    1e6c:	6f 91       	pop	r22
    1e6e:	5f 91       	pop	r21
    1e70:	4f 91       	pop	r20
    1e72:	3f 91       	pop	r19
    1e74:	2f 91       	pop	r18
    1e76:	0f 90       	pop	r0
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	0f 90       	pop	r0
    1e7c:	1f 90       	pop	r1
    1e7e:	18 95       	reti

00001e80 <__vector_2>:
ISR(EXT_INT1){
    1e80:	1f 92       	push	r1
    1e82:	0f 92       	push	r0
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	0f 92       	push	r0
    1e88:	11 24       	eor	r1, r1
    1e8a:	2f 93       	push	r18
    1e8c:	3f 93       	push	r19
    1e8e:	4f 93       	push	r20
    1e90:	5f 93       	push	r21
    1e92:	6f 93       	push	r22
    1e94:	7f 93       	push	r23
    1e96:	8f 93       	push	r24
    1e98:	9f 93       	push	r25
    1e9a:	af 93       	push	r26
    1e9c:	bf 93       	push	r27
    1e9e:	ef 93       	push	r30
    1ea0:	ff 93       	push	r31
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
	
	
	if(EXT_INT_callbacks[EXT_1] != NULL){
    1eaa:	80 91 7a 05 	lds	r24, 0x057A
    1eae:	90 91 7b 05 	lds	r25, 0x057B
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	29 f0       	breq	.+10     	; 0x1ec0 <__vector_2+0x40>
		(*EXT_INT_callbacks[EXT_1])();
    1eb6:	e0 91 7a 05 	lds	r30, 0x057A
    1eba:	f0 91 7b 05 	lds	r31, 0x057B
    1ebe:	09 95       	icall
	else{
		return;
	}
	
	
}
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	ff 91       	pop	r31
    1ec6:	ef 91       	pop	r30
    1ec8:	bf 91       	pop	r27
    1eca:	af 91       	pop	r26
    1ecc:	9f 91       	pop	r25
    1ece:	8f 91       	pop	r24
    1ed0:	7f 91       	pop	r23
    1ed2:	6f 91       	pop	r22
    1ed4:	5f 91       	pop	r21
    1ed6:	4f 91       	pop	r20
    1ed8:	3f 91       	pop	r19
    1eda:	2f 91       	pop	r18
    1edc:	0f 90       	pop	r0
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	0f 90       	pop	r0
    1ee2:	1f 90       	pop	r1
    1ee4:	18 95       	reti

00001ee6 <__vector_3>:
ISR(EXT_INT2){
    1ee6:	1f 92       	push	r1
    1ee8:	0f 92       	push	r0
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	0f 92       	push	r0
    1eee:	11 24       	eor	r1, r1
    1ef0:	2f 93       	push	r18
    1ef2:	3f 93       	push	r19
    1ef4:	4f 93       	push	r20
    1ef6:	5f 93       	push	r21
    1ef8:	6f 93       	push	r22
    1efa:	7f 93       	push	r23
    1efc:	8f 93       	push	r24
    1efe:	9f 93       	push	r25
    1f00:	af 93       	push	r26
    1f02:	bf 93       	push	r27
    1f04:	ef 93       	push	r30
    1f06:	ff 93       	push	r31
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
	
	if(EXT_INT_callbacks[EXT_2] != NULL){
    1f10:	80 91 7c 05 	lds	r24, 0x057C
    1f14:	90 91 7d 05 	lds	r25, 0x057D
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	29 f0       	breq	.+10     	; 0x1f26 <__vector_3+0x40>
		(*EXT_INT_callbacks[EXT_2])();
    1f1c:	e0 91 7c 05 	lds	r30, 0x057C
    1f20:	f0 91 7d 05 	lds	r31, 0x057D
    1f24:	09 95       	icall
	}
	else{
		return;
	}
	
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	ff 91       	pop	r31
    1f2c:	ef 91       	pop	r30
    1f2e:	bf 91       	pop	r27
    1f30:	af 91       	pop	r26
    1f32:	9f 91       	pop	r25
    1f34:	8f 91       	pop	r24
    1f36:	7f 91       	pop	r23
    1f38:	6f 91       	pop	r22
    1f3a:	5f 91       	pop	r21
    1f3c:	4f 91       	pop	r20
    1f3e:	3f 91       	pop	r19
    1f40:	2f 91       	pop	r18
    1f42:	0f 90       	pop	r0
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	0f 90       	pop	r0
    1f48:	1f 90       	pop	r1
    1f4a:	18 95       	reti

00001f4c <DIO_init>:
	@param port The port to which the pin belongs (porta, portb, portc, or portd).
	@param pin The pin number to be initialized.
	@param dir The direction of the pin (STD_INPUT or STD_OUTPUT).
	@return DIO_E_OK if the initialization is successful, otherwise DIO_InvalidPort.
*/
u8_dioErrors_t DIO_init (en_dioPorts_t port, en_dioPins_t pin, u8_dioDir_t dir){
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	2e 97       	sbiw	r28, 0x0e	; 14
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	89 83       	std	Y+1, r24	; 0x01
    1f62:	6a 83       	std	Y+2, r22	; 0x02
    1f64:	4b 83       	std	Y+3, r20	; 0x03
	switch(port){
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	28 2f       	mov	r18, r24
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	3e 87       	std	Y+14, r19	; 0x0e
    1f6e:	2d 87       	std	Y+13, r18	; 0x0d
    1f70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f74:	81 30       	cpi	r24, 0x01	; 1
    1f76:	91 05       	cpc	r25, r1
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <DIO_init+0x30>
    1f7a:	44 c0       	rjmp	.+136    	; 0x2004 <DIO_init+0xb8>
    1f7c:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f7e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1f80:	22 30       	cpi	r18, 0x02	; 2
    1f82:	31 05       	cpc	r19, r1
    1f84:	2c f4       	brge	.+10     	; 0x1f90 <DIO_init+0x44>
    1f86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	71 f0       	breq	.+28     	; 0x1faa <DIO_init+0x5e>
    1f8e:	c3 c0       	rjmp	.+390    	; 0x2116 <DIO_init+0x1ca>
    1f90:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f92:	3e 85       	ldd	r19, Y+14	; 0x0e
    1f94:	22 30       	cpi	r18, 0x02	; 2
    1f96:	31 05       	cpc	r19, r1
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <DIO_init+0x50>
    1f9a:	62 c0       	rjmp	.+196    	; 0x2060 <DIO_init+0x114>
    1f9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa0:	83 30       	cpi	r24, 0x03	; 3
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	09 f4       	brne	.+2      	; 0x1fa8 <DIO_init+0x5c>
    1fa6:	89 c0       	rjmp	.+274    	; 0x20ba <DIO_init+0x16e>
    1fa8:	b6 c0       	rjmp	.+364    	; 0x2116 <DIO_init+0x1ca>
		case porta:
		(dir == STD_INPUT) ? CLEAR_BIT(DATA_DIRECTION_PORTA,pin) :SET_BIT(DATA_DIRECTION_PORTA,pin);
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	88 23       	and	r24, r24
    1fae:	b1 f4       	brne	.+44     	; 0x1fdc <DIO_init+0x90>
    1fb0:	aa e3       	ldi	r26, 0x3A	; 58
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	ea e3       	ldi	r30, 0x3A	; 58
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	48 2f       	mov	r20, r24
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	02 2e       	mov	r0, r18
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <DIO_init+0x82>
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	0a 94       	dec	r0
    1fd0:	e2 f7       	brpl	.-8      	; 0x1fca <DIO_init+0x7e>
    1fd2:	80 95       	com	r24
    1fd4:	84 23       	and	r24, r20
    1fd6:	8c 93       	st	X, r24
    1fd8:	9c 91       	ld	r25, X
    1fda:	a0 c0       	rjmp	.+320    	; 0x211c <DIO_init+0x1d0>
    1fdc:	aa e3       	ldi	r26, 0x3A	; 58
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	ea e3       	ldi	r30, 0x3A	; 58
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	48 2f       	mov	r20, r24
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <DIO_init+0xac>
    1ff4:	88 0f       	add	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	2a 95       	dec	r18
    1ffa:	e2 f7       	brpl	.-8      	; 0x1ff4 <DIO_init+0xa8>
    1ffc:	84 2b       	or	r24, r20
    1ffe:	8c 93       	st	X, r24
    2000:	2c 91       	ld	r18, X
    2002:	8c c0       	rjmp	.+280    	; 0x211c <DIO_init+0x1d0>
		break;
		case portb:
		(dir == STD_INPUT) ? CLEAR_BIT(DATA_DIRECTION_PORTB,pin) :SET_BIT(DATA_DIRECTION_PORTB,pin);
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	88 23       	and	r24, r24
    2008:	b1 f4       	brne	.+44     	; 0x2036 <DIO_init+0xea>
    200a:	a7 e3       	ldi	r26, 0x37	; 55
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	e7 e3       	ldi	r30, 0x37	; 55
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	48 2f       	mov	r20, r24
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
    2018:	28 2f       	mov	r18, r24
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	02 2e       	mov	r0, r18
    2022:	02 c0       	rjmp	.+4      	; 0x2028 <DIO_init+0xdc>
    2024:	88 0f       	add	r24, r24
    2026:	99 1f       	adc	r25, r25
    2028:	0a 94       	dec	r0
    202a:	e2 f7       	brpl	.-8      	; 0x2024 <DIO_init+0xd8>
    202c:	80 95       	com	r24
    202e:	84 23       	and	r24, r20
    2030:	8c 93       	st	X, r24
    2032:	3c 91       	ld	r19, X
    2034:	73 c0       	rjmp	.+230    	; 0x211c <DIO_init+0x1d0>
    2036:	a7 e3       	ldi	r26, 0x37	; 55
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	e7 e3       	ldi	r30, 0x37	; 55
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	48 2f       	mov	r20, r24
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	28 2f       	mov	r18, r24
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	02 2e       	mov	r0, r18
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <DIO_init+0x108>
    2050:	88 0f       	add	r24, r24
    2052:	99 1f       	adc	r25, r25
    2054:	0a 94       	dec	r0
    2056:	e2 f7       	brpl	.-8      	; 0x2050 <DIO_init+0x104>
    2058:	84 2b       	or	r24, r20
    205a:	8c 93       	st	X, r24
    205c:	8c 91       	ld	r24, X
    205e:	5e c0       	rjmp	.+188    	; 0x211c <DIO_init+0x1d0>
		break;
		case portc:
		(dir == STD_INPUT) ? CLEAR_BIT(DATA_DIRECTION_PORTC,pin) :SET_BIT(DATA_DIRECTION_PORTC,pin);
    2060:	8b 81       	ldd	r24, Y+3	; 0x03
    2062:	88 23       	and	r24, r24
    2064:	b1 f4       	brne	.+44     	; 0x2092 <DIO_init+0x146>
    2066:	a4 e3       	ldi	r26, 0x34	; 52
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	e4 e3       	ldi	r30, 0x34	; 52
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	48 2f       	mov	r20, r24
    2072:	8a 81       	ldd	r24, Y+2	; 0x02
    2074:	28 2f       	mov	r18, r24
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	02 2e       	mov	r0, r18
    207e:	02 c0       	rjmp	.+4      	; 0x2084 <DIO_init+0x138>
    2080:	88 0f       	add	r24, r24
    2082:	99 1f       	adc	r25, r25
    2084:	0a 94       	dec	r0
    2086:	e2 f7       	brpl	.-8      	; 0x2080 <DIO_init+0x134>
    2088:	80 95       	com	r24
    208a:	84 23       	and	r24, r20
    208c:	8c 93       	st	X, r24
    208e:	9c 91       	ld	r25, X
    2090:	45 c0       	rjmp	.+138    	; 0x211c <DIO_init+0x1d0>
    2092:	a4 e3       	ldi	r26, 0x34	; 52
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	e4 e3       	ldi	r30, 0x34	; 52
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	48 2f       	mov	r20, r24
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	02 c0       	rjmp	.+4      	; 0x20ae <DIO_init+0x162>
    20aa:	88 0f       	add	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	2a 95       	dec	r18
    20b0:	e2 f7       	brpl	.-8      	; 0x20aa <DIO_init+0x15e>
    20b2:	84 2b       	or	r24, r20
    20b4:	8c 93       	st	X, r24
    20b6:	2c 91       	ld	r18, X
    20b8:	31 c0       	rjmp	.+98     	; 0x211c <DIO_init+0x1d0>
		break;
		case portd:
		(dir == STD_INPUT) ? CLEAR_BIT(DATA_DIRECTION_PORTD,pin) :SET_BIT(DATA_DIRECTION_PORTD,pin);
    20ba:	8b 81       	ldd	r24, Y+3	; 0x03
    20bc:	88 23       	and	r24, r24
    20be:	b1 f4       	brne	.+44     	; 0x20ec <DIO_init+0x1a0>
    20c0:	a1 e3       	ldi	r26, 0x31	; 49
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e1 e3       	ldi	r30, 0x31	; 49
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	48 2f       	mov	r20, r24
    20cc:	8a 81       	ldd	r24, Y+2	; 0x02
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	02 2e       	mov	r0, r18
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <DIO_init+0x192>
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	0a 94       	dec	r0
    20e0:	e2 f7       	brpl	.-8      	; 0x20da <DIO_init+0x18e>
    20e2:	80 95       	com	r24
    20e4:	84 23       	and	r24, r20
    20e6:	8c 93       	st	X, r24
    20e8:	3c 91       	ld	r19, X
    20ea:	18 c0       	rjmp	.+48     	; 0x211c <DIO_init+0x1d0>
    20ec:	a1 e3       	ldi	r26, 0x31	; 49
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	e1 e3       	ldi	r30, 0x31	; 49
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	48 2f       	mov	r20, r24
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	28 2f       	mov	r18, r24
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	02 2e       	mov	r0, r18
    2104:	02 c0       	rjmp	.+4      	; 0x210a <DIO_init+0x1be>
    2106:	88 0f       	add	r24, r24
    2108:	99 1f       	adc	r25, r25
    210a:	0a 94       	dec	r0
    210c:	e2 f7       	brpl	.-8      	; 0x2106 <DIO_init+0x1ba>
    210e:	84 2b       	or	r24, r20
    2110:	8c 93       	st	X, r24
    2112:	8c 91       	ld	r24, X
    2114:	03 c0       	rjmp	.+6      	; 0x211c <DIO_init+0x1d0>
		break;
		default:
		return DIO_InvalidPort;
    2116:	92 e0       	ldi	r25, 0x02	; 2
    2118:	9c 83       	std	Y+4, r25	; 0x04
    211a:	01 c0       	rjmp	.+2      	; 0x211e <DIO_init+0x1d2>
		break;
	}
	return DIO_E_OK;
    211c:	1c 82       	std	Y+4, r1	; 0x04
    211e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2120:	2e 96       	adiw	r28, 0x0e	; 14
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	de bf       	out	0x3e, r29	; 62
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	cd bf       	out	0x3d, r28	; 61
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <DIO_writePIN>:
	@param port The port to which the pin belongs (porta, portb, portc, or portd).
	@param pin The pin number to be written.
	@param state The state to be written to the pin (STD_HIGH or STD_LOW).
	@return DIO_E_OK if the write operation is successful, otherwise DIO_InvalidPort.
*/
u8_dioErrors_t DIO_writePIN (en_dioPorts_t port, en_dioPins_t pin, u8_dioLevel_t state){
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	2e 97       	sbiw	r28, 0x0e	; 14
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	f8 94       	cli
    2140:	de bf       	out	0x3e, r29	; 62
    2142:	0f be       	out	0x3f, r0	; 63
    2144:	cd bf       	out	0x3d, r28	; 61
    2146:	89 83       	std	Y+1, r24	; 0x01
    2148:	6a 83       	std	Y+2, r22	; 0x02
    214a:	4b 83       	std	Y+3, r20	; 0x03
		switch(port){
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	28 2f       	mov	r18, r24
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	3e 87       	std	Y+14, r19	; 0x0e
    2154:	2d 87       	std	Y+13, r18	; 0x0d
    2156:	8d 85       	ldd	r24, Y+13	; 0x0d
    2158:	9e 85       	ldd	r25, Y+14	; 0x0e
    215a:	81 30       	cpi	r24, 0x01	; 1
    215c:	91 05       	cpc	r25, r1
    215e:	09 f4       	brne	.+2      	; 0x2162 <DIO_writePIN+0x30>
    2160:	44 c0       	rjmp	.+136    	; 0x21ea <DIO_writePIN+0xb8>
    2162:	2d 85       	ldd	r18, Y+13	; 0x0d
    2164:	3e 85       	ldd	r19, Y+14	; 0x0e
    2166:	22 30       	cpi	r18, 0x02	; 2
    2168:	31 05       	cpc	r19, r1
    216a:	2c f4       	brge	.+10     	; 0x2176 <DIO_writePIN+0x44>
    216c:	8d 85       	ldd	r24, Y+13	; 0x0d
    216e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2170:	00 97       	sbiw	r24, 0x00	; 0
    2172:	71 f0       	breq	.+28     	; 0x2190 <DIO_writePIN+0x5e>
    2174:	c3 c0       	rjmp	.+390    	; 0x22fc <DIO_writePIN+0x1ca>
    2176:	2d 85       	ldd	r18, Y+13	; 0x0d
    2178:	3e 85       	ldd	r19, Y+14	; 0x0e
    217a:	22 30       	cpi	r18, 0x02	; 2
    217c:	31 05       	cpc	r19, r1
    217e:	09 f4       	brne	.+2      	; 0x2182 <DIO_writePIN+0x50>
    2180:	62 c0       	rjmp	.+196    	; 0x2246 <DIO_writePIN+0x114>
    2182:	8d 85       	ldd	r24, Y+13	; 0x0d
    2184:	9e 85       	ldd	r25, Y+14	; 0x0e
    2186:	83 30       	cpi	r24, 0x03	; 3
    2188:	91 05       	cpc	r25, r1
    218a:	09 f4       	brne	.+2      	; 0x218e <DIO_writePIN+0x5c>
    218c:	89 c0       	rjmp	.+274    	; 0x22a0 <DIO_writePIN+0x16e>
    218e:	b6 c0       	rjmp	.+364    	; 0x22fc <DIO_writePIN+0x1ca>
			case porta:
			(state == STD_LOW) ? CLEAR_BIT(WR_PORT_A,pin) :SET_BIT(WR_PORT_A,pin);
    2190:	8b 81       	ldd	r24, Y+3	; 0x03
    2192:	88 23       	and	r24, r24
    2194:	b1 f4       	brne	.+44     	; 0x21c2 <DIO_writePIN+0x90>
    2196:	ab e3       	ldi	r26, 0x3B	; 59
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	eb e3       	ldi	r30, 0x3B	; 59
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	48 2f       	mov	r20, r24
    21a2:	8a 81       	ldd	r24, Y+2	; 0x02
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	02 2e       	mov	r0, r18
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <DIO_writePIN+0x82>
    21b0:	88 0f       	add	r24, r24
    21b2:	99 1f       	adc	r25, r25
    21b4:	0a 94       	dec	r0
    21b6:	e2 f7       	brpl	.-8      	; 0x21b0 <DIO_writePIN+0x7e>
    21b8:	80 95       	com	r24
    21ba:	84 23       	and	r24, r20
    21bc:	8c 93       	st	X, r24
    21be:	9c 91       	ld	r25, X
    21c0:	a0 c0       	rjmp	.+320    	; 0x2302 <DIO_writePIN+0x1d0>
    21c2:	ab e3       	ldi	r26, 0x3B	; 59
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	eb e3       	ldi	r30, 0x3B	; 59
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	48 2f       	mov	r20, r24
    21ce:	8a 81       	ldd	r24, Y+2	; 0x02
    21d0:	28 2f       	mov	r18, r24
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <DIO_writePIN+0xac>
    21da:	88 0f       	add	r24, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	2a 95       	dec	r18
    21e0:	e2 f7       	brpl	.-8      	; 0x21da <DIO_writePIN+0xa8>
    21e2:	84 2b       	or	r24, r20
    21e4:	8c 93       	st	X, r24
    21e6:	2c 91       	ld	r18, X
    21e8:	8c c0       	rjmp	.+280    	; 0x2302 <DIO_writePIN+0x1d0>
			break;
			case portb:
			(state == STD_LOW) ? CLEAR_BIT(WR_PORT_B,pin) :SET_BIT(WR_PORT_B,pin);
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	88 23       	and	r24, r24
    21ee:	b1 f4       	brne	.+44     	; 0x221c <DIO_writePIN+0xea>
    21f0:	a8 e3       	ldi	r26, 0x38	; 56
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	e8 e3       	ldi	r30, 0x38	; 56
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	48 2f       	mov	r20, r24
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	02 2e       	mov	r0, r18
    2208:	02 c0       	rjmp	.+4      	; 0x220e <DIO_writePIN+0xdc>
    220a:	88 0f       	add	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	0a 94       	dec	r0
    2210:	e2 f7       	brpl	.-8      	; 0x220a <DIO_writePIN+0xd8>
    2212:	80 95       	com	r24
    2214:	84 23       	and	r24, r20
    2216:	8c 93       	st	X, r24
    2218:	3c 91       	ld	r19, X
    221a:	73 c0       	rjmp	.+230    	; 0x2302 <DIO_writePIN+0x1d0>
    221c:	a8 e3       	ldi	r26, 0x38	; 56
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	e8 e3       	ldi	r30, 0x38	; 56
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	48 2f       	mov	r20, r24
    2228:	8a 81       	ldd	r24, Y+2	; 0x02
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	02 2e       	mov	r0, r18
    2234:	02 c0       	rjmp	.+4      	; 0x223a <DIO_writePIN+0x108>
    2236:	88 0f       	add	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	0a 94       	dec	r0
    223c:	e2 f7       	brpl	.-8      	; 0x2236 <DIO_writePIN+0x104>
    223e:	84 2b       	or	r24, r20
    2240:	8c 93       	st	X, r24
    2242:	8c 91       	ld	r24, X
    2244:	5e c0       	rjmp	.+188    	; 0x2302 <DIO_writePIN+0x1d0>
			break;
			case portc:
			(state == STD_LOW) ? CLEAR_BIT(WR_PORT_C,pin) :SET_BIT(WR_PORT_C,pin);
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	88 23       	and	r24, r24
    224a:	b1 f4       	brne	.+44     	; 0x2278 <DIO_writePIN+0x146>
    224c:	a5 e3       	ldi	r26, 0x35	; 53
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	e5 e3       	ldi	r30, 0x35	; 53
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	48 2f       	mov	r20, r24
    2258:	8a 81       	ldd	r24, Y+2	; 0x02
    225a:	28 2f       	mov	r18, r24
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	02 2e       	mov	r0, r18
    2264:	02 c0       	rjmp	.+4      	; 0x226a <DIO_writePIN+0x138>
    2266:	88 0f       	add	r24, r24
    2268:	99 1f       	adc	r25, r25
    226a:	0a 94       	dec	r0
    226c:	e2 f7       	brpl	.-8      	; 0x2266 <DIO_writePIN+0x134>
    226e:	80 95       	com	r24
    2270:	84 23       	and	r24, r20
    2272:	8c 93       	st	X, r24
    2274:	9c 91       	ld	r25, X
    2276:	45 c0       	rjmp	.+138    	; 0x2302 <DIO_writePIN+0x1d0>
    2278:	a5 e3       	ldi	r26, 0x35	; 53
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	e5 e3       	ldi	r30, 0x35	; 53
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	48 2f       	mov	r20, r24
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	28 2f       	mov	r18, r24
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	02 c0       	rjmp	.+4      	; 0x2294 <DIO_writePIN+0x162>
    2290:	88 0f       	add	r24, r24
    2292:	99 1f       	adc	r25, r25
    2294:	2a 95       	dec	r18
    2296:	e2 f7       	brpl	.-8      	; 0x2290 <DIO_writePIN+0x15e>
    2298:	84 2b       	or	r24, r20
    229a:	8c 93       	st	X, r24
    229c:	2c 91       	ld	r18, X
    229e:	31 c0       	rjmp	.+98     	; 0x2302 <DIO_writePIN+0x1d0>
			break;
			case portd:
			(state == STD_LOW) ? CLEAR_BIT(WR_PORT_D,pin) :SET_BIT(WR_PORT_D,pin);
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	88 23       	and	r24, r24
    22a4:	b1 f4       	brne	.+44     	; 0x22d2 <DIO_writePIN+0x1a0>
    22a6:	a2 e3       	ldi	r26, 0x32	; 50
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	e2 e3       	ldi	r30, 0x32	; 50
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	48 2f       	mov	r20, r24
    22b2:	8a 81       	ldd	r24, Y+2	; 0x02
    22b4:	28 2f       	mov	r18, r24
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	02 2e       	mov	r0, r18
    22be:	02 c0       	rjmp	.+4      	; 0x22c4 <DIO_writePIN+0x192>
    22c0:	88 0f       	add	r24, r24
    22c2:	99 1f       	adc	r25, r25
    22c4:	0a 94       	dec	r0
    22c6:	e2 f7       	brpl	.-8      	; 0x22c0 <DIO_writePIN+0x18e>
    22c8:	80 95       	com	r24
    22ca:	84 23       	and	r24, r20
    22cc:	8c 93       	st	X, r24
    22ce:	3c 91       	ld	r19, X
    22d0:	18 c0       	rjmp	.+48     	; 0x2302 <DIO_writePIN+0x1d0>
    22d2:	a2 e3       	ldi	r26, 0x32	; 50
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	e2 e3       	ldi	r30, 0x32	; 50
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	48 2f       	mov	r20, r24
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	02 2e       	mov	r0, r18
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <DIO_writePIN+0x1be>
    22ec:	88 0f       	add	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	0a 94       	dec	r0
    22f2:	e2 f7       	brpl	.-8      	; 0x22ec <DIO_writePIN+0x1ba>
    22f4:	84 2b       	or	r24, r20
    22f6:	8c 93       	st	X, r24
    22f8:	8c 91       	ld	r24, X
    22fa:	03 c0       	rjmp	.+6      	; 0x2302 <DIO_writePIN+0x1d0>
			break;
			default:
			return DIO_InvalidPort;
    22fc:	92 e0       	ldi	r25, 0x02	; 2
    22fe:	9c 83       	std	Y+4, r25	; 0x04
    2300:	01 c0       	rjmp	.+2      	; 0x2304 <DIO_writePIN+0x1d2>
			break;
		}
		return DIO_E_OK;
    2302:	1c 82       	std	Y+4, r1	; 0x04
    2304:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2306:	2e 96       	adiw	r28, 0x0e	; 14
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	de bf       	out	0x3e, r29	; 62
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	cd bf       	out	0x3d, r28	; 61
    2312:	cf 91       	pop	r28
    2314:	df 91       	pop	r29
    2316:	08 95       	ret

00002318 <DIO_readPIN>:
	@param port The port to which the pin belongs (porta, portb, portc, or portd).
	@param pin The pin number to be read.
	@param value A pointer to a variable to store the read value.
	@return DIO_E_OK if the read operation is successful, otherwise DIO_InvalidPort.
*/
u8_dioErrors_t DIO_readPIN (en_dioPorts_t port, en_dioPins_t pin, u8_dioLevel_t* value){
    2318:	df 93       	push	r29
    231a:	cf 93       	push	r28
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
    2320:	27 97       	sbiw	r28, 0x07	; 7
    2322:	0f b6       	in	r0, 0x3f	; 63
    2324:	f8 94       	cli
    2326:	de bf       	out	0x3e, r29	; 62
    2328:	0f be       	out	0x3f, r0	; 63
    232a:	cd bf       	out	0x3d, r28	; 61
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	6a 83       	std	Y+2, r22	; 0x02
    2330:	5c 83       	std	Y+4, r21	; 0x04
    2332:	4b 83       	std	Y+3, r20	; 0x03
		switch(port){
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	28 2f       	mov	r18, r24
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	3f 83       	std	Y+7, r19	; 0x07
    233c:	2e 83       	std	Y+6, r18	; 0x06
    233e:	4e 81       	ldd	r20, Y+6	; 0x06
    2340:	5f 81       	ldd	r21, Y+7	; 0x07
    2342:	41 30       	cpi	r20, 0x01	; 1
    2344:	51 05       	cpc	r21, r1
    2346:	c1 f1       	breq	.+112    	; 0x23b8 <DIO_readPIN+0xa0>
    2348:	8e 81       	ldd	r24, Y+6	; 0x06
    234a:	9f 81       	ldd	r25, Y+7	; 0x07
    234c:	82 30       	cpi	r24, 0x02	; 2
    234e:	91 05       	cpc	r25, r1
    2350:	34 f4       	brge	.+12     	; 0x235e <DIO_readPIN+0x46>
    2352:	2e 81       	ldd	r18, Y+6	; 0x06
    2354:	3f 81       	ldd	r19, Y+7	; 0x07
    2356:	21 15       	cp	r18, r1
    2358:	31 05       	cpc	r19, r1
    235a:	71 f0       	breq	.+28     	; 0x2378 <DIO_readPIN+0x60>
    235c:	8d c0       	rjmp	.+282    	; 0x2478 <DIO_readPIN+0x160>
    235e:	4e 81       	ldd	r20, Y+6	; 0x06
    2360:	5f 81       	ldd	r21, Y+7	; 0x07
    2362:	42 30       	cpi	r20, 0x02	; 2
    2364:	51 05       	cpc	r21, r1
    2366:	09 f4       	brne	.+2      	; 0x236a <DIO_readPIN+0x52>
    2368:	47 c0       	rjmp	.+142    	; 0x23f8 <DIO_readPIN+0xe0>
    236a:	8e 81       	ldd	r24, Y+6	; 0x06
    236c:	9f 81       	ldd	r25, Y+7	; 0x07
    236e:	83 30       	cpi	r24, 0x03	; 3
    2370:	91 05       	cpc	r25, r1
    2372:	09 f4       	brne	.+2      	; 0x2376 <DIO_readPIN+0x5e>
    2374:	61 c0       	rjmp	.+194    	; 0x2438 <DIO_readPIN+0x120>
    2376:	80 c0       	rjmp	.+256    	; 0x2478 <DIO_readPIN+0x160>
			case porta:
			*value = READ_BIT(RE_PORT_A,pin);
    2378:	e9 e3       	ldi	r30, 0x39	; 57
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	48 2f       	mov	r20, r24
    2380:	50 e0       	ldi	r21, 0x00	; 0
    2382:	8a 81       	ldd	r24, Y+2	; 0x02
    2384:	28 2f       	mov	r18, r24
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	02 c0       	rjmp	.+4      	; 0x2392 <DIO_readPIN+0x7a>
    238e:	88 0f       	add	r24, r24
    2390:	99 1f       	adc	r25, r25
    2392:	2a 95       	dec	r18
    2394:	e2 f7       	brpl	.-8      	; 0x238e <DIO_readPIN+0x76>
    2396:	9a 01       	movw	r18, r20
    2398:	28 23       	and	r18, r24
    239a:	39 23       	and	r19, r25
    239c:	8a 81       	ldd	r24, Y+2	; 0x02
    239e:	88 2f       	mov	r24, r24
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	a9 01       	movw	r20, r18
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <DIO_readPIN+0x92>
    23a6:	55 95       	asr	r21
    23a8:	47 95       	ror	r20
    23aa:	8a 95       	dec	r24
    23ac:	e2 f7       	brpl	.-8      	; 0x23a6 <DIO_readPIN+0x8e>
    23ae:	ca 01       	movw	r24, r20
    23b0:	eb 81       	ldd	r30, Y+3	; 0x03
    23b2:	fc 81       	ldd	r31, Y+4	; 0x04
    23b4:	80 83       	st	Z, r24
    23b6:	63 c0       	rjmp	.+198    	; 0x247e <DIO_readPIN+0x166>
			break;
			case portb:
			*value = READ_BIT(RE_PORT_B,pin);
    23b8:	e6 e3       	ldi	r30, 0x36	; 54
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	48 2f       	mov	r20, r24
    23c0:	50 e0       	ldi	r21, 0x00	; 0
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	28 2f       	mov	r18, r24
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <DIO_readPIN+0xba>
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	2a 95       	dec	r18
    23d4:	e2 f7       	brpl	.-8      	; 0x23ce <DIO_readPIN+0xb6>
    23d6:	9a 01       	movw	r18, r20
    23d8:	28 23       	and	r18, r24
    23da:	39 23       	and	r19, r25
    23dc:	8a 81       	ldd	r24, Y+2	; 0x02
    23de:	88 2f       	mov	r24, r24
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	a9 01       	movw	r20, r18
    23e4:	02 c0       	rjmp	.+4      	; 0x23ea <DIO_readPIN+0xd2>
    23e6:	55 95       	asr	r21
    23e8:	47 95       	ror	r20
    23ea:	8a 95       	dec	r24
    23ec:	e2 f7       	brpl	.-8      	; 0x23e6 <DIO_readPIN+0xce>
    23ee:	ca 01       	movw	r24, r20
    23f0:	eb 81       	ldd	r30, Y+3	; 0x03
    23f2:	fc 81       	ldd	r31, Y+4	; 0x04
    23f4:	80 83       	st	Z, r24
    23f6:	43 c0       	rjmp	.+134    	; 0x247e <DIO_readPIN+0x166>
			break;
			case portc:
			*value = READ_BIT(RE_PORT_C,pin);
    23f8:	e3 e3       	ldi	r30, 0x33	; 51
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	48 2f       	mov	r20, r24
    2400:	50 e0       	ldi	r21, 0x00	; 0
    2402:	8a 81       	ldd	r24, Y+2	; 0x02
    2404:	28 2f       	mov	r18, r24
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	02 c0       	rjmp	.+4      	; 0x2412 <DIO_readPIN+0xfa>
    240e:	88 0f       	add	r24, r24
    2410:	99 1f       	adc	r25, r25
    2412:	2a 95       	dec	r18
    2414:	e2 f7       	brpl	.-8      	; 0x240e <DIO_readPIN+0xf6>
    2416:	9a 01       	movw	r18, r20
    2418:	28 23       	and	r18, r24
    241a:	39 23       	and	r19, r25
    241c:	8a 81       	ldd	r24, Y+2	; 0x02
    241e:	88 2f       	mov	r24, r24
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	a9 01       	movw	r20, r18
    2424:	02 c0       	rjmp	.+4      	; 0x242a <DIO_readPIN+0x112>
    2426:	55 95       	asr	r21
    2428:	47 95       	ror	r20
    242a:	8a 95       	dec	r24
    242c:	e2 f7       	brpl	.-8      	; 0x2426 <DIO_readPIN+0x10e>
    242e:	ca 01       	movw	r24, r20
    2430:	eb 81       	ldd	r30, Y+3	; 0x03
    2432:	fc 81       	ldd	r31, Y+4	; 0x04
    2434:	80 83       	st	Z, r24
    2436:	23 c0       	rjmp	.+70     	; 0x247e <DIO_readPIN+0x166>
			break;
			case portd:
			*value = READ_BIT(RE_PORT_D,pin);
    2438:	e0 e3       	ldi	r30, 0x30	; 48
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	48 2f       	mov	r20, r24
    2440:	50 e0       	ldi	r21, 0x00	; 0
    2442:	8a 81       	ldd	r24, Y+2	; 0x02
    2444:	28 2f       	mov	r18, r24
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	02 c0       	rjmp	.+4      	; 0x2452 <DIO_readPIN+0x13a>
    244e:	88 0f       	add	r24, r24
    2450:	99 1f       	adc	r25, r25
    2452:	2a 95       	dec	r18
    2454:	e2 f7       	brpl	.-8      	; 0x244e <DIO_readPIN+0x136>
    2456:	9a 01       	movw	r18, r20
    2458:	28 23       	and	r18, r24
    245a:	39 23       	and	r19, r25
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	88 2f       	mov	r24, r24
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	a9 01       	movw	r20, r18
    2464:	02 c0       	rjmp	.+4      	; 0x246a <DIO_readPIN+0x152>
    2466:	55 95       	asr	r21
    2468:	47 95       	ror	r20
    246a:	8a 95       	dec	r24
    246c:	e2 f7       	brpl	.-8      	; 0x2466 <DIO_readPIN+0x14e>
    246e:	ca 01       	movw	r24, r20
    2470:	eb 81       	ldd	r30, Y+3	; 0x03
    2472:	fc 81       	ldd	r31, Y+4	; 0x04
    2474:	80 83       	st	Z, r24
    2476:	03 c0       	rjmp	.+6      	; 0x247e <DIO_readPIN+0x166>
			break;
			default:
			return DIO_InvalidPort;
    2478:	52 e0       	ldi	r21, 0x02	; 2
    247a:	5d 83       	std	Y+5, r21	; 0x05
    247c:	01 c0       	rjmp	.+2      	; 0x2480 <DIO_readPIN+0x168>
			break;
		}
		return DIO_E_OK;
    247e:	1d 82       	std	Y+5, r1	; 0x05
    2480:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2482:	27 96       	adiw	r28, 0x07	; 7
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	f8 94       	cli
    2488:	de bf       	out	0x3e, r29	; 62
    248a:	0f be       	out	0x3f, r0	; 63
    248c:	cd bf       	out	0x3d, r28	; 61
    248e:	cf 91       	pop	r28
    2490:	df 91       	pop	r29
    2492:	08 95       	ret

00002494 <DIO_togglePIN>:
	@brief Toggles the state of the specified pin of a given port.
	@param port The port to which the pin belongs (porta, portb, portc, or portd).
	@param pin The pin number to be toggled.
	@return DIO_E_OK if the toggle operation is successful, otherwise DIO_InvalidPort.
*/
u8_dioErrors_t DIO_togglePIN (en_dioPorts_t port, en_dioPins_t pin){
    2494:	df 93       	push	r29
    2496:	cf 93       	push	r28
    2498:	00 d0       	rcall	.+0      	; 0x249a <DIO_togglePIN+0x6>
    249a:	00 d0       	rcall	.+0      	; 0x249c <DIO_togglePIN+0x8>
    249c:	0f 92       	push	r0
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	89 83       	std	Y+1, r24	; 0x01
    24a4:	6a 83       	std	Y+2, r22	; 0x02
	switch(port){
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	28 2f       	mov	r18, r24
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	3d 83       	std	Y+5, r19	; 0x05
    24ae:	2c 83       	std	Y+4, r18	; 0x04
    24b0:	8c 81       	ldd	r24, Y+4	; 0x04
    24b2:	9d 81       	ldd	r25, Y+5	; 0x05
    24b4:	81 30       	cpi	r24, 0x01	; 1
    24b6:	91 05       	cpc	r25, r1
    24b8:	49 f1       	breq	.+82     	; 0x250c <DIO_togglePIN+0x78>
    24ba:	2c 81       	ldd	r18, Y+4	; 0x04
    24bc:	3d 81       	ldd	r19, Y+5	; 0x05
    24be:	22 30       	cpi	r18, 0x02	; 2
    24c0:	31 05       	cpc	r19, r1
    24c2:	2c f4       	brge	.+10     	; 0x24ce <DIO_togglePIN+0x3a>
    24c4:	8c 81       	ldd	r24, Y+4	; 0x04
    24c6:	9d 81       	ldd	r25, Y+5	; 0x05
    24c8:	00 97       	sbiw	r24, 0x00	; 0
    24ca:	61 f0       	breq	.+24     	; 0x24e4 <DIO_togglePIN+0x50>
    24cc:	5b c0       	rjmp	.+182    	; 0x2584 <DIO_togglePIN+0xf0>
    24ce:	2c 81       	ldd	r18, Y+4	; 0x04
    24d0:	3d 81       	ldd	r19, Y+5	; 0x05
    24d2:	22 30       	cpi	r18, 0x02	; 2
    24d4:	31 05       	cpc	r19, r1
    24d6:	71 f1       	breq	.+92     	; 0x2534 <DIO_togglePIN+0xa0>
    24d8:	8c 81       	ldd	r24, Y+4	; 0x04
    24da:	9d 81       	ldd	r25, Y+5	; 0x05
    24dc:	83 30       	cpi	r24, 0x03	; 3
    24de:	91 05       	cpc	r25, r1
    24e0:	e9 f1       	breq	.+122    	; 0x255c <DIO_togglePIN+0xc8>
    24e2:	50 c0       	rjmp	.+160    	; 0x2584 <DIO_togglePIN+0xf0>
		case porta:
			TOGGLE_BIT(WR_PORT_A,pin);
    24e4:	ab e3       	ldi	r26, 0x3B	; 59
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	eb e3       	ldi	r30, 0x3B	; 59
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	48 2f       	mov	r20, r24
    24f0:	8a 81       	ldd	r24, Y+2	; 0x02
    24f2:	28 2f       	mov	r18, r24
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	02 2e       	mov	r0, r18
    24fc:	02 c0       	rjmp	.+4      	; 0x2502 <DIO_togglePIN+0x6e>
    24fe:	88 0f       	add	r24, r24
    2500:	99 1f       	adc	r25, r25
    2502:	0a 94       	dec	r0
    2504:	e2 f7       	brpl	.-8      	; 0x24fe <DIO_togglePIN+0x6a>
    2506:	84 27       	eor	r24, r20
    2508:	8c 93       	st	X, r24
    250a:	3f c0       	rjmp	.+126    	; 0x258a <DIO_togglePIN+0xf6>
			break;
		case portb:
			TOGGLE_BIT(WR_PORT_B,pin);
    250c:	a8 e3       	ldi	r26, 0x38	; 56
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	e8 e3       	ldi	r30, 0x38	; 56
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	48 2f       	mov	r20, r24
    2518:	8a 81       	ldd	r24, Y+2	; 0x02
    251a:	28 2f       	mov	r18, r24
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	02 2e       	mov	r0, r18
    2524:	02 c0       	rjmp	.+4      	; 0x252a <DIO_togglePIN+0x96>
    2526:	88 0f       	add	r24, r24
    2528:	99 1f       	adc	r25, r25
    252a:	0a 94       	dec	r0
    252c:	e2 f7       	brpl	.-8      	; 0x2526 <DIO_togglePIN+0x92>
    252e:	84 27       	eor	r24, r20
    2530:	8c 93       	st	X, r24
    2532:	2b c0       	rjmp	.+86     	; 0x258a <DIO_togglePIN+0xf6>
		break;
		case portc:
			TOGGLE_BIT(WR_PORT_C,pin);
    2534:	a5 e3       	ldi	r26, 0x35	; 53
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	e5 e3       	ldi	r30, 0x35	; 53
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	48 2f       	mov	r20, r24
    2540:	8a 81       	ldd	r24, Y+2	; 0x02
    2542:	28 2f       	mov	r18, r24
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	02 2e       	mov	r0, r18
    254c:	02 c0       	rjmp	.+4      	; 0x2552 <DIO_togglePIN+0xbe>
    254e:	88 0f       	add	r24, r24
    2550:	99 1f       	adc	r25, r25
    2552:	0a 94       	dec	r0
    2554:	e2 f7       	brpl	.-8      	; 0x254e <DIO_togglePIN+0xba>
    2556:	84 27       	eor	r24, r20
    2558:	8c 93       	st	X, r24
    255a:	17 c0       	rjmp	.+46     	; 0x258a <DIO_togglePIN+0xf6>
		break;
		case portd:
			TOGGLE_BIT(WR_PORT_D,pin);
    255c:	a2 e3       	ldi	r26, 0x32	; 50
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	e2 e3       	ldi	r30, 0x32	; 50
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	48 2f       	mov	r20, r24
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	02 2e       	mov	r0, r18
    2574:	02 c0       	rjmp	.+4      	; 0x257a <DIO_togglePIN+0xe6>
    2576:	88 0f       	add	r24, r24
    2578:	99 1f       	adc	r25, r25
    257a:	0a 94       	dec	r0
    257c:	e2 f7       	brpl	.-8      	; 0x2576 <DIO_togglePIN+0xe2>
    257e:	84 27       	eor	r24, r20
    2580:	8c 93       	st	X, r24
    2582:	03 c0       	rjmp	.+6      	; 0x258a <DIO_togglePIN+0xf6>
		break;
		default:
		return DIO_InvalidPort;
    2584:	92 e0       	ldi	r25, 0x02	; 2
    2586:	9b 83       	std	Y+3, r25	; 0x03
    2588:	01 c0       	rjmp	.+2      	; 0x258c <DIO_togglePIN+0xf8>
		break;
	}
	return DIO_E_OK;
    258a:	1b 82       	std	Y+3, r1	; 0x03
    258c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	0f 90       	pop	r0
    2594:	0f 90       	pop	r0
    2596:	0f 90       	pop	r0
    2598:	cf 91       	pop	r28
    259a:	df 91       	pop	r29
    259c:	08 95       	ret

0000259e <DIO_readPORT>:
	 * @param port The port to be read (porta, portb, portc, or portd).
	 * @param data A pointer to a variable to store the read data.
	 *
	 * @return DIO_E_OK if the read operation is successful, otherwise DIO_InvalidPort.
 */
u8_dioErrors_t DIO_readPORT (en_dioPorts_t port,u8_dioLevel_t *data){
    259e:	df 93       	push	r29
    25a0:	cf 93       	push	r28
    25a2:	00 d0       	rcall	.+0      	; 0x25a4 <DIO_readPORT+0x6>
    25a4:	00 d0       	rcall	.+0      	; 0x25a6 <DIO_readPORT+0x8>
    25a6:	00 d0       	rcall	.+0      	; 0x25a8 <DIO_readPORT+0xa>
    25a8:	cd b7       	in	r28, 0x3d	; 61
    25aa:	de b7       	in	r29, 0x3e	; 62
    25ac:	89 83       	std	Y+1, r24	; 0x01
    25ae:	7b 83       	std	Y+3, r23	; 0x03
    25b0:	6a 83       	std	Y+2, r22	; 0x02
		switch(port){
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	28 2f       	mov	r18, r24
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	3e 83       	std	Y+6, r19	; 0x06
    25ba:	2d 83       	std	Y+5, r18	; 0x05
    25bc:	8d 81       	ldd	r24, Y+5	; 0x05
    25be:	9e 81       	ldd	r25, Y+6	; 0x06
    25c0:	81 30       	cpi	r24, 0x01	; 1
    25c2:	91 05       	cpc	r25, r1
    25c4:	e1 f0       	breq	.+56     	; 0x25fe <DIO_readPORT+0x60>
    25c6:	2d 81       	ldd	r18, Y+5	; 0x05
    25c8:	3e 81       	ldd	r19, Y+6	; 0x06
    25ca:	22 30       	cpi	r18, 0x02	; 2
    25cc:	31 05       	cpc	r19, r1
    25ce:	2c f4       	brge	.+10     	; 0x25da <DIO_readPORT+0x3c>
    25d0:	8d 81       	ldd	r24, Y+5	; 0x05
    25d2:	9e 81       	ldd	r25, Y+6	; 0x06
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	61 f0       	breq	.+24     	; 0x25f0 <DIO_readPORT+0x52>
    25d8:	27 c0       	rjmp	.+78     	; 0x2628 <DIO_readPORT+0x8a>
    25da:	2d 81       	ldd	r18, Y+5	; 0x05
    25dc:	3e 81       	ldd	r19, Y+6	; 0x06
    25de:	22 30       	cpi	r18, 0x02	; 2
    25e0:	31 05       	cpc	r19, r1
    25e2:	a1 f0       	breq	.+40     	; 0x260c <DIO_readPORT+0x6e>
    25e4:	8d 81       	ldd	r24, Y+5	; 0x05
    25e6:	9e 81       	ldd	r25, Y+6	; 0x06
    25e8:	83 30       	cpi	r24, 0x03	; 3
    25ea:	91 05       	cpc	r25, r1
    25ec:	b1 f0       	breq	.+44     	; 0x261a <DIO_readPORT+0x7c>
    25ee:	1c c0       	rjmp	.+56     	; 0x2628 <DIO_readPORT+0x8a>
			case porta:
			*data =	RE_PORT_A;
    25f0:	e9 e3       	ldi	r30, 0x39	; 57
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	ea 81       	ldd	r30, Y+2	; 0x02
    25f8:	fb 81       	ldd	r31, Y+3	; 0x03
    25fa:	80 83       	st	Z, r24
    25fc:	18 c0       	rjmp	.+48     	; 0x262e <DIO_readPORT+0x90>
			break;
			case portb:
			*data =	RE_PORT_B;
    25fe:	e6 e3       	ldi	r30, 0x36	; 54
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	ea 81       	ldd	r30, Y+2	; 0x02
    2606:	fb 81       	ldd	r31, Y+3	; 0x03
    2608:	80 83       	st	Z, r24
    260a:	11 c0       	rjmp	.+34     	; 0x262e <DIO_readPORT+0x90>
			break;
			case portc:
			*data =	RE_PORT_C;
    260c:	e3 e3       	ldi	r30, 0x33	; 51
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
    2612:	ea 81       	ldd	r30, Y+2	; 0x02
    2614:	fb 81       	ldd	r31, Y+3	; 0x03
    2616:	80 83       	st	Z, r24
    2618:	0a c0       	rjmp	.+20     	; 0x262e <DIO_readPORT+0x90>
			break;
			case portd:
			*data =	RE_PORT_D;
    261a:	e0 e3       	ldi	r30, 0x30	; 48
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	ea 81       	ldd	r30, Y+2	; 0x02
    2622:	fb 81       	ldd	r31, Y+3	; 0x03
    2624:	80 83       	st	Z, r24
    2626:	03 c0       	rjmp	.+6      	; 0x262e <DIO_readPORT+0x90>
			break;
			default:
			return DIO_InvalidPort;
    2628:	92 e0       	ldi	r25, 0x02	; 2
    262a:	9c 83       	std	Y+4, r25	; 0x04
    262c:	01 c0       	rjmp	.+2      	; 0x2630 <DIO_readPORT+0x92>
			break;
		}
		return DIO_E_OK;
    262e:	1c 82       	std	Y+4, r1	; 0x04
    2630:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2632:	26 96       	adiw	r28, 0x06	; 6
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	de bf       	out	0x3e, r29	; 62
    263a:	0f be       	out	0x3f, r0	; 63
    263c:	cd bf       	out	0x3d, r28	; 61
    263e:	cf 91       	pop	r28
    2640:	df 91       	pop	r29
    2642:	08 95       	ret

00002644 <DIO_writePORT>:
	 * @param port The port to which the state will be written (porta, portb, portc, or portd).
	 * @param state The state to be written to the port.
	 *
	 * @return DIO_E_OK if the write operation is successful, otherwise DIO_InvalidPort.
 */
u8_dioErrors_t DIO_writePORT (en_dioPorts_t port,u8_dioLevel_t state){
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	00 d0       	rcall	.+0      	; 0x264a <DIO_writePORT+0x6>
    264a:	00 d0       	rcall	.+0      	; 0x264c <DIO_writePORT+0x8>
    264c:	0f 92       	push	r0
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	89 83       	std	Y+1, r24	; 0x01
    2654:	6a 83       	std	Y+2, r22	; 0x02
		switch(port){
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	28 2f       	mov	r18, r24
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	3d 83       	std	Y+5, r19	; 0x05
    265e:	2c 83       	std	Y+4, r18	; 0x04
    2660:	8c 81       	ldd	r24, Y+4	; 0x04
    2662:	9d 81       	ldd	r25, Y+5	; 0x05
    2664:	81 30       	cpi	r24, 0x01	; 1
    2666:	91 05       	cpc	r25, r1
    2668:	d1 f0       	breq	.+52     	; 0x269e <DIO_writePORT+0x5a>
    266a:	2c 81       	ldd	r18, Y+4	; 0x04
    266c:	3d 81       	ldd	r19, Y+5	; 0x05
    266e:	22 30       	cpi	r18, 0x02	; 2
    2670:	31 05       	cpc	r19, r1
    2672:	2c f4       	brge	.+10     	; 0x267e <DIO_writePORT+0x3a>
    2674:	8c 81       	ldd	r24, Y+4	; 0x04
    2676:	9d 81       	ldd	r25, Y+5	; 0x05
    2678:	00 97       	sbiw	r24, 0x00	; 0
    267a:	61 f0       	breq	.+24     	; 0x2694 <DIO_writePORT+0x50>
    267c:	1f c0       	rjmp	.+62     	; 0x26bc <DIO_writePORT+0x78>
    267e:	2c 81       	ldd	r18, Y+4	; 0x04
    2680:	3d 81       	ldd	r19, Y+5	; 0x05
    2682:	22 30       	cpi	r18, 0x02	; 2
    2684:	31 05       	cpc	r19, r1
    2686:	81 f0       	breq	.+32     	; 0x26a8 <DIO_writePORT+0x64>
    2688:	8c 81       	ldd	r24, Y+4	; 0x04
    268a:	9d 81       	ldd	r25, Y+5	; 0x05
    268c:	83 30       	cpi	r24, 0x03	; 3
    268e:	91 05       	cpc	r25, r1
    2690:	81 f0       	breq	.+32     	; 0x26b2 <DIO_writePORT+0x6e>
    2692:	14 c0       	rjmp	.+40     	; 0x26bc <DIO_writePORT+0x78>
			case porta:
			WR_PORT_A = state;
    2694:	eb e3       	ldi	r30, 0x3B	; 59
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	8a 81       	ldd	r24, Y+2	; 0x02
    269a:	80 83       	st	Z, r24
    269c:	12 c0       	rjmp	.+36     	; 0x26c2 <DIO_writePORT+0x7e>
			break;
			case portb:
			WR_PORT_B = state;
    269e:	e8 e3       	ldi	r30, 0x38	; 56
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	8a 81       	ldd	r24, Y+2	; 0x02
    26a4:	80 83       	st	Z, r24
    26a6:	0d c0       	rjmp	.+26     	; 0x26c2 <DIO_writePORT+0x7e>
			break;
			case portc:
			WR_PORT_C = state;
    26a8:	e5 e3       	ldi	r30, 0x35	; 53
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	80 83       	st	Z, r24
    26b0:	08 c0       	rjmp	.+16     	; 0x26c2 <DIO_writePORT+0x7e>
			break;
			case portd:
			WR_PORT_D = state;
    26b2:	e2 e3       	ldi	r30, 0x32	; 50
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	8a 81       	ldd	r24, Y+2	; 0x02
    26b8:	80 83       	st	Z, r24
    26ba:	03 c0       	rjmp	.+6      	; 0x26c2 <DIO_writePORT+0x7e>
			break;
			default:
			return DIO_InvalidPort;
    26bc:	92 e0       	ldi	r25, 0x02	; 2
    26be:	9b 83       	std	Y+3, r25	; 0x03
    26c0:	01 c0       	rjmp	.+2      	; 0x26c4 <DIO_writePORT+0x80>
			break;
		}
		return DIO_E_OK;
    26c2:	1b 82       	std	Y+3, r1	; 0x03
    26c4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	cf 91       	pop	r28
    26d2:	df 91       	pop	r29
    26d4:	08 95       	ret

000026d6 <LED_init>:
 *
 * @param led The LED configuration structure.
 *
 * @return LED_ERROR_OK if the initialization is successful, otherwise LED_ERROR_NOT_OK.
 */
u8_ledError_t LED_init(st_ledConfig_t led){
    26d6:	df 93       	push	r29
    26d8:	cf 93       	push	r28
    26da:	00 d0       	rcall	.+0      	; 0x26dc <LED_init+0x6>
    26dc:	0f 92       	push	r0
    26de:	cd b7       	in	r28, 0x3d	; 61
    26e0:	de b7       	in	r29, 0x3e	; 62
    26e2:	9a 83       	std	Y+2, r25	; 0x02
    26e4:	89 83       	std	Y+1, r24	; 0x01
	if (DIO_init(led.port,led.pin,STD_OUTPUT) == DIO_E_OK)
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ea:	69 2f       	mov	r22, r25
    26ec:	41 e0       	ldi	r20, 0x01	; 1
    26ee:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <DIO_init>
    26f2:	88 23       	and	r24, r24
    26f4:	11 f4       	brne	.+4      	; 0x26fa <LED_init+0x24>
	{
		return LED_ERROR_OK;
    26f6:	1b 82       	std	Y+3, r1	; 0x03
    26f8:	02 c0       	rjmp	.+4      	; 0x26fe <LED_init+0x28>
	}
	return LED_ERROR_NOT_OK;
    26fa:	85 e0       	ldi	r24, 0x05	; 5
    26fc:	8b 83       	std	Y+3, r24	; 0x03
    26fe:	8b 81       	ldd	r24, Y+3	; 0x03
}/**
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <LED_on>:
 *
 * @param led The LED configuration structure.
 *
 * @return LED_ERROR_OK if the operation is successful, otherwise LED_ERROR_NOT_OK.
 */
u8_ledError_t LED_on(st_ledConfig_t led){
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	00 d0       	rcall	.+0      	; 0x2712 <LED_on+0x6>
    2712:	0f 92       	push	r0
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    2718:	9a 83       	std	Y+2, r25	; 0x02
    271a:	89 83       	std	Y+1, r24	; 0x01
	if (DIO_writePIN(led.port,led.pin,STD_HIGH) == DIO_E_OK)
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	9a 81       	ldd	r25, Y+2	; 0x02
    2720:	69 2f       	mov	r22, r25
    2722:	41 e0       	ldi	r20, 0x01	; 1
    2724:	0e 94 99 10 	call	0x2132	; 0x2132 <DIO_writePIN>
    2728:	88 23       	and	r24, r24
    272a:	11 f4       	brne	.+4      	; 0x2730 <LED_on+0x24>
	{
		return LED_ERROR_OK;
    272c:	1b 82       	std	Y+3, r1	; 0x03
    272e:	02 c0       	rjmp	.+4      	; 0x2734 <LED_on+0x28>
	}
	return LED_ERROR_NOT_OK;
    2730:	85 e0       	ldi	r24, 0x05	; 5
    2732:	8b 83       	std	Y+3, r24	; 0x03
    2734:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	cf 91       	pop	r28
    273e:	df 91       	pop	r29
    2740:	08 95       	ret

00002742 <LED_off>:
 *
 * @param led The LED configuration structure.
 *
 * @return LED_ERROR_OK if the operation is successful, otherwise LED_ERROR_NOT_OK.
 */
u8_ledError_t LED_off(st_ledConfig_t led){
    2742:	df 93       	push	r29
    2744:	cf 93       	push	r28
    2746:	00 d0       	rcall	.+0      	; 0x2748 <LED_off+0x6>
    2748:	0f 92       	push	r0
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
    274e:	9a 83       	std	Y+2, r25	; 0x02
    2750:	89 83       	std	Y+1, r24	; 0x01
	if (DIO_writePIN(led.port,led.pin,STD_LOW) == DIO_E_OK)
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	9a 81       	ldd	r25, Y+2	; 0x02
    2756:	69 2f       	mov	r22, r25
    2758:	40 e0       	ldi	r20, 0x00	; 0
    275a:	0e 94 99 10 	call	0x2132	; 0x2132 <DIO_writePIN>
    275e:	88 23       	and	r24, r24
    2760:	11 f4       	brne	.+4      	; 0x2766 <LED_off+0x24>
	{
		return LED_ERROR_OK;
    2762:	1b 82       	std	Y+3, r1	; 0x03
    2764:	02 c0       	rjmp	.+4      	; 0x276a <LED_off+0x28>
	}
	return LED_ERROR_NOT_OK;
    2766:	85 e0       	ldi	r24, 0x05	; 5
    2768:	8b 83       	std	Y+3, r24	; 0x03
    276a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    276c:	0f 90       	pop	r0
    276e:	0f 90       	pop	r0
    2770:	0f 90       	pop	r0
    2772:	cf 91       	pop	r28
    2774:	df 91       	pop	r29
    2776:	08 95       	ret

00002778 <LED_toggle>:
 *
 * @param led The LED configuration structure.
 *
 * @return LED_ERROR_OK if the operation is successful, otherwise LED_ERROR_NOT_OK.
 */
u8_ledError_t LED_toggle(st_ledConfig_t led){
    2778:	df 93       	push	r29
    277a:	cf 93       	push	r28
    277c:	00 d0       	rcall	.+0      	; 0x277e <LED_toggle+0x6>
    277e:	0f 92       	push	r0
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
    2784:	9a 83       	std	Y+2, r25	; 0x02
    2786:	89 83       	std	Y+1, r24	; 0x01
	if (DIO_togglePIN(led.port,led.pin) == DIO_E_OK)
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	9a 81       	ldd	r25, Y+2	; 0x02
    278c:	69 2f       	mov	r22, r25
    278e:	0e 94 4a 12 	call	0x2494	; 0x2494 <DIO_togglePIN>
    2792:	88 23       	and	r24, r24
    2794:	11 f4       	brne	.+4      	; 0x279a <LED_toggle+0x22>
	{
		return LED_ERROR_OK;
    2796:	1b 82       	std	Y+3, r1	; 0x03
    2798:	02 c0       	rjmp	.+4      	; 0x279e <LED_toggle+0x26>
	}
	return LED_ERROR_NOT_OK;
    279a:	85 e0       	ldi	r24, 0x05	; 5
    279c:	8b 83       	std	Y+3, r24	; 0x03
    279e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	0f 90       	pop	r0
    27a6:	cf 91       	pop	r28
    27a8:	df 91       	pop	r29
    27aa:	08 95       	ret

000027ac <TASK_1>:

void APP_ext_int0_cbf(void);
void APP_wake_up_cbf(void);

void TASK_1(void)
{
    27ac:	df 93       	push	r29
    27ae:	cf 93       	push	r28
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
	LED_toggle(LED_0);
    27b4:	80 91 7c 01 	lds	r24, 0x017C
    27b8:	90 91 7d 01 	lds	r25, 0x017D
    27bc:	0e 94 bc 13 	call	0x2778	; 0x2778 <LED_toggle>
}
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <TASK_2>:

void TASK_2(void)
{
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
	LED_toggle(LED_1);
    27ce:	80 91 7e 01 	lds	r24, 0x017E
    27d2:	90 91 7f 01 	lds	r25, 0x017F
    27d6:	0e 94 bc 13 	call	0x2778	; 0x2778 <LED_toggle>
}
    27da:	cf 91       	pop	r28
    27dc:	df 91       	pop	r29
    27de:	08 95       	ret

000027e0 <TASK_3>:

void TASK_3(void)
{
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
	//SOS_deinit();
	SOS_delete_task(2);
    27e8:	82 e0       	ldi	r24, 0x02	; 2
    27ea:	0e 94 8a 07 	call	0xf14	; 0xf14 <SOS_delete_task>
	LED_off(LED_1);
    27ee:	80 91 7e 01 	lds	r24, 0x017E
    27f2:	90 91 7f 01 	lds	r25, 0x017F
    27f6:	0e 94 a1 13 	call	0x2742	; 0x2742 <LED_off>
}
    27fa:	cf 91       	pop	r28
    27fc:	df 91       	pop	r29
    27fe:	08 95       	ret

00002800 <APP_init>:

uint8_t APP_init(void)
{
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	0f 92       	push	r0
    2806:	cd b7       	in	r28, 0x3d	; 61
    2808:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_retVal = APP_ERROR_OK;
    280a:	19 82       	std	Y+1, r1	; 0x01
	
	// Init leds
	if ((LED_ERROR_OK == LED_init(LED_0)) && 
    280c:	80 91 7c 01 	lds	r24, 0x017C
    2810:	90 91 7d 01 	lds	r25, 0x017D
    2814:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LED_init>
    2818:	88 23       	and	r24, r24
    281a:	09 f0       	breq	.+2      	; 0x281e <APP_init+0x1e>
    281c:	42 c0       	rjmp	.+132    	; 0x28a2 <APP_init+0xa2>
    281e:	80 91 7e 01 	lds	r24, 0x017E
    2822:	90 91 7f 01 	lds	r25, 0x017F
    2826:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LED_init>
    282a:	88 23       	and	r24, r24
    282c:	d1 f5       	brne	.+116    	; 0x28a2 <APP_init+0xa2>
		(LED_ERROR_OK == LED_init(LED_1)))
	{
		// Init the small SOS
		if (SOS_STATUS_SUCCESS == SOS_init())
    282e:	0e 94 1b 06 	call	0xc36	; 0xc36 <SOS_init>
    2832:	88 23       	and	r24, r24
    2834:	99 f5       	brne	.+102    	; 0x289c <APP_init+0x9c>
		{
			// create task 1
			if (SOS_STATUS_SUCCESS == SOS_create_task(
    2836:	86 ed       	ldi	r24, 0xD6	; 214
    2838:	93 e1       	ldi	r25, 0x13	; 19
    283a:	61 e0       	ldi	r22, 0x01	; 1
    283c:	41 e0       	ldi	r20, 0x01	; 1
    283e:	2c e2       	ldi	r18, 0x2C	; 44
    2840:	31 e0       	ldi	r19, 0x01	; 1
    2842:	0e 94 de 06 	call	0xdbc	; 0xdbc <SOS_create_task>
    2846:	88 23       	and	r24, r24
    2848:	31 f5       	brne	.+76     	; 0x2896 <APP_init+0x96>
    284a:	83 ee       	ldi	r24, 0xE3	; 227
    284c:	93 e1       	ldi	r25, 0x13	; 19
    284e:	62 e0       	ldi	r22, 0x02	; 2
    2850:	43 e0       	ldi	r20, 0x03	; 3
    2852:	24 ef       	ldi	r18, 0xF4	; 244
    2854:	31 e0       	ldi	r19, 0x01	; 1
    2856:	0e 94 de 06 	call	0xdbc	; 0xdbc <SOS_create_task>
    285a:	88 23       	and	r24, r24
    285c:	e1 f4       	brne	.+56     	; 0x2896 <APP_init+0x96>
															 3,							// priority
															500							// period
													))
			{
				// Init external interrupts
				if ((EXT_INT_E_OK ==  EXT_INTERRUPT_MANAGER_init(EXT_0,APP_ext_int0_cbf)) &&
    285e:	2c e7       	ldi	r18, 0x7C	; 124
    2860:	34 e1       	ldi	r19, 0x14	; 20
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	b9 01       	movw	r22, r18
    2866:	0e 94 00 0c 	call	0x1800	; 0x1800 <EXT_INTERRUPT_MANAGER_init>
    286a:	88 23       	and	r24, r24
    286c:	89 f4       	brne	.+34     	; 0x2890 <APP_init+0x90>
    286e:	2c e9       	ldi	r18, 0x9C	; 156
    2870:	34 e1       	ldi	r19, 0x14	; 20
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	b9 01       	movw	r22, r18
    2876:	0e 94 00 0c 	call	0x1800	; 0x1800 <EXT_INTERRUPT_MANAGER_init>
    287a:	88 23       	and	r24, r24
    287c:	49 f4       	brne	.+18     	; 0x2890 <APP_init+0x90>
				    (EXT_INT_E_OK ==  EXT_INTERRUPT_MANAGER_init(EXT_1,APP_wake_up_cbf)))
				{
					// enable global interrupts
					sei();
    287e:	78 94       	sei
					
					if ((EXT_INT_E_OK == EXT_INTERRUPT_MANAGER_enable(EXT_0)))
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	0e 94 1d 0c 	call	0x183a	; 0x183a <EXT_INTERRUPT_MANAGER_enable>
    2886:	88 23       	and	r24, r24
    2888:	71 f0       	breq	.+28     	; 0x28a6 <APP_init+0xa6>
					{
						// finished Initialization
					}
					else
					{
						u8_retVal = APP_ERROR_NOT_OK;
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	89 83       	std	Y+1, r24	; 0x01
    288e:	0b c0       	rjmp	.+22     	; 0x28a6 <APP_init+0xa6>
					}
				}
				else
				{
					u8_retVal = APP_ERROR_NOT_OK;
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	89 83       	std	Y+1, r24	; 0x01
    2894:	08 c0       	rjmp	.+16     	; 0x28a6 <APP_init+0xa6>
				}
			}
			else
			{
				u8_retVal = APP_ERROR_NOT_OK;
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	89 83       	std	Y+1, r24	; 0x01
    289a:	05 c0       	rjmp	.+10     	; 0x28a6 <APP_init+0xa6>
			}
		}
		else
		{
			u8_retVal = APP_ERROR_NOT_OK;
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	89 83       	std	Y+1, r24	; 0x01
    28a0:	02 c0       	rjmp	.+4      	; 0x28a6 <APP_init+0xa6>
		}
		
	}
	else
	{
		u8_retVal = APP_ERROR_NOT_OK;
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_retVal;
    28a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    28a8:	0f 90       	pop	r0
    28aa:	cf 91       	pop	r28
    28ac:	df 91       	pop	r29
    28ae:	08 95       	ret

000028b0 <APP_start>:

void APP_start(void)
{
    28b0:	df 93       	push	r29
    28b2:	cf 93       	push	r28
    28b4:	cd b7       	in	r28, 0x3d	; 61
    28b6:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		(APP_runing_task)();
    28b8:	e0 91 77 01 	lds	r30, 0x0177
    28bc:	f0 91 78 01 	lds	r31, 0x0178
    28c0:	09 95       	icall
    28c2:	fa cf       	rjmp	.-12     	; 0x28b8 <APP_start+0x8>

000028c4 <APP_btn_start_pressed>:

// to avoid disabling interrupts in the ISR 
// disable start external interrupt
// enable stop external interrupt
void APP_btn_start_pressed(void)
{
    28c4:	df 93       	push	r29
    28c6:	cf 93       	push	r28
    28c8:	cd b7       	in	r28, 0x3d	; 61
    28ca:	de b7       	in	r29, 0x3e	; 62
	EXT_INTERRUPT_MANAGER_enable(EXT_0);
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	0e 94 1d 0c 	call	0x183a	; 0x183a <EXT_INTERRUPT_MANAGER_enable>
	EXT_INTERRUPT_MANAGER_disable(EXT_1);
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	0e 94 2e 0c 	call	0x185c	; 0x185c <EXT_INTERRUPT_MANAGER_disable>
}
    28d8:	cf 91       	pop	r28
    28da:	df 91       	pop	r29
    28dc:	08 95       	ret

000028de <APP_btn_stop_pressed>:

// to avoid disabling interrupts in the ISR 
// disable stop external interrupt
// enable start external interrupt
void APP_btn_stop_pressed(void)
{
    28de:	df 93       	push	r29
    28e0:	cf 93       	push	r28
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
	EXT_INTERRUPT_MANAGER_disable(EXT_0);
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	0e 94 2e 0c 	call	0x185c	; 0x185c <EXT_INTERRUPT_MANAGER_disable>
	EXT_INTERRUPT_MANAGER_enable(EXT_1);
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	0e 94 1d 0c 	call	0x183a	; 0x183a <EXT_INTERRUPT_MANAGER_enable>
}
    28f2:	cf 91       	pop	r28
    28f4:	df 91       	pop	r29
    28f6:	08 95       	ret

000028f8 <APP_ext_int0_cbf>:



// stop button external interrupt handler
void APP_ext_int0_cbf(void)
{
    28f8:	df 93       	push	r29
    28fa:	cf 93       	push	r28
    28fc:	cd b7       	in	r28, 0x3d	; 61
    28fe:	de b7       	in	r29, 0x3e	; 62
	// switch the running task to SOS_disable
	APP_runing_task = SOS_disable;
    2900:	82 e8       	ldi	r24, 0x82	; 130
    2902:	99 e0       	ldi	r25, 0x09	; 9
    2904:	90 93 78 01 	sts	0x0178, r25
    2908:	80 93 77 01 	sts	0x0177, r24
	
	// change SOS state to stop to exit from SOS_run
	SOS_change_state(DISABLE);
    290c:	82 e0       	ldi	r24, 0x02	; 2
    290e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <SOS_change_state>
	
	// send external interrupt control handler to SOS_disable
	SOS_disable_ext_interrupt(APP_btn_stop_pressed);
    2912:	8f e6       	ldi	r24, 0x6F	; 111
    2914:	94 e1       	ldi	r25, 0x14	; 20
    2916:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <SOS_disable_ext_interrupt>
	
	// Turn leds off
	LED_off(LED_0);
    291a:	80 91 7c 01 	lds	r24, 0x017C
    291e:	90 91 7d 01 	lds	r25, 0x017D
    2922:	0e 94 a1 13 	call	0x2742	; 0x2742 <LED_off>
	LED_off(LED_1);
    2926:	80 91 7e 01 	lds	r24, 0x017E
    292a:	90 91 7f 01 	lds	r25, 0x017F
    292e:	0e 94 a1 13 	call	0x2742	; 0x2742 <LED_off>
}
    2932:	cf 91       	pop	r28
    2934:	df 91       	pop	r29
    2936:	08 95       	ret

00002938 <APP_wake_up_cbf>:



// start button external interrupt handler
void APP_wake_up_cbf(void)
{
    2938:	df 93       	push	r29
    293a:	cf 93       	push	r28
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
	// switch the running task to SOS_run
	APP_runing_task = SOS_run;
    2940:	83 e1       	ldi	r24, 0x13	; 19
    2942:	99 e0       	ldi	r25, 0x09	; 9
    2944:	90 93 78 01 	sts	0x0178, r25
    2948:	80 93 77 01 	sts	0x0177, r24
	
	// change SOS state to stop to exit from SOS_disable
	SOS_change_state(INIT);
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <SOS_change_state>
	
	// send external interrupt control handler to SOS_disable
	SOS_disable_ext_interrupt(APP_btn_start_pressed);
    2952:	82 e6       	ldi	r24, 0x62	; 98
    2954:	94 e1       	ldi	r25, 0x14	; 20
    2956:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <SOS_disable_ext_interrupt>
}
    295a:	cf 91       	pop	r28
    295c:	df 91       	pop	r29
    295e:	08 95       	ret

00002960 <main>:

#include "APP/app.h"


int main(void)
{
    2960:	df 93       	push	r29
    2962:	cf 93       	push	r28
    2964:	0f 92       	push	r0
    2966:	cd b7       	in	r28, 0x3d	; 61
    2968:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_retVal = 0;
    296a:	19 82       	std	Y+1, r1	; 0x01
	u8_retVal = APP_init();
    296c:	0e 94 00 14 	call	0x2800	; 0x2800 <APP_init>
    2970:	89 83       	std	Y+1, r24	; 0x01
	if (0 == u8_retVal)
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	88 23       	and	r24, r24
    2976:	11 f4       	brne	.+4      	; 0x297c <main+0x1c>
	{
		APP_start();
    2978:	0e 94 58 14 	call	0x28b0	; 0x28b0 <APP_start>
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	90 e0       	ldi	r25, 0x00	; 0
	}




}
    2980:	0f 90       	pop	r0
    2982:	cf 91       	pop	r28
    2984:	df 91       	pop	r29
    2986:	08 95       	ret

00002988 <__prologue_saves__>:
    2988:	2f 92       	push	r2
    298a:	3f 92       	push	r3
    298c:	4f 92       	push	r4
    298e:	5f 92       	push	r5
    2990:	6f 92       	push	r6
    2992:	7f 92       	push	r7
    2994:	8f 92       	push	r8
    2996:	9f 92       	push	r9
    2998:	af 92       	push	r10
    299a:	bf 92       	push	r11
    299c:	cf 92       	push	r12
    299e:	df 92       	push	r13
    29a0:	ef 92       	push	r14
    29a2:	ff 92       	push	r15
    29a4:	0f 93       	push	r16
    29a6:	1f 93       	push	r17
    29a8:	cf 93       	push	r28
    29aa:	df 93       	push	r29
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
    29b0:	ca 1b       	sub	r28, r26
    29b2:	db 0b       	sbc	r29, r27
    29b4:	0f b6       	in	r0, 0x3f	; 63
    29b6:	f8 94       	cli
    29b8:	de bf       	out	0x3e, r29	; 62
    29ba:	0f be       	out	0x3f, r0	; 63
    29bc:	cd bf       	out	0x3d, r28	; 61
    29be:	09 94       	ijmp

000029c0 <__epilogue_restores__>:
    29c0:	2a 88       	ldd	r2, Y+18	; 0x12
    29c2:	39 88       	ldd	r3, Y+17	; 0x11
    29c4:	48 88       	ldd	r4, Y+16	; 0x10
    29c6:	5f 84       	ldd	r5, Y+15	; 0x0f
    29c8:	6e 84       	ldd	r6, Y+14	; 0x0e
    29ca:	7d 84       	ldd	r7, Y+13	; 0x0d
    29cc:	8c 84       	ldd	r8, Y+12	; 0x0c
    29ce:	9b 84       	ldd	r9, Y+11	; 0x0b
    29d0:	aa 84       	ldd	r10, Y+10	; 0x0a
    29d2:	b9 84       	ldd	r11, Y+9	; 0x09
    29d4:	c8 84       	ldd	r12, Y+8	; 0x08
    29d6:	df 80       	ldd	r13, Y+7	; 0x07
    29d8:	ee 80       	ldd	r14, Y+6	; 0x06
    29da:	fd 80       	ldd	r15, Y+5	; 0x05
    29dc:	0c 81       	ldd	r16, Y+4	; 0x04
    29de:	1b 81       	ldd	r17, Y+3	; 0x03
    29e0:	aa 81       	ldd	r26, Y+2	; 0x02
    29e2:	b9 81       	ldd	r27, Y+1	; 0x01
    29e4:	ce 0f       	add	r28, r30
    29e6:	d1 1d       	adc	r29, r1
    29e8:	0f b6       	in	r0, 0x3f	; 63
    29ea:	f8 94       	cli
    29ec:	de bf       	out	0x3e, r29	; 62
    29ee:	0f be       	out	0x3f, r0	; 63
    29f0:	cd bf       	out	0x3d, r28	; 61
    29f2:	ed 01       	movw	r28, r26
    29f4:	08 95       	ret

000029f6 <_exit>:
    29f6:	f8 94       	cli

000029f8 <__stop_program>:
    29f8:	ff cf       	rjmp	.-2      	; 0x29f8 <__stop_program>
