
small os.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000d56  00000dea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004bc  00800074  00800074  00000dfe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dfe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ef7  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf8  00000000  00000000  00002fab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012c2  00000000  00000000  00003ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000057c  00000000  00000000  00004f68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c62  00000000  00000000  000054e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001342  00000000  00000000  00006146  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00007488  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__vector_1>
   8:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__vector_2>
   c:	0c 94 c8 02 	jmp	0x590	; 0x590 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 86 03 	jmp	0x70c	; 0x70c <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	25 e0       	ldi	r18, 0x05	; 5
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 33       	cpi	r26, 0x30	; 48
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <main>
  8a:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TASK_1>:

void TASK_3(void)
{
	//SOS_deinit();
	SOS_delete_task(2);
	LED_off(LED_1);
  92:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <st_gc_ledConfig>
  96:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <st_gc_ledConfig+0x1>
  9a:	0e 94 cb 00 	call	0x196	; 0x196 <LED_toggle>
  9e:	08 95       	ret

000000a0 <TASK_2>:
  a0:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <st_gc_ledConfig+0x2>
  a4:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <st_gc_ledConfig+0x3>
  a8:	0e 94 cb 00 	call	0x196	; 0x196 <LED_toggle>
  ac:	08 95       	ret

000000ae <APP_ext_int0_cbf>:
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	83 e3       	ldi	r24, 0x33	; 51
  b4:	94 e0       	ldi	r25, 0x04	; 4
  b6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 77 05 	call	0xaee	; 0xaee <SOS_change_state>
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	0e 94 c8 03 	call	0x790	; 0x790 <EXT_INTERRUPT_MANAGER_disable>
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 c5 03 	call	0x78a	; 0x78a <EXT_INTERRUPT_MANAGER_enable>
  d0:	c3 e6       	ldi	r28, 0x63	; 99
  d2:	d0 e0       	ldi	r29, 0x00	; 0
  d4:	88 81       	ld	r24, Y
  d6:	99 81       	ldd	r25, Y+1	; 0x01
  d8:	0e 94 c4 00 	call	0x188	; 0x188 <LED_off>
  dc:	8a 81       	ldd	r24, Y+2	; 0x02
  de:	9b 81       	ldd	r25, Y+3	; 0x03
  e0:	0e 94 c4 00 	call	0x188	; 0x188 <LED_off>
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <APP_wake_up_cbf>:
  ea:	83 ef       	ldi	r24, 0xF3	; 243
  ec:	93 e0       	ldi	r25, 0x03	; 3
  ee:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	0e 94 77 05 	call	0xaee	; 0xaee <SOS_change_state>
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 c5 03 	call	0x78a	; 0x78a <EXT_INTERRUPT_MANAGER_enable>
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	0e 94 c8 03 	call	0x790	; 0x790 <EXT_INTERRUPT_MANAGER_disable>
 108:	08 95       	ret

0000010a <APP_init>:
}

void APP_init(void)
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
	LED_init(LED_0);
 10e:	c3 e6       	ldi	r28, 0x63	; 99
 110:	d0 e0       	ldi	r29, 0x00	; 0
 112:	88 81       	ld	r24, Y
 114:	99 81       	ldd	r25, Y+1	; 0x01
 116:	0e 94 bd 00 	call	0x17a	; 0x17a <LED_init>
	LED_init(LED_1);
 11a:	8a 81       	ldd	r24, Y+2	; 0x02
 11c:	9b 81       	ldd	r25, Y+3	; 0x03
 11e:	0e 94 bd 00 	call	0x17a	; 0x17a <LED_init>
	SOS_create_task(
 122:	2c e2       	ldi	r18, 0x2C	; 44
 124:	31 e0       	ldi	r19, 0x01	; 1
 126:	41 e0       	ldi	r20, 0x01	; 1
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	89 e4       	ldi	r24, 0x49	; 73
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 67 04 	call	0x8ce	; 0x8ce <SOS_create_task>
	1,							// ID
	1,							// priority
	300							// period
	);
	
	SOS_create_task(
 132:	24 ef       	ldi	r18, 0xF4	; 244
 134:	31 e0       	ldi	r19, 0x01	; 1
 136:	43 e0       	ldi	r20, 0x03	; 3
 138:	62 e0       	ldi	r22, 0x02	; 2
 13a:	80 e5       	ldi	r24, 0x50	; 80
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 67 04 	call	0x8ce	; 0x8ce <SOS_create_task>
	TASK_3,						// Function name
	3,							// ID
	2,							// priority
	5000						// period
	);*/
	SOS_init();
 142:	0e 94 57 05 	call	0xaae	; 0xaae <SOS_init>
	EXT_INTERRUPT_MANAGER_init(EXT_0,APP_ext_int0_cbf);
 146:	67 e5       	ldi	r22, 0x57	; 87
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 b6 03 	call	0x76c	; 0x76c <EXT_INTERRUPT_MANAGER_init>
	EXT_INTERRUPT_MANAGER_init(EXT_1,APP_wake_up_cbf);
 150:	65 e7       	ldi	r22, 0x75	; 117
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	0e 94 b6 03 	call	0x76c	; 0x76c <EXT_INTERRUPT_MANAGER_init>
	sei();
 15a:	78 94       	sei
	EXT_INTERRUPT_MANAGER_enable(EXT_0);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 c5 03 	call	0x78a	; 0x78a <EXT_INTERRUPT_MANAGER_enable>
	EXT_INTERRUPT_MANAGER_enable(EXT_1);
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	0e 94 c5 03 	call	0x78a	; 0x78a <EXT_INTERRUPT_MANAGER_enable>
	//BUTTON_init(Button_Start);
	//SOS_wake_up(APP_wake_up_cbf);
	//PORTB = 7;
}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <APP_start>:

void APP_start(void)
{
	while(1)
	{
		(APP_runing_task)();
 16e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 172:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 176:	09 95       	icall
 178:	fa cf       	rjmp	.-12     	; 0x16e <APP_start>

0000017a <LED_init>:
	if (DIO_writePIN(led.port,led.pin,STD_HIGH) == DIO_E_OK)
	{
		return LED_ERROR_OK;
	}
	return LED_ERROR_NOT_OK;
}
 17a:	41 e0       	ldi	r20, 0x01	; 1
 17c:	69 2f       	mov	r22, r25
 17e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_init>
 182:	81 11       	cpse	r24, r1
 184:	85 e0       	ldi	r24, 0x05	; 5
 186:	08 95       	ret

00000188 <LED_off>:
 * @param led The LED configuration structure.
 *
 * @return LED_ERROR_OK if the operation is successful, otherwise LED_ERROR_NOT_OK.
 */
u8_ledError_t LED_off(st_ledConfig_t led){
	if (DIO_writePIN(led.port,led.pin,STD_LOW) == DIO_E_OK)
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	69 2f       	mov	r22, r25
 18c:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_writePIN>
 190:	81 11       	cpse	r24, r1
	{
		return LED_ERROR_OK;
	}
	return LED_ERROR_NOT_OK;
 192:	85 e0       	ldi	r24, 0x05	; 5
}
 194:	08 95       	ret

00000196 <LED_toggle>:
 * @param led The LED configuration structure.
 *
 * @return LED_ERROR_OK if the operation is successful, otherwise LED_ERROR_NOT_OK.
 */
u8_ledError_t LED_toggle(st_ledConfig_t led){
	if (DIO_togglePIN(led.port,led.pin) == DIO_E_OK)
 196:	69 2f       	mov	r22, r25
 198:	0e 94 c6 01 	call	0x38c	; 0x38c <DIO_togglePIN>
 19c:	81 11       	cpse	r24, r1
	{
		return LED_ERROR_OK;
	}
	return LED_ERROR_NOT_OK;
 19e:	85 e0       	ldi	r24, 0x05	; 5
}
 1a0:	08 95       	ret

000001a2 <main>:
#include "APP/app.h"


int main(void)
{
	APP_init();
 1a2:	0e 94 85 00 	call	0x10a	; 0x10a <APP_init>
	APP_start();
 1a6:	0e 94 b7 00 	call	0x16e	; 0x16e <APP_start>
	
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	08 95       	ret

000001b0 <DIO_init>:
			default:
			return DIO_InvalidPort;
			break;
		}
		return DIO_E_OK;
}
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	11 f1       	breq	.+68     	; 0x1f8 <DIO_init+0x48>
 1b4:	30 f0       	brcs	.+12     	; 0x1c2 <DIO_init+0x12>
 1b6:	82 30       	cpi	r24, 0x02	; 2
 1b8:	d1 f1       	breq	.+116    	; 0x22e <DIO_init+0x7e>
 1ba:	83 30       	cpi	r24, 0x03	; 3
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <DIO_init+0x10>
 1be:	52 c0       	rjmp	.+164    	; 0x264 <DIO_init+0xb4>
 1c0:	6c c0       	rjmp	.+216    	; 0x29a <DIO_init+0xea>
 1c2:	41 11       	cpse	r20, r1
 1c4:	0d c0       	rjmp	.+26     	; 0x1e0 <DIO_init+0x30>
 1c6:	2a b3       	in	r18, 0x1a	; 26
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_init+0x22>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_init+0x1e>
 1d6:	80 95       	com	r24
 1d8:	82 23       	and	r24, r18
 1da:	8a bb       	out	0x1a, r24	; 26
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	08 95       	ret
 1e0:	2a b3       	in	r18, 0x1a	; 26
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_init+0x3c>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_init+0x38>
 1f0:	82 2b       	or	r24, r18
 1f2:	8a bb       	out	0x1a, r24	; 26
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	08 95       	ret
 1f8:	41 11       	cpse	r20, r1
 1fa:	0d c0       	rjmp	.+26     	; 0x216 <DIO_init+0x66>
 1fc:	27 b3       	in	r18, 0x17	; 23
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_init+0x58>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_init+0x54>
 20c:	80 95       	com	r24
 20e:	82 23       	and	r24, r18
 210:	87 bb       	out	0x17, r24	; 23
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	08 95       	ret
 216:	27 b3       	in	r18, 0x17	; 23
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_init+0x72>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_init+0x6e>
 226:	82 2b       	or	r24, r18
 228:	87 bb       	out	0x17, r24	; 23
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	08 95       	ret
 22e:	41 11       	cpse	r20, r1
 230:	0d c0       	rjmp	.+26     	; 0x24c <DIO_init+0x9c>
 232:	24 b3       	in	r18, 0x14	; 20
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_init+0x8e>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_init+0x8a>
 242:	80 95       	com	r24
 244:	82 23       	and	r24, r18
 246:	84 bb       	out	0x14, r24	; 20
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	08 95       	ret
 24c:	24 b3       	in	r18, 0x14	; 20
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_init+0xa8>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_init+0xa4>
 25c:	82 2b       	or	r24, r18
 25e:	84 bb       	out	0x14, r24	; 20
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	08 95       	ret
 264:	41 11       	cpse	r20, r1
 266:	0d c0       	rjmp	.+26     	; 0x282 <DIO_init+0xd2>
 268:	21 b3       	in	r18, 0x11	; 17
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_init+0xc4>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_init+0xc0>
 278:	80 95       	com	r24
 27a:	82 23       	and	r24, r18
 27c:	81 bb       	out	0x11, r24	; 17
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	08 95       	ret
 282:	21 b3       	in	r18, 0x11	; 17
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_init+0xde>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_init+0xda>
 292:	82 2b       	or	r24, r18
 294:	81 bb       	out	0x11, r24	; 17
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	08 95       	ret
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	08 95       	ret

0000029e <DIO_writePIN>:
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	11 f1       	breq	.+68     	; 0x2e6 <DIO_writePIN+0x48>
 2a2:	30 f0       	brcs	.+12     	; 0x2b0 <DIO_writePIN+0x12>
 2a4:	82 30       	cpi	r24, 0x02	; 2
 2a6:	d1 f1       	breq	.+116    	; 0x31c <DIO_writePIN+0x7e>
 2a8:	83 30       	cpi	r24, 0x03	; 3
 2aa:	09 f4       	brne	.+2      	; 0x2ae <DIO_writePIN+0x10>
 2ac:	52 c0       	rjmp	.+164    	; 0x352 <DIO_writePIN+0xb4>
 2ae:	6c c0       	rjmp	.+216    	; 0x388 <DIO_writePIN+0xea>
 2b0:	41 30       	cpi	r20, 0x01	; 1
 2b2:	69 f4       	brne	.+26     	; 0x2ce <DIO_writePIN+0x30>
 2b4:	2b b3       	in	r18, 0x1b	; 27
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_writePIN+0x22>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_writePIN+0x1e>
 2c4:	80 95       	com	r24
 2c6:	82 23       	and	r24, r18
 2c8:	8b bb       	out	0x1b, r24	; 27
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	08 95       	ret
 2ce:	2b b3       	in	r18, 0x1b	; 27
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_writePIN+0x3c>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	6a 95       	dec	r22
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_writePIN+0x38>
 2de:	82 2b       	or	r24, r18
 2e0:	8b bb       	out	0x1b, r24	; 27
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	08 95       	ret
 2e6:	41 30       	cpi	r20, 0x01	; 1
 2e8:	69 f4       	brne	.+26     	; 0x304 <DIO_writePIN+0x66>
 2ea:	28 b3       	in	r18, 0x18	; 24
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_writePIN+0x58>
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	6a 95       	dec	r22
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_writePIN+0x54>
 2fa:	80 95       	com	r24
 2fc:	82 23       	and	r24, r18
 2fe:	88 bb       	out	0x18, r24	; 24
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	08 95       	ret
 304:	28 b3       	in	r18, 0x18	; 24
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_writePIN+0x72>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_writePIN+0x6e>
 314:	82 2b       	or	r24, r18
 316:	88 bb       	out	0x18, r24	; 24
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	08 95       	ret
 31c:	41 30       	cpi	r20, 0x01	; 1
 31e:	69 f4       	brne	.+26     	; 0x33a <DIO_writePIN+0x9c>
 320:	25 b3       	in	r18, 0x15	; 21
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_writePIN+0x8e>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_writePIN+0x8a>
 330:	80 95       	com	r24
 332:	82 23       	and	r24, r18
 334:	85 bb       	out	0x15, r24	; 21
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	08 95       	ret
 33a:	25 b3       	in	r18, 0x15	; 21
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_writePIN+0xa8>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_writePIN+0xa4>
 34a:	82 2b       	or	r24, r18
 34c:	85 bb       	out	0x15, r24	; 21
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	08 95       	ret
 352:	41 30       	cpi	r20, 0x01	; 1
 354:	69 f4       	brne	.+26     	; 0x370 <DIO_writePIN+0xd2>
 356:	22 b3       	in	r18, 0x12	; 18
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_writePIN+0xc4>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	6a 95       	dec	r22
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_writePIN+0xc0>
 366:	80 95       	com	r24
 368:	82 23       	and	r24, r18
 36a:	82 bb       	out	0x12, r24	; 18
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	08 95       	ret
 370:	22 b3       	in	r18, 0x12	; 18
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_writePIN+0xde>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_writePIN+0xda>
 380:	82 2b       	or	r24, r18
 382:	82 bb       	out	0x12, r24	; 18
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	08 95       	ret
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	08 95       	ret

0000038c <DIO_togglePIN>:
	@param port The port to which the pin belongs (porta, portb, portc, or portd).
	@param pin The pin number to be toggled.
	@return DIO_E_OK if the toggle operation is successful, otherwise DIO_InvalidPort.
*/
u8_dioErrors_t DIO_togglePIN (en_dioPorts_t port, en_dioPins_t pin){
	switch(port){
 38c:	81 30       	cpi	r24, 0x01	; 1
 38e:	91 f0       	breq	.+36     	; 0x3b4 <DIO_togglePIN+0x28>
 390:	28 f0       	brcs	.+10     	; 0x39c <DIO_togglePIN+0x10>
 392:	82 30       	cpi	r24, 0x02	; 2
 394:	d9 f0       	breq	.+54     	; 0x3cc <DIO_togglePIN+0x40>
 396:	83 30       	cpi	r24, 0x03	; 3
 398:	29 f1       	breq	.+74     	; 0x3e4 <DIO_togglePIN+0x58>
 39a:	30 c0       	rjmp	.+96     	; 0x3fc <DIO_togglePIN+0x70>
		case porta:
			TOGGLE_BIT(WR_PORT_A,pin);
 39c:	2b b3       	in	r18, 0x1b	; 27
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_togglePIN+0x1c>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_togglePIN+0x18>
 3ac:	82 27       	eor	r24, r18
 3ae:	8b bb       	out	0x1b, r24	; 27
		break;
		default:
		return DIO_InvalidPort;
		break;
	}
	return DIO_E_OK;
 3b0:	80 e0       	ldi	r24, 0x00	; 0
*/
u8_dioErrors_t DIO_togglePIN (en_dioPorts_t port, en_dioPins_t pin){
	switch(port){
		case porta:
			TOGGLE_BIT(WR_PORT_A,pin);
			break;
 3b2:	08 95       	ret
		case portb:
			TOGGLE_BIT(WR_PORT_B,pin);
 3b4:	28 b3       	in	r18, 0x18	; 24
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_togglePIN+0x34>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	6a 95       	dec	r22
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_togglePIN+0x30>
 3c4:	82 27       	eor	r24, r18
 3c6:	88 bb       	out	0x18, r24	; 24
		break;
		default:
		return DIO_InvalidPort;
		break;
	}
	return DIO_E_OK;
 3c8:	80 e0       	ldi	r24, 0x00	; 0
		case porta:
			TOGGLE_BIT(WR_PORT_A,pin);
			break;
		case portb:
			TOGGLE_BIT(WR_PORT_B,pin);
		break;
 3ca:	08 95       	ret
		case portc:
			TOGGLE_BIT(WR_PORT_C,pin);
 3cc:	25 b3       	in	r18, 0x15	; 21
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_togglePIN+0x4c>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	6a 95       	dec	r22
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_togglePIN+0x48>
 3dc:	82 27       	eor	r24, r18
 3de:	85 bb       	out	0x15, r24	; 21
		break;
		default:
		return DIO_InvalidPort;
		break;
	}
	return DIO_E_OK;
 3e0:	80 e0       	ldi	r24, 0x00	; 0
		case portb:
			TOGGLE_BIT(WR_PORT_B,pin);
		break;
		case portc:
			TOGGLE_BIT(WR_PORT_C,pin);
		break;
 3e2:	08 95       	ret
		case portd:
			TOGGLE_BIT(WR_PORT_D,pin);
 3e4:	22 b3       	in	r18, 0x12	; 18
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_togglePIN+0x64>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	6a 95       	dec	r22
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_togglePIN+0x60>
 3f4:	82 27       	eor	r24, r18
 3f6:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_InvalidPort;
		break;
	}
	return DIO_E_OK;
 3f8:	80 e0       	ldi	r24, 0x00	; 0
		case portc:
			TOGGLE_BIT(WR_PORT_C,pin);
		break;
		case portd:
			TOGGLE_BIT(WR_PORT_D,pin);
		break;
 3fa:	08 95       	ret
		default:
		return DIO_InvalidPort;
 3fc:	82 e0       	ldi	r24, 0x02	; 2
		break;
	}
	return DIO_E_OK;
}
 3fe:	08 95       	ret

00000400 <EXT_INTERRUPT_init>:
 */
u8_interruptError_t EXT_INTERRUPT_init(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
	
	// Check if the external interrupt number is within valid range
	if(en_ext_interrupt_num < INVALID_EXT_INT){
 400:	83 30       	cpi	r24, 0x03	; 3
 402:	38 f5       	brcc	.+78     	; 0x452 <EXT_INTERRUPT_init+0x52>
		switch(en_ext_interrupt_num){
 404:	81 30       	cpi	r24, 0x01	; 1
 406:	79 f0       	breq	.+30     	; 0x426 <EXT_INTERRUPT_init+0x26>
 408:	18 f0       	brcs	.+6      	; 0x410 <EXT_INTERRUPT_init+0x10>
 40a:	82 30       	cpi	r24, 0x02	; 2
 40c:	b9 f0       	breq	.+46     	; 0x43c <EXT_INTERRUPT_init+0x3c>
 40e:	23 c0       	rjmp	.+70     	; 0x456 <EXT_INTERRUPT_init+0x56>
			case EXT_0:
				sei();	
 410:	78 94       	sei
				DIO_init (portd, pin2, STD_INPUT);
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	62 e0       	ldi	r22, 0x02	; 2
 416:	83 e0       	ldi	r24, 0x03	; 3
 418:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_init>
				MCUCR_ADD |= ( arr_en_gc_edge_detection[EXT_0]<<INT0_MODE_INDEX);
 41c:	85 b7       	in	r24, 0x35	; 53
 41e:	82 60       	ori	r24, 0x02	; 2
 420:	85 bf       	out	0x35, r24	; 53
 *   u8_interruptError_t: Initialization status
 *     - EXT_INT_E_OK: External interrupt initialized successfully
 *     - EXT_INT_WRONG_EXT_NUM: Invalid external interrupt number
 */
u8_interruptError_t EXT_INTERRUPT_init(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 422:	81 e0       	ldi	r24, 0x01	; 1
		switch(en_ext_interrupt_num){
			case EXT_0:
				sei();	
				DIO_init (portd, pin2, STD_INPUT);
				MCUCR_ADD |= ( arr_en_gc_edge_detection[EXT_0]<<INT0_MODE_INDEX);
				break;
 424:	08 95       	ret
			case EXT_1:
				sei();
 426:	78 94       	sei
				DIO_init (portd, pin3, STD_INPUT);
 428:	40 e0       	ldi	r20, 0x00	; 0
 42a:	63 e0       	ldi	r22, 0x03	; 3
 42c:	83 e0       	ldi	r24, 0x03	; 3
 42e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_init>
				MCUCR_ADD |= ( arr_en_gc_edge_detection[EXT_1]<<INT1_MODE_INDEX);
 432:	85 b7       	in	r24, 0x35	; 53
 434:	8c 60       	ori	r24, 0x0C	; 12
 436:	85 bf       	out	0x35, r24	; 53
 *   u8_interruptError_t: Initialization status
 *     - EXT_INT_E_OK: External interrupt initialized successfully
 *     - EXT_INT_WRONG_EXT_NUM: Invalid external interrupt number
 */
u8_interruptError_t EXT_INTERRUPT_init(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 438:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case EXT_1:
				sei();
				DIO_init (portd, pin3, STD_INPUT);
				MCUCR_ADD |= ( arr_en_gc_edge_detection[EXT_1]<<INT1_MODE_INDEX);
				break;
 43a:	08 95       	ret
			case EXT_2:
				sei();
 43c:	78 94       	sei
				DIO_init (portb, pin2, STD_INPUT);
 43e:	40 e0       	ldi	r20, 0x00	; 0
 440:	62 e0       	ldi	r22, 0x02	; 2
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_init>
				MCUCSR_ADD |= ( arr_en_gc_edge_detection[EXT_2]<<INT2_MODE_INDEX);
 448:	84 b7       	in	r24, 0x34	; 52
 44a:	80 68       	ori	r24, 0x80	; 128
 44c:	84 bf       	out	0x34, r24	; 52
 *   u8_interruptError_t: Initialization status
 *     - EXT_INT_E_OK: External interrupt initialized successfully
 *     - EXT_INT_WRONG_EXT_NUM: Invalid external interrupt number
 */
u8_interruptError_t EXT_INTERRUPT_init(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 44e:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case EXT_2:
				sei();
				DIO_init (portb, pin2, STD_INPUT);
				MCUCSR_ADD |= ( arr_en_gc_edge_detection[EXT_2]<<INT2_MODE_INDEX);
				break;
 450:	08 95       	ret
				ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
				break;
		}
	}
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
 452:	82 e0       	ldi	r24, 0x02	; 2
 454:	08 95       	ret
				sei();
				DIO_init (portb, pin2, STD_INPUT);
				MCUCSR_ADD |= ( arr_en_gc_edge_detection[EXT_2]<<INT2_MODE_INDEX);
				break;
			default:
				ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
 456:	82 e0       	ldi	r24, 0x02	; 2
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
	}
	
	return ret_state; // Return the initialization status
}
 458:	08 95       	ret

0000045a <EXT_INTERRUPT_enable>:
 */
u8_interruptError_t EXT_INTERRUPT_enable(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
	
	// Check if the external interrupt number is within valid range
	if(en_ext_interrupt_num < INVALID_EXT_INT){
 45a:	83 30       	cpi	r24, 0x03	; 3
 45c:	a8 f4       	brcc	.+42     	; 0x488 <EXT_INTERRUPT_enable+0x2e>
		switch(en_ext_interrupt_num){
 45e:	81 30       	cpi	r24, 0x01	; 1
 460:	49 f0       	breq	.+18     	; 0x474 <EXT_INTERRUPT_enable+0x1a>
 462:	18 f0       	brcs	.+6      	; 0x46a <EXT_INTERRUPT_enable+0x10>
 464:	82 30       	cpi	r24, 0x02	; 2
 466:	59 f0       	breq	.+22     	; 0x47e <EXT_INTERRUPT_enable+0x24>
 468:	11 c0       	rjmp	.+34     	; 0x48c <EXT_INTERRUPT_enable+0x32>
			case EXT_0:
				SET_BIT(GICR_ADD,INT0_Globle);
 46a:	8b b7       	in	r24, 0x3b	; 59
 46c:	80 64       	ori	r24, 0x40	; 64
 46e:	8b bf       	out	0x3b, r24	; 59
 *   u8_interruptError_t: Enable status
 *     - EXT_INT_E_OK: External interrupt enabled successfully
 *     - EXT_INT_WRONG_EXT_NUM: Invalid external interrupt number
 */
u8_interruptError_t EXT_INTERRUPT_enable(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 470:	81 e0       	ldi	r24, 0x01	; 1
	// Check if the external interrupt number is within valid range
	if(en_ext_interrupt_num < INVALID_EXT_INT){
		switch(en_ext_interrupt_num){
			case EXT_0:
				SET_BIT(GICR_ADD,INT0_Globle);
				break;
 472:	08 95       	ret
			case EXT_1:
				SET_BIT(GICR_ADD,INT1_Globle);
 474:	8b b7       	in	r24, 0x3b	; 59
 476:	80 68       	ori	r24, 0x80	; 128
 478:	8b bf       	out	0x3b, r24	; 59
 *   u8_interruptError_t: Enable status
 *     - EXT_INT_E_OK: External interrupt enabled successfully
 *     - EXT_INT_WRONG_EXT_NUM: Invalid external interrupt number
 */
u8_interruptError_t EXT_INTERRUPT_enable(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 47a:	81 e0       	ldi	r24, 0x01	; 1
			case EXT_0:
				SET_BIT(GICR_ADD,INT0_Globle);
				break;
			case EXT_1:
				SET_BIT(GICR_ADD,INT1_Globle);
				break;
 47c:	08 95       	ret
			case EXT_2:
				SET_BIT(GICR_ADD,INT2_Globle);
 47e:	8b b7       	in	r24, 0x3b	; 59
 480:	80 62       	ori	r24, 0x20	; 32
 482:	8b bf       	out	0x3b, r24	; 59
 *   u8_interruptError_t: Enable status
 *     - EXT_INT_E_OK: External interrupt enabled successfully
 *     - EXT_INT_WRONG_EXT_NUM: Invalid external interrupt number
 */
u8_interruptError_t EXT_INTERRUPT_enable(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 484:	81 e0       	ldi	r24, 0x01	; 1
			case EXT_1:
				SET_BIT(GICR_ADD,INT1_Globle);
				break;
			case EXT_2:
				SET_BIT(GICR_ADD,INT2_Globle);
				break;
 486:	08 95       	ret
				ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
				break;
		}
	}
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
 488:	82 e0       	ldi	r24, 0x02	; 2
 48a:	08 95       	ret
				break;
			case EXT_2:
				SET_BIT(GICR_ADD,INT2_Globle);
				break;
			default:
				ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
 48c:	82 e0       	ldi	r24, 0x02	; 2
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
	}
	
	return ret_state; // Return the enable status
}
 48e:	08 95       	ret

00000490 <EXT_INTERRUPT_disable>:
 */
u8_interruptError_t EXT_INTERRUPT_disable(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
	
	// Check if the external interrupt number is within valid range
	if(en_ext_interrupt_num < INVALID_EXT_INT){
 490:	83 30       	cpi	r24, 0x03	; 3
 492:	a8 f4       	brcc	.+42     	; 0x4be <EXT_INTERRUPT_disable+0x2e>
		switch(en_ext_interrupt_num){
 494:	81 30       	cpi	r24, 0x01	; 1
 496:	49 f0       	breq	.+18     	; 0x4aa <EXT_INTERRUPT_disable+0x1a>
 498:	18 f0       	brcs	.+6      	; 0x4a0 <EXT_INTERRUPT_disable+0x10>
 49a:	82 30       	cpi	r24, 0x02	; 2
 49c:	59 f0       	breq	.+22     	; 0x4b4 <EXT_INTERRUPT_disable+0x24>
 49e:	11 c0       	rjmp	.+34     	; 0x4c2 <EXT_INTERRUPT_disable+0x32>
			case EXT_0:
				CLEAR_BIT(GICR_ADD,INT0_Globle);
 4a0:	8b b7       	in	r24, 0x3b	; 59
 4a2:	8f 7b       	andi	r24, 0xBF	; 191
 4a4:	8b bf       	out	0x3b, r24	; 59
 *   u8_interruptError_t: Disable status
 *     - EXT_INT_E_OK: External interrupt disabled successfully
 *     - EXT_INT_WRONG_EXT_NUM: Invalid external interrupt number
 */
u8_interruptError_t EXT_INTERRUPT_disable(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 4a6:	81 e0       	ldi	r24, 0x01	; 1
	// Check if the external interrupt number is within valid range
	if(en_ext_interrupt_num < INVALID_EXT_INT){
		switch(en_ext_interrupt_num){
			case EXT_0:
				CLEAR_BIT(GICR_ADD,INT0_Globle);
				break;
 4a8:	08 95       	ret
			case EXT_1:
				CLEAR_BIT(GICR_ADD,INT1_Globle);
 4aa:	8b b7       	in	r24, 0x3b	; 59
 4ac:	8f 77       	andi	r24, 0x7F	; 127
 4ae:	8b bf       	out	0x3b, r24	; 59
 *   u8_interruptError_t: Disable status
 *     - EXT_INT_E_OK: External interrupt disabled successfully
 *     - EXT_INT_WRONG_EXT_NUM: Invalid external interrupt number
 */
u8_interruptError_t EXT_INTERRUPT_disable(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 4b0:	81 e0       	ldi	r24, 0x01	; 1
			case EXT_0:
				CLEAR_BIT(GICR_ADD,INT0_Globle);
				break;
			case EXT_1:
				CLEAR_BIT(GICR_ADD,INT1_Globle);
				break;
 4b2:	08 95       	ret
			case EXT_2:
				CLEAR_BIT(GICR_ADD,INT2_Globle);
 4b4:	8b b7       	in	r24, 0x3b	; 59
 4b6:	8f 7d       	andi	r24, 0xDF	; 223
 4b8:	8b bf       	out	0x3b, r24	; 59
 *   u8_interruptError_t: Disable status
 *     - EXT_INT_E_OK: External interrupt disabled successfully
 *     - EXT_INT_WRONG_EXT_NUM: Invalid external interrupt number
 */
u8_interruptError_t EXT_INTERRUPT_disable(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 4ba:	81 e0       	ldi	r24, 0x01	; 1
			case EXT_1:
				CLEAR_BIT(GICR_ADD,INT1_Globle);
				break;
			case EXT_2:
				CLEAR_BIT(GICR_ADD,INT2_Globle);
				break;
 4bc:	08 95       	ret
				ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
				break;
		}
	}
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
 4be:	82 e0       	ldi	r24, 0x02	; 2
 4c0:	08 95       	ret
				break;
			case EXT_2:
				CLEAR_BIT(GICR_ADD,INT2_Globle);
				break;
			default:
				ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
 4c2:	82 e0       	ldi	r24, 0x02	; 2
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
	}
	
	return ret_state; // Return the disable status
}
 4c4:	08 95       	ret

000004c6 <EXT_INTERRUPT_set_callback_init>:
 */
u8_interruptError_t EXT_INTERRUPT_set_callback_init(en_ext_interrupt_num_t en_ext_interrupt_num, void(*callback)(void)){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
	
	// Check if the external interrupt number is within valid range
	if(en_ext_interrupt_num < INVALID_EXT_INT){
 4c6:	83 30       	cpi	r24, 0x03	; 3
 4c8:	68 f4       	brcc	.+26     	; 0x4e4 <EXT_INTERRUPT_set_callback_init+0x1e>
		if(callback != NULL){
 4ca:	61 15       	cp	r22, r1
 4cc:	71 05       	cpc	r23, r1
 4ce:	61 f0       	breq	.+24     	; 0x4e8 <EXT_INTERRUPT_set_callback_init+0x22>
			EXT_INT_callbacks[en_ext_interrupt_num] = callback; // Set the callback function pointer for the specified external interrupt
 4d0:	e8 2f       	mov	r30, r24
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	ee 0f       	add	r30, r30
 4d6:	ff 1f       	adc	r31, r31
 4d8:	ec 58       	subi	r30, 0x8C	; 140
 4da:	ff 4f       	sbci	r31, 0xFF	; 255
 4dc:	71 83       	std	Z+1, r23	; 0x01
 4de:	60 83       	st	Z, r22
 *     - EXT_INT_E_OK: Callback set successfully
 *     - EXT_INT_NULL_PTR: Null pointer provided for the callback
 *     - EXT_INT_WRONG_EXT_NUM: Invalid external interrupt number
 */
u8_interruptError_t EXT_INTERRUPT_set_callback_init(en_ext_interrupt_num_t en_ext_interrupt_num, void(*callback)(void)){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	08 95       	ret
		else{
			ret_state = EXT_INT_NULL_PTR; // Return error code EXT_INT_NULL_PTR for null pointer provided for the callback
		}
	}
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
 4e4:	82 e0       	ldi	r24, 0x02	; 2
 4e6:	08 95       	ret
	if(en_ext_interrupt_num < INVALID_EXT_INT){
		if(callback != NULL){
			EXT_INT_callbacks[en_ext_interrupt_num] = callback; // Set the callback function pointer for the specified external interrupt
		}
		else{
			ret_state = EXT_INT_NULL_PTR; // Return error code EXT_INT_NULL_PTR for null pointer provided for the callback
 4e8:	83 e0       	ldi	r24, 0x03	; 3
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
	}
	
	return ret_state; // Return the set callback status
}
 4ea:	08 95       	ret

000004ec <__vector_1>:
 * Interrupt Service Routine: EXT_INT0
 * -----------------------------------
 * Executes the callback function for external interrupt 0.
 * If the callback function is not set, it returns immediately.
 */
ISR(EXT_INT0){
 4ec:	1f 92       	push	r1
 4ee:	0f 92       	push	r0
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	0f 92       	push	r0
 4f4:	11 24       	eor	r1, r1
 4f6:	2f 93       	push	r18
 4f8:	3f 93       	push	r19
 4fa:	4f 93       	push	r20
 4fc:	5f 93       	push	r21
 4fe:	6f 93       	push	r22
 500:	7f 93       	push	r23
 502:	8f 93       	push	r24
 504:	9f 93       	push	r25
 506:	af 93       	push	r26
 508:	bf 93       	push	r27
 50a:	ef 93       	push	r30
 50c:	ff 93       	push	r31
	if(EXT_INT_callbacks[EXT_0] != NULL){
 50e:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <__data_end>
 512:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <__data_end+0x1>
 516:	30 97       	sbiw	r30, 0x00	; 0
 518:	09 f0       	breq	.+2      	; 0x51c <__vector_1+0x30>
		(*EXT_INT_callbacks[EXT_0])(); // Call the callback function for external interrupt 0
 51a:	09 95       	icall
	}
	else{
		return; // If callback function is not set, return immediately
	}
}
 51c:	ff 91       	pop	r31
 51e:	ef 91       	pop	r30
 520:	bf 91       	pop	r27
 522:	af 91       	pop	r26
 524:	9f 91       	pop	r25
 526:	8f 91       	pop	r24
 528:	7f 91       	pop	r23
 52a:	6f 91       	pop	r22
 52c:	5f 91       	pop	r21
 52e:	4f 91       	pop	r20
 530:	3f 91       	pop	r19
 532:	2f 91       	pop	r18
 534:	0f 90       	pop	r0
 536:	0f be       	out	0x3f, r0	; 63
 538:	0f 90       	pop	r0
 53a:	1f 90       	pop	r1
 53c:	18 95       	reti

0000053e <__vector_2>:
 * Interrupt Service Routine: EXT_INT1
 * -----------------------------------
 * Executes the callback function for external interrupt 1.
 * If the callback function is not set, it returns immediately.
 */
ISR(EXT_INT1){
 53e:	1f 92       	push	r1
 540:	0f 92       	push	r0
 542:	0f b6       	in	r0, 0x3f	; 63
 544:	0f 92       	push	r0
 546:	11 24       	eor	r1, r1
 548:	2f 93       	push	r18
 54a:	3f 93       	push	r19
 54c:	4f 93       	push	r20
 54e:	5f 93       	push	r21
 550:	6f 93       	push	r22
 552:	7f 93       	push	r23
 554:	8f 93       	push	r24
 556:	9f 93       	push	r25
 558:	af 93       	push	r26
 55a:	bf 93       	push	r27
 55c:	ef 93       	push	r30
 55e:	ff 93       	push	r31
	if(EXT_INT_callbacks[EXT_1] != NULL){
 560:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <__data_end+0x2>
 564:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <__data_end+0x3>
 568:	30 97       	sbiw	r30, 0x00	; 0
 56a:	09 f0       	breq	.+2      	; 0x56e <__vector_2+0x30>
		(*EXT_INT_callbacks[EXT_1])(); // Call the callback function for external interrupt 1
 56c:	09 95       	icall
	}
	else{
		return; // If callback function is not set, return immediately
	}
}
 56e:	ff 91       	pop	r31
 570:	ef 91       	pop	r30
 572:	bf 91       	pop	r27
 574:	af 91       	pop	r26
 576:	9f 91       	pop	r25
 578:	8f 91       	pop	r24
 57a:	7f 91       	pop	r23
 57c:	6f 91       	pop	r22
 57e:	5f 91       	pop	r21
 580:	4f 91       	pop	r20
 582:	3f 91       	pop	r19
 584:	2f 91       	pop	r18
 586:	0f 90       	pop	r0
 588:	0f be       	out	0x3f, r0	; 63
 58a:	0f 90       	pop	r0
 58c:	1f 90       	pop	r1
 58e:	18 95       	reti

00000590 <__vector_3>:
 * Interrupt Service Routine: EXT_INT2
 * -----------------------------------
 * Executes the callback function for external interrupt 2.
 * If the callback function is not set, it returns immediately.
 */
ISR(EXT_INT2){
 590:	1f 92       	push	r1
 592:	0f 92       	push	r0
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	0f 92       	push	r0
 598:	11 24       	eor	r1, r1
 59a:	2f 93       	push	r18
 59c:	3f 93       	push	r19
 59e:	4f 93       	push	r20
 5a0:	5f 93       	push	r21
 5a2:	6f 93       	push	r22
 5a4:	7f 93       	push	r23
 5a6:	8f 93       	push	r24
 5a8:	9f 93       	push	r25
 5aa:	af 93       	push	r26
 5ac:	bf 93       	push	r27
 5ae:	ef 93       	push	r30
 5b0:	ff 93       	push	r31
	if(EXT_INT_callbacks[EXT_2] != NULL){
 5b2:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__data_end+0x4>
 5b6:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__data_end+0x5>
 5ba:	30 97       	sbiw	r30, 0x00	; 0
 5bc:	09 f0       	breq	.+2      	; 0x5c0 <__vector_3+0x30>
		(*EXT_INT_callbacks[EXT_2])(); // Call the callback function for external interrupt 2
 5be:	09 95       	icall
	}
	else{
		return; // If callback function is not set, return immediately
	}
}
 5c0:	ff 91       	pop	r31
 5c2:	ef 91       	pop	r30
 5c4:	bf 91       	pop	r27
 5c6:	af 91       	pop	r26
 5c8:	9f 91       	pop	r25
 5ca:	8f 91       	pop	r24
 5cc:	7f 91       	pop	r23
 5ce:	6f 91       	pop	r22
 5d0:	5f 91       	pop	r21
 5d2:	4f 91       	pop	r20
 5d4:	3f 91       	pop	r19
 5d6:	2f 91       	pop	r18
 5d8:	0f 90       	pop	r0
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	0f 90       	pop	r0
 5de:	1f 90       	pop	r1
 5e0:	18 95       	reti

000005e2 <TIMER2_enuInit>:
	enu_timerStatus_t errorStatus = TIMER_OK;

	CLEAR_BIT(TIMSK, TOIE2);

	return errorStatus;
}
 5e2:	84 30       	cpi	r24, 0x04	; 4
 5e4:	48 f5       	brcc	.+82     	; 0x638 <TIMER2_enuInit+0x56>
 5e6:	14 bc       	out	0x24, r1	; 36
 5e8:	81 30       	cpi	r24, 0x01	; 1
 5ea:	71 f0       	breq	.+28     	; 0x608 <TIMER2_enuInit+0x26>
 5ec:	28 f0       	brcs	.+10     	; 0x5f8 <TIMER2_enuInit+0x16>
 5ee:	82 30       	cpi	r24, 0x02	; 2
 5f0:	99 f0       	breq	.+38     	; 0x618 <TIMER2_enuInit+0x36>
 5f2:	83 30       	cpi	r24, 0x03	; 3
 5f4:	c9 f0       	breq	.+50     	; 0x628 <TIMER2_enuInit+0x46>
 5f6:	22 c0       	rjmp	.+68     	; 0x63c <TIMER2_enuInit+0x5a>
 5f8:	85 b5       	in	r24, 0x25	; 37
 5fa:	87 7f       	andi	r24, 0xF7	; 247
 5fc:	85 bd       	out	0x25, r24	; 37
 5fe:	85 b5       	in	r24, 0x25	; 37
 600:	8f 7b       	andi	r24, 0xBF	; 191
 602:	85 bd       	out	0x25, r24	; 37
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	08 95       	ret
 608:	85 b5       	in	r24, 0x25	; 37
 60a:	87 7f       	andi	r24, 0xF7	; 247
 60c:	85 bd       	out	0x25, r24	; 37
 60e:	85 b5       	in	r24, 0x25	; 37
 610:	80 64       	ori	r24, 0x40	; 64
 612:	85 bd       	out	0x25, r24	; 37
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	08 95       	ret
 618:	85 b5       	in	r24, 0x25	; 37
 61a:	88 60       	ori	r24, 0x08	; 8
 61c:	85 bd       	out	0x25, r24	; 37
 61e:	85 b5       	in	r24, 0x25	; 37
 620:	8f 7b       	andi	r24, 0xBF	; 191
 622:	85 bd       	out	0x25, r24	; 37
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	08 95       	ret
 628:	85 b5       	in	r24, 0x25	; 37
 62a:	88 60       	ori	r24, 0x08	; 8
 62c:	85 bd       	out	0x25, r24	; 37
 62e:	85 b5       	in	r24, 0x25	; 37
 630:	80 64       	ori	r24, 0x40	; 64
 632:	85 bd       	out	0x25, r24	; 37
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	08 95       	ret
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	08 95       	ret
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	08 95       	ret

00000640 <TIMER2_enuSetPrescallar>:
 640:	88 30       	cpi	r24, 0x08	; 8
 642:	70 f4       	brcc	.+28     	; 0x660 <TIMER2_enuSetPrescallar+0x20>
 644:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <gl_enu_prescaller>
 648:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <gl_u8_timerStatus>
 64c:	91 30       	cpi	r25, 0x01	; 1
 64e:	51 f4       	brne	.+20     	; 0x664 <TIMER2_enuSetPrescallar+0x24>
 650:	95 b5       	in	r25, 0x25	; 37
 652:	98 7f       	andi	r25, 0xF8	; 248
 654:	89 2b       	or	r24, r25
 656:	95 b5       	in	r25, 0x25	; 37
 658:	89 2b       	or	r24, r25
 65a:	85 bd       	out	0x25, r24	; 37
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	08 95       	ret
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	08 95       	ret
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	08 95       	ret

00000668 <TIMER2_enuOVFIrqEnable>:
 668:	88 b7       	in	r24, 0x38	; 56
 66a:	80 64       	ori	r24, 0x40	; 64
 66c:	88 bf       	out	0x38, r24	; 56
 66e:	89 b7       	in	r24, 0x39	; 57
 670:	80 64       	ori	r24, 0x40	; 64
 672:	89 bf       	out	0x39, r24	; 57
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	08 95       	ret

00000678 <TIMER2_enuStart>:
/*************************************************************************************************************/
enu_timerStatus_t TIMER2_enuStart(void)
{
	enu_timerStatus_t errorStatus = TIMER_OK;

	TCCR2 |=  gl_enu_prescaller << PRESCALLER_OFFSET;
 678:	95 b5       	in	r25, 0x25	; 37
 67a:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <gl_enu_prescaller>
 67e:	89 2b       	or	r24, r25
 680:	85 bd       	out	0x25, r24	; 37
	gl_u8_timerStatus  = RUNNING;
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <gl_u8_timerStatus>

	return errorStatus;
}
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	08 95       	ret

0000068c <TIMER2_vidStop>:
/*************************************************************************************************************/
enu_timerStatus_t TIMER2_vidStop(void)
{
	enu_timerStatus_t errorStatus = TIMER_OK;

	TCCR2 &=  PRESCALLER_CLR_MSK;
 68c:	85 b5       	in	r24, 0x25	; 37
 68e:	88 7f       	andi	r24, 0xF8	; 248
 690:	85 bd       	out	0x25, r24	; 37
	gl_u8_timerStatus = STOPPED;
 692:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <gl_u8_timerStatus>

	return errorStatus;
}
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	08 95       	ret

0000069a <TIMER2_enuSetTime_ms>:
/*************************************************************************************************************/
enu_timerStatus_t TIMER2_enuSetTime_ms(uint8_t u32_time_ms)
{
 69a:	cf 92       	push	r12
 69c:	df 92       	push	r13
 69e:	ef 92       	push	r14
 6a0:	ff 92       	push	r15
 6a2:	cf 93       	push	r28
 6a4:	c8 2f       	mov	r28, r24
	enu_timerStatus_t errorStatus = TIMER_OK;
	uint8_t desired_ticks;
	float32_t tick_time_ms;
	if( u32_time_ms < MAX_TIM_MS )
	{
		tick_time_ms = ((float32_t)prescaller_map[gl_enu_prescaller]) / ((uint32_t)F_CPU / 1000U)  ;
 6a6:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <gl_enu_prescaller>
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	ee 0f       	add	r30, r30
 6ae:	ff 1f       	adc	r31, r31
 6b0:	e9 59       	subi	r30, 0x99	; 153
 6b2:	ff 4f       	sbci	r31, 0xFF	; 255
 6b4:	60 81       	ld	r22, Z
 6b6:	71 81       	ldd	r23, Z+1	; 0x01
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	0e 94 1b 06 	call	0xc36	; 0xc36 <__floatunsisf>
 6c0:	20 e0       	ldi	r18, 0x00	; 0
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	4a ef       	ldi	r20, 0xFA	; 250
 6c6:	55 e4       	ldi	r21, 0x45	; 69
 6c8:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__divsf3>
 6cc:	6b 01       	movw	r12, r22
 6ce:	7c 01       	movw	r14, r24
		desired_ticks = u32_time_ms / tick_time_ms;
 6d0:	6c 2f       	mov	r22, r28
 6d2:	70 e0       	ldi	r23, 0x00	; 0
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__floatsisf>
 6dc:	a7 01       	movw	r20, r14
 6de:	96 01       	movw	r18, r12
 6e0:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__divsf3>
 6e4:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__fixunssfsi>
		{
			gl_u8_ovf = 1;
		}
		else if(desired_ticks < OVF_TICKS)
		{
			gl_u8_preload = OVF_TICKS - desired_ticks;
 6e8:	61 95       	neg	r22
 6ea:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <gl_u8_preload>
			TCNT2 = gl_u8_preload;
 6ee:	64 bd       	out	0x24, r22	; 36
			errorStatus = TIMER_NOK;
		}


		return errorStatus;
	}
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	cf 91       	pop	r28
 6f4:	ff 90       	pop	r15
 6f6:	ef 90       	pop	r14
 6f8:	df 90       	pop	r13
 6fa:	cf 90       	pop	r12
 6fc:	08 95       	ret

000006fe <TIMER2_vidSetcbf_OVF>:

/*************************************************************************************************************/
void TIMER2_vidSetcbf_OVF(ptrFunc cbf)
{
	if (cbf != NULL)
 6fe:	00 97       	sbiw	r24, 0x00	; 0
 700:	21 f0       	breq	.+8      	; 0x70a <TIMER2_vidSetcbf_OVF+0xc>
	{
		gl_CallFunc = cbf;
 702:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <gl_CallFunc+0x1>
 706:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <gl_CallFunc>
 70a:	08 95       	ret

0000070c <__vector_5>:

/*************************************************************************************************************
 * 							ISR Interrupt Handling
 ************************************************************************************************************/
ISR(TIMER2_OVF)
{
 70c:	1f 92       	push	r1
 70e:	0f 92       	push	r0
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	0f 92       	push	r0
 714:	11 24       	eor	r1, r1
 716:	2f 93       	push	r18
 718:	3f 93       	push	r19
 71a:	4f 93       	push	r20
 71c:	5f 93       	push	r21
 71e:	6f 93       	push	r22
 720:	7f 93       	push	r23
 722:	8f 93       	push	r24
 724:	9f 93       	push	r25
 726:	af 93       	push	r26
 728:	bf 93       	push	r27
 72a:	ef 93       	push	r30
 72c:	ff 93       	push	r31
	if (gl_CallFunc != NULL)
 72e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <gl_CallFunc>
 732:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <gl_CallFunc+0x1>
 736:	89 2b       	or	r24, r25
 738:	41 f0       	breq	.+16     	; 0x74a <__vector_5+0x3e>
	{
		TCNT2 = gl_u8_preload;
 73a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <gl_u8_preload>
 73e:	84 bd       	out	0x24, r24	; 36
		gl_CallFunc();
 740:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <gl_CallFunc>
 744:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <gl_CallFunc+0x1>
 748:	09 95       	icall
			TCNT2 = gl_u8_preload;
			gl_CallFunc();	
			
		}
	}*/
}
 74a:	ff 91       	pop	r31
 74c:	ef 91       	pop	r30
 74e:	bf 91       	pop	r27
 750:	af 91       	pop	r26
 752:	9f 91       	pop	r25
 754:	8f 91       	pop	r24
 756:	7f 91       	pop	r23
 758:	6f 91       	pop	r22
 75a:	5f 91       	pop	r21
 75c:	4f 91       	pop	r20
 75e:	3f 91       	pop	r19
 760:	2f 91       	pop	r18
 762:	0f 90       	pop	r0
 764:	0f be       	out	0x3f, r0	; 63
 766:	0f 90       	pop	r0
 768:	1f 90       	pop	r1
 76a:	18 95       	reti

0000076c <EXT_INTERRUPT_MANAGER_init>:
 *  Author: Mahmoud Sarhan
 */ 
#include "ext_interrupt_manager.h"

u8_interruptError_t EXT_INTERRUPT_MANAGER_init(en_ext_interrupt_num_t en_ext_interrupt_num,void(*callback)(void))
{
 76c:	0f 93       	push	r16
 76e:	1f 93       	push	r17
 770:	cf 93       	push	r28
 772:	c8 2f       	mov	r28, r24
 774:	8b 01       	movw	r16, r22
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
	u8_interruptError_retVal = EXT_INTERRUPT_init(en_ext_interrupt_num);
 776:	0e 94 00 02 	call	0x400	; 0x400 <EXT_INTERRUPT_init>
	u8_interruptError_retVal = EXT_INTERRUPT_set_callback_init(en_ext_interrupt_num,callback);
 77a:	b8 01       	movw	r22, r16
 77c:	8c 2f       	mov	r24, r28
 77e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <EXT_INTERRUPT_set_callback_init>
	return u8_interruptError_retVal;
}
 782:	cf 91       	pop	r28
 784:	1f 91       	pop	r17
 786:	0f 91       	pop	r16
 788:	08 95       	ret

0000078a <EXT_INTERRUPT_MANAGER_enable>:
u8_interruptError_t EXT_INTERRUPT_MANAGER_enable(en_ext_interrupt_num_t en_ext_interrupt_num)
{
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
	u8_interruptError_retVal = EXT_INTERRUPT_enable(en_ext_interrupt_num);
 78a:	0e 94 2d 02 	call	0x45a	; 0x45a <EXT_INTERRUPT_enable>
	return u8_interruptError_retVal;
}
 78e:	08 95       	ret

00000790 <EXT_INTERRUPT_MANAGER_disable>:
u8_interruptError_t EXT_INTERRUPT_MANAGER_disable(en_ext_interrupt_num_t en_ext_interrupt_num)
{
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
	u8_interruptError_retVal = EXT_INTERRUPT_disable(en_ext_interrupt_num);
 790:	0e 94 48 02 	call	0x490	; 0x490 <EXT_INTERRUPT_disable>
	return u8_interruptError_retVal;
}
 794:	08 95       	ret

00000796 <SOS_tick_cbf>:
	else
	{
		enu_system_status_retVal = SOS_STATUS_INVALID_STATE;
	}
	return enu_system_status_retVal;
}
 796:	21 e0       	ldi	r18, 0x01	; 1
 798:	21 c0       	rjmp	.+66     	; 0x7dc <SOS_tick_cbf+0x46>
 79a:	82 2f       	mov	r24, r18
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	fc 01       	movw	r30, r24
 7a0:	ee 0f       	add	r30, r30
 7a2:	ff 1f       	adc	r31, r31
 7a4:	e1 58       	subi	r30, 0x81	; 129
 7a6:	ff 4f       	sbci	r31, 0xFF	; 255
 7a8:	40 81       	ld	r20, Z
 7aa:	51 81       	ldd	r21, Z+1	; 0x01
 7ac:	fc 01       	movw	r30, r24
 7ae:	ee 0f       	add	r30, r30
 7b0:	ff 1f       	adc	r31, r31
 7b2:	ee 0f       	add	r30, r30
 7b4:	ff 1f       	adc	r31, r31
 7b6:	ee 0f       	add	r30, r30
 7b8:	ff 1f       	adc	r31, r31
 7ba:	e0 5f       	subi	r30, 0xF0	; 240
 7bc:	fd 4f       	sbci	r31, 0xFD	; 253
 7be:	64 81       	ldd	r22, Z+4	; 0x04
 7c0:	75 81       	ldd	r23, Z+5	; 0x05
 7c2:	46 17       	cp	r20, r22
 7c4:	57 07       	cpc	r21, r23
 7c6:	49 f0       	breq	.+18     	; 0x7da <SOS_tick_cbf+0x44>
 7c8:	88 0f       	add	r24, r24
 7ca:	99 1f       	adc	r25, r25
 7cc:	fc 01       	movw	r30, r24
 7ce:	e1 58       	subi	r30, 0x81	; 129
 7d0:	ff 4f       	sbci	r31, 0xFF	; 255
 7d2:	4f 5f       	subi	r20, 0xFF	; 255
 7d4:	5f 4f       	sbci	r21, 0xFF	; 255
 7d6:	51 83       	std	Z+1, r21	; 0x01
 7d8:	40 83       	st	Z, r20
 7da:	2f 5f       	subi	r18, 0xFF	; 255
 7dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <u8_gs_max_count_of_tasks>
 7e0:	28 17       	cp	r18, r24
 7e2:	d8 f2       	brcs	.-74     	; 0x79a <SOS_tick_cbf+0x4>
 7e4:	08 95       	ret

000007e6 <SOS_run>:
 7e6:	0f 93       	push	r16
 7e8:	1f 93       	push	r17
 7ea:	cf 93       	push	r28
 7ec:	0e 94 3c 03 	call	0x678	; 0x678 <TIMER2_enuStart>
 7f0:	32 c0       	rjmp	.+100    	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 7f2:	0c 2f       	mov	r16, r28
 7f4:	10 e0       	ldi	r17, 0x00	; 0
 7f6:	f8 01       	movw	r30, r16
 7f8:	ee 0f       	add	r30, r30
 7fa:	ff 1f       	adc	r31, r31
 7fc:	ee 0f       	add	r30, r30
 7fe:	ff 1f       	adc	r31, r31
 800:	ee 0f       	add	r30, r30
 802:	ff 1f       	adc	r31, r31
 804:	e0 5f       	subi	r30, 0xF0	; 240
 806:	fd 4f       	sbci	r31, 0xFD	; 253
 808:	24 81       	ldd	r18, Z+4	; 0x04
 80a:	35 81       	ldd	r19, Z+5	; 0x05
 80c:	f8 01       	movw	r30, r16
 80e:	ee 0f       	add	r30, r30
 810:	ff 1f       	adc	r31, r31
 812:	e1 58       	subi	r30, 0x81	; 129
 814:	ff 4f       	sbci	r31, 0xFF	; 255
 816:	80 81       	ld	r24, Z
 818:	91 81       	ldd	r25, Z+1	; 0x01
 81a:	28 17       	cp	r18, r24
 81c:	39 07       	cpc	r19, r25
 81e:	a1 f4       	brne	.+40     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 820:	f8 01       	movw	r30, r16
 822:	ee 0f       	add	r30, r30
 824:	ff 1f       	adc	r31, r31
 826:	ee 0f       	add	r30, r30
 828:	ff 1f       	adc	r31, r31
 82a:	ee 0f       	add	r30, r30
 82c:	ff 1f       	adc	r31, r31
 82e:	e0 5f       	subi	r30, 0xF0	; 240
 830:	fd 4f       	sbci	r31, 0xFD	; 253
 832:	01 90       	ld	r0, Z+
 834:	f0 81       	ld	r31, Z
 836:	e0 2d       	mov	r30, r0
 838:	09 95       	icall
 83a:	00 0f       	add	r16, r16
 83c:	11 1f       	adc	r17, r17
 83e:	f8 01       	movw	r30, r16
 840:	e1 58       	subi	r30, 0x81	; 129
 842:	ff 4f       	sbci	r31, 0xFF	; 255
 844:	11 82       	std	Z+1, r1	; 0x01
 846:	10 82       	st	Z, r1
 848:	cf 5f       	subi	r28, 0xFF	; 255
 84a:	01 c0       	rjmp	.+2      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 84c:	c1 e0       	ldi	r28, 0x01	; 1
 84e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <u8_gs_max_count_of_tasks>
 852:	c8 17       	cp	r28, r24
 854:	70 f2       	brcs	.-100    	; 0x7f2 <SOS_run+0xc>
 856:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8_gs_sos_module_state>
 85a:	81 30       	cpi	r24, 0x01	; 1
 85c:	b9 f3       	breq	.-18     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 85e:	cf 91       	pop	r28
 860:	1f 91       	pop	r17
 862:	0f 91       	pop	r16
 864:	08 95       	ret

00000866 <SOS_disable>:
 866:	0e 94 46 03 	call	0x68c	; 0x68c <TIMER2_vidStop>
 86a:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8_gs_sos_module_state>
 86e:	88 23       	and	r24, r24
 870:	e1 f3       	breq	.-8      	; 0x86a <SOS_disable+0x4>
 872:	08 95       	ret

00000874 <SOS_token_config_param>:
 874:	9c 01       	movw	r18, r24
 876:	e6 2f       	mov	r30, r22
 878:	f0 e0       	ldi	r31, 0x00	; 0
 87a:	e4 55       	subi	r30, 0x54	; 84
 87c:	fe 4f       	sbci	r31, 0xFE	; 254
 87e:	80 81       	ld	r24, Z
 880:	81 11       	cpse	r24, r1
 882:	1f c0       	rjmp	.+62     	; 0x8c2 <SOS_token_config_param+0x4e>
 884:	e4 2f       	mov	r30, r20
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	e8 5b       	subi	r30, 0xB8	; 184
 88a:	fe 4f       	sbci	r31, 0xFE	; 254
 88c:	80 81       	ld	r24, Z
 88e:	81 11       	cpse	r24, r1
 890:	1a c0       	rjmp	.+52     	; 0x8c6 <SOS_token_config_param+0x52>
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	10 c0       	rjmp	.+32     	; 0x8b6 <SOS_token_config_param+0x42>
 896:	e9 2f       	mov	r30, r25
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	ee 0f       	add	r30, r30
 89c:	ff 1f       	adc	r31, r31
 89e:	ee 0f       	add	r30, r30
 8a0:	ff 1f       	adc	r31, r31
 8a2:	ee 0f       	add	r30, r30
 8a4:	ff 1f       	adc	r31, r31
 8a6:	e0 5f       	subi	r30, 0xF0	; 240
 8a8:	fd 4f       	sbci	r31, 0xFD	; 253
 8aa:	40 81       	ld	r20, Z
 8ac:	51 81       	ldd	r21, Z+1	; 0x01
 8ae:	42 17       	cp	r20, r18
 8b0:	53 07       	cpc	r21, r19
 8b2:	59 f0       	breq	.+22     	; 0x8ca <SOS_token_config_param+0x56>
 8b4:	9f 5f       	subi	r25, 0xFF	; 255
 8b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <u8_gs_max_count_of_tasks>
 8ba:	98 17       	cp	r25, r24
 8bc:	60 f3       	brcs	.-40     	; 0x896 <SOS_token_config_param+0x22>
 8be:	80 e0       	ldi	r24, 0x00	; 0
 8c0:	08 95       	ret
 8c2:	87 e0       	ldi	r24, 0x07	; 7
 8c4:	08 95       	ret
 8c6:	87 e0       	ldi	r24, 0x07	; 7
 8c8:	08 95       	ret
 8ca:	87 e0       	ldi	r24, 0x07	; 7
 8cc:	08 95       	ret

000008ce <SOS_create_task>:
 8ce:	af 92       	push	r10
 8d0:	bf 92       	push	r11
 8d2:	df 92       	push	r13
 8d4:	ef 92       	push	r14
 8d6:	ff 92       	push	r15
 8d8:	0f 93       	push	r16
 8da:	1f 93       	push	r17
 8dc:	cf 93       	push	r28
 8de:	df 93       	push	r29
 8e0:	00 97       	sbiw	r24, 0x00	; 0
 8e2:	09 f4       	brne	.+2      	; 0x8e6 <SOS_create_task+0x18>
 8e4:	41 c0       	rjmp	.+130    	; 0x968 <SOS_create_task+0x9a>
 8e6:	64 36       	cpi	r22, 0x64	; 100
 8e8:	08 f0       	brcs	.+2      	; 0x8ec <SOS_create_task+0x1e>
 8ea:	40 c0       	rjmp	.+128    	; 0x96c <SOS_create_task+0x9e>
 8ec:	44 36       	cpi	r20, 0x64	; 100
 8ee:	08 f0       	brcs	.+2      	; 0x8f2 <SOS_create_task+0x24>
 8f0:	3f c0       	rjmp	.+126    	; 0x970 <SOS_create_task+0xa2>
 8f2:	d0 90 62 00 	lds	r13, 0x0062	; 0x800062 <u8_gs_max_count_of_tasks>
 8f6:	0d 2d       	mov	r16, r13
 8f8:	10 e0       	ldi	r17, 0x00	; 0
 8fa:	f8 01       	movw	r30, r16
 8fc:	ee 0f       	add	r30, r30
 8fe:	ff 1f       	adc	r31, r31
 900:	ee 0f       	add	r30, r30
 902:	ff 1f       	adc	r31, r31
 904:	ee 0f       	add	r30, r30
 906:	ff 1f       	adc	r31, r31
 908:	e0 5f       	subi	r30, 0xF0	; 240
 90a:	fd 4f       	sbci	r31, 0xFD	; 253
 90c:	01 90       	ld	r0, Z+
 90e:	f0 81       	ld	r31, Z
 910:	e0 2d       	mov	r30, r0
 912:	ef 2b       	or	r30, r31
 914:	79 f5       	brne	.+94     	; 0x974 <SOS_create_task+0xa6>
 916:	79 01       	movw	r14, r18
 918:	d4 2f       	mov	r29, r20
 91a:	c6 2f       	mov	r28, r22
 91c:	5c 01       	movw	r10, r24
 91e:	0e 94 3a 04 	call	0x874	; 0x874 <SOS_token_config_param>
 922:	87 30       	cpi	r24, 0x07	; 7
 924:	49 f1       	breq	.+82     	; 0x978 <SOS_create_task+0xaa>
 926:	f8 01       	movw	r30, r16
 928:	ee 0f       	add	r30, r30
 92a:	ff 1f       	adc	r31, r31
 92c:	ee 0f       	add	r30, r30
 92e:	ff 1f       	adc	r31, r31
 930:	ee 0f       	add	r30, r30
 932:	ff 1f       	adc	r31, r31
 934:	e0 5f       	subi	r30, 0xF0	; 240
 936:	fd 4f       	sbci	r31, 0xFD	; 253
 938:	b1 82       	std	Z+1, r11	; 0x01
 93a:	a0 82       	st	Z, r10
 93c:	d3 83       	std	Z+3, r29	; 0x03
 93e:	f5 82       	std	Z+5, r15	; 0x05
 940:	e4 82       	std	Z+4, r14	; 0x04
 942:	f7 82       	std	Z+7, r15	; 0x07
 944:	e6 82       	std	Z+6, r14	; 0x06
 946:	c2 83       	std	Z+2, r28	; 0x02
 948:	ed 2f       	mov	r30, r29
 94a:	f0 e0       	ldi	r31, 0x00	; 0
 94c:	e8 5b       	subi	r30, 0xB8	; 184
 94e:	fe 4f       	sbci	r31, 0xFE	; 254
 950:	d0 82       	st	Z, r13
 952:	6c 2f       	mov	r22, r28
 954:	70 e0       	ldi	r23, 0x00	; 0
 956:	fb 01       	movw	r30, r22
 958:	e4 55       	subi	r30, 0x54	; 84
 95a:	fe 4f       	sbci	r31, 0xFE	; 254
 95c:	d0 82       	st	Z, r13
 95e:	d3 94       	inc	r13
 960:	d0 92 62 00 	sts	0x0062, r13	; 0x800062 <u8_gs_max_count_of_tasks>
 964:	80 e0       	ldi	r24, 0x00	; 0
 966:	09 c0       	rjmp	.+18     	; 0x97a <SOS_create_task+0xac>
 968:	87 e0       	ldi	r24, 0x07	; 7
 96a:	07 c0       	rjmp	.+14     	; 0x97a <SOS_create_task+0xac>
 96c:	87 e0       	ldi	r24, 0x07	; 7
 96e:	05 c0       	rjmp	.+10     	; 0x97a <SOS_create_task+0xac>
 970:	87 e0       	ldi	r24, 0x07	; 7
 972:	03 c0       	rjmp	.+6      	; 0x97a <SOS_create_task+0xac>
 974:	87 e0       	ldi	r24, 0x07	; 7
 976:	01 c0       	rjmp	.+2      	; 0x97a <SOS_create_task+0xac>
 978:	87 e0       	ldi	r24, 0x07	; 7
 97a:	df 91       	pop	r29
 97c:	cf 91       	pop	r28
 97e:	1f 91       	pop	r17
 980:	0f 91       	pop	r16
 982:	ff 90       	pop	r15
 984:	ef 90       	pop	r14
 986:	df 90       	pop	r13
 988:	bf 90       	pop	r11
 98a:	af 90       	pop	r10
 98c:	08 95       	ret

0000098e <SOS_rearrange_tasks>:
 98e:	ef 92       	push	r14
 990:	ff 92       	push	r15
 992:	0f 93       	push	r16
 994:	1f 93       	push	r17
 996:	cf 93       	push	r28
 998:	df 93       	push	r29
 99a:	51 e0       	ldi	r21, 0x01	; 1
 99c:	7c c0       	rjmp	.+248    	; 0xa96 <SOS_rearrange_tasks+0x108>
 99e:	71 e0       	ldi	r23, 0x01	; 1
 9a0:	75 0f       	add	r23, r21
 9a2:	47 2f       	mov	r20, r23
 9a4:	74 c0       	rjmp	.+232    	; 0xa8e <SOS_rearrange_tasks+0x100>
 9a6:	25 2f       	mov	r18, r21
 9a8:	30 e0       	ldi	r19, 0x00	; 0
 9aa:	f9 01       	movw	r30, r18
 9ac:	ee 0f       	add	r30, r30
 9ae:	ff 1f       	adc	r31, r31
 9b0:	ee 0f       	add	r30, r30
 9b2:	ff 1f       	adc	r31, r31
 9b4:	ee 0f       	add	r30, r30
 9b6:	ff 1f       	adc	r31, r31
 9b8:	e0 5f       	subi	r30, 0xF0	; 240
 9ba:	fd 4f       	sbci	r31, 0xFD	; 253
 9bc:	a3 81       	ldd	r26, Z+3	; 0x03
 9be:	84 2f       	mov	r24, r20
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	fc 01       	movw	r30, r24
 9c4:	ee 0f       	add	r30, r30
 9c6:	ff 1f       	adc	r31, r31
 9c8:	ee 0f       	add	r30, r30
 9ca:	ff 1f       	adc	r31, r31
 9cc:	ee 0f       	add	r30, r30
 9ce:	ff 1f       	adc	r31, r31
 9d0:	e0 5f       	subi	r30, 0xF0	; 240
 9d2:	fd 4f       	sbci	r31, 0xFD	; 253
 9d4:	e3 81       	ldd	r30, Z+3	; 0x03
 9d6:	ae 17       	cp	r26, r30
 9d8:	08 f0       	brcs	.+2      	; 0x9dc <SOS_rearrange_tasks+0x4e>
 9da:	58 c0       	rjmp	.+176    	; 0xa8c <SOS_rearrange_tasks+0xfe>
 9dc:	f9 01       	movw	r30, r18
 9de:	ee 0f       	add	r30, r30
 9e0:	ff 1f       	adc	r31, r31
 9e2:	ee 0f       	add	r30, r30
 9e4:	ff 1f       	adc	r31, r31
 9e6:	ee 0f       	add	r30, r30
 9e8:	ff 1f       	adc	r31, r31
 9ea:	e0 5f       	subi	r30, 0xF0	; 240
 9ec:	fd 4f       	sbci	r31, 0xFD	; 253
 9ee:	c0 81       	ld	r28, Z
 9f0:	d1 81       	ldd	r29, Z+1	; 0x01
 9f2:	dc 01       	movw	r26, r24
 9f4:	aa 0f       	add	r26, r26
 9f6:	bb 1f       	adc	r27, r27
 9f8:	aa 0f       	add	r26, r26
 9fa:	bb 1f       	adc	r27, r27
 9fc:	aa 0f       	add	r26, r26
 9fe:	bb 1f       	adc	r27, r27
 a00:	a0 5f       	subi	r26, 0xF0	; 240
 a02:	bd 4f       	sbci	r27, 0xFD	; 253
 a04:	0d 91       	ld	r16, X+
 a06:	1c 91       	ld	r17, X
 a08:	11 97       	sbiw	r26, 0x01	; 1
 a0a:	11 83       	std	Z+1, r17	; 0x01
 a0c:	00 83       	st	Z, r16
 a0e:	11 96       	adiw	r26, 0x01	; 1
 a10:	dc 93       	st	X, r29
 a12:	ce 93       	st	-X, r28
 a14:	22 0f       	add	r18, r18
 a16:	33 1f       	adc	r19, r19
 a18:	21 58       	subi	r18, 0x81	; 129
 a1a:	3f 4f       	sbci	r19, 0xFF	; 255
 a1c:	e9 01       	movw	r28, r18
 a1e:	18 81       	ld	r17, Y
 a20:	88 0f       	add	r24, r24
 a22:	99 1f       	adc	r25, r25
 a24:	ec 01       	movw	r28, r24
 a26:	c1 58       	subi	r28, 0x81	; 129
 a28:	df 4f       	sbci	r29, 0xFF	; 255
 a2a:	7e 01       	movw	r14, r28
 a2c:	88 81       	ld	r24, Y
 a2e:	99 81       	ldd	r25, Y+1	; 0x01
 a30:	e9 01       	movw	r28, r18
 a32:	99 83       	std	Y+1, r25	; 0x01
 a34:	88 83       	st	Y, r24
 a36:	81 2f       	mov	r24, r17
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	e7 01       	movw	r28, r14
 a3c:	99 83       	std	Y+1, r25	; 0x01
 a3e:	88 83       	st	Y, r24
 a40:	84 81       	ldd	r24, Z+4	; 0x04
 a42:	95 81       	ldd	r25, Z+5	; 0x05
 a44:	14 96       	adiw	r26, 0x04	; 4
 a46:	2d 91       	ld	r18, X+
 a48:	3c 91       	ld	r19, X
 a4a:	15 97       	sbiw	r26, 0x05	; 5
 a4c:	35 83       	std	Z+5, r19	; 0x05
 a4e:	24 83       	std	Z+4, r18	; 0x04
 a50:	15 96       	adiw	r26, 0x05	; 5
 a52:	9c 93       	st	X, r25
 a54:	8e 93       	st	-X, r24
 a56:	14 97       	sbiw	r26, 0x04	; 4
 a58:	22 81       	ldd	r18, Z+2	; 0x02
 a5a:	12 96       	adiw	r26, 0x02	; 2
 a5c:	8c 91       	ld	r24, X
 a5e:	12 97       	sbiw	r26, 0x02	; 2
 a60:	82 83       	std	Z+2, r24	; 0x02
 a62:	12 96       	adiw	r26, 0x02	; 2
 a64:	2c 93       	st	X, r18
 a66:	12 97       	sbiw	r26, 0x02	; 2
 a68:	82 81       	ldd	r24, Z+2	; 0x02
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	84 55       	subi	r24, 0x54	; 84
 a6e:	9e 4f       	sbci	r25, 0xFE	; 254
 a70:	ec 01       	movw	r28, r24
 a72:	58 83       	st	Y, r21
 a74:	c2 2f       	mov	r28, r18
 a76:	d0 e0       	ldi	r29, 0x00	; 0
 a78:	c4 55       	subi	r28, 0x54	; 84
 a7a:	de 4f       	sbci	r29, 0xFE	; 254
 a7c:	48 83       	st	Y, r20
 a7e:	83 81       	ldd	r24, Z+3	; 0x03
 a80:	13 96       	adiw	r26, 0x03	; 3
 a82:	9c 91       	ld	r25, X
 a84:	13 97       	sbiw	r26, 0x03	; 3
 a86:	93 83       	std	Z+3, r25	; 0x03
 a88:	13 96       	adiw	r26, 0x03	; 3
 a8a:	8c 93       	st	X, r24
 a8c:	4f 5f       	subi	r20, 0xFF	; 255
 a8e:	46 17       	cp	r20, r22
 a90:	08 f4       	brcc	.+2      	; 0xa94 <SOS_rearrange_tasks+0x106>
 a92:	89 cf       	rjmp	.-238    	; 0x9a6 <SOS_rearrange_tasks+0x18>
 a94:	57 2f       	mov	r21, r23
 a96:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <u8_gs_max_count_of_tasks>
 a9a:	56 17       	cp	r21, r22
 a9c:	08 f4       	brcc	.+2      	; 0xaa0 <SOS_rearrange_tasks+0x112>
 a9e:	7f cf       	rjmp	.-258    	; 0x99e <SOS_rearrange_tasks+0x10>
 aa0:	df 91       	pop	r29
 aa2:	cf 91       	pop	r28
 aa4:	1f 91       	pop	r17
 aa6:	0f 91       	pop	r16
 aa8:	ff 90       	pop	r15
 aaa:	ef 90       	pop	r14
 aac:	08 95       	ret

00000aae <SOS_init>:
 aae:	cf 93       	push	r28
 ab0:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8_gs_sos_module_state>
 ab4:	81 11       	cpse	r24, r1
 ab6:	15 c0       	rjmp	.+42     	; 0xae2 <SOS_init+0x34>
 ab8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <TIMER2_enuInit>
 abc:	84 e0       	ldi	r24, 0x04	; 4
 abe:	0e 94 20 03 	call	0x640	; 0x640 <TIMER2_enuSetPrescallar>
 ac2:	81 e0       	ldi	r24, 0x01	; 1
 ac4:	0e 94 4d 03 	call	0x69a	; 0x69a <TIMER2_enuSetTime_ms>
 ac8:	0e 94 34 03 	call	0x668	; 0x668 <TIMER2_enuOVFIrqEnable>
 acc:	c8 2f       	mov	r28, r24
 ace:	8b ec       	ldi	r24, 0xCB	; 203
 ad0:	93 e0       	ldi	r25, 0x03	; 3
 ad2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TIMER2_vidSetcbf_OVF>
 ad6:	81 e0       	ldi	r24, 0x01	; 1
 ad8:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <u8_gs_sos_module_state>
 adc:	0e 94 c7 04 	call	0x98e	; 0x98e <SOS_rearrange_tasks>
 ae0:	01 c0       	rjmp	.+2      	; 0xae4 <SOS_init+0x36>
 ae2:	c7 e0       	ldi	r28, 0x07	; 7
 ae4:	c1 11       	cpse	r28, r1
 ae6:	c7 e0       	ldi	r28, 0x07	; 7
 ae8:	8c 2f       	mov	r24, r28
 aea:	cf 91       	pop	r28
 aec:	08 95       	ret

00000aee <SOS_change_state>:
	}
}

void SOS_change_state(uint8_t u8_state)
{
	u8_gs_sos_module_state = u8_state;
 aee:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <u8_gs_sos_module_state>
 af2:	08 95       	ret

00000af4 <__divsf3>:
 af4:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__divsf3x>
 af8:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__fp_round>
 afc:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__fp_pscB>
 b00:	58 f0       	brcs	.+22     	; 0xb18 <__divsf3+0x24>
 b02:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__fp_pscA>
 b06:	40 f0       	brcs	.+16     	; 0xb18 <__divsf3+0x24>
 b08:	29 f4       	brne	.+10     	; 0xb14 <__divsf3+0x20>
 b0a:	5f 3f       	cpi	r21, 0xFF	; 255
 b0c:	29 f0       	breq	.+10     	; 0xb18 <__divsf3+0x24>
 b0e:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__fp_inf>
 b12:	51 11       	cpse	r21, r1
 b14:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__fp_szero>
 b18:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__fp_nan>

00000b1c <__divsf3x>:
 b1c:	0e 94 80 06 	call	0xd00	; 0xd00 <__fp_split3>
 b20:	68 f3       	brcs	.-38     	; 0xafc <__divsf3+0x8>

00000b22 <__divsf3_pse>:
 b22:	99 23       	and	r25, r25
 b24:	b1 f3       	breq	.-20     	; 0xb12 <__divsf3+0x1e>
 b26:	55 23       	and	r21, r21
 b28:	91 f3       	breq	.-28     	; 0xb0e <__divsf3+0x1a>
 b2a:	95 1b       	sub	r25, r21
 b2c:	55 0b       	sbc	r21, r21
 b2e:	bb 27       	eor	r27, r27
 b30:	aa 27       	eor	r26, r26
 b32:	62 17       	cp	r22, r18
 b34:	73 07       	cpc	r23, r19
 b36:	84 07       	cpc	r24, r20
 b38:	38 f0       	brcs	.+14     	; 0xb48 <__divsf3_pse+0x26>
 b3a:	9f 5f       	subi	r25, 0xFF	; 255
 b3c:	5f 4f       	sbci	r21, 0xFF	; 255
 b3e:	22 0f       	add	r18, r18
 b40:	33 1f       	adc	r19, r19
 b42:	44 1f       	adc	r20, r20
 b44:	aa 1f       	adc	r26, r26
 b46:	a9 f3       	breq	.-22     	; 0xb32 <__divsf3_pse+0x10>
 b48:	35 d0       	rcall	.+106    	; 0xbb4 <__divsf3_pse+0x92>
 b4a:	0e 2e       	mov	r0, r30
 b4c:	3a f0       	brmi	.+14     	; 0xb5c <__divsf3_pse+0x3a>
 b4e:	e0 e8       	ldi	r30, 0x80	; 128
 b50:	32 d0       	rcall	.+100    	; 0xbb6 <__divsf3_pse+0x94>
 b52:	91 50       	subi	r25, 0x01	; 1
 b54:	50 40       	sbci	r21, 0x00	; 0
 b56:	e6 95       	lsr	r30
 b58:	00 1c       	adc	r0, r0
 b5a:	ca f7       	brpl	.-14     	; 0xb4e <__divsf3_pse+0x2c>
 b5c:	2b d0       	rcall	.+86     	; 0xbb4 <__divsf3_pse+0x92>
 b5e:	fe 2f       	mov	r31, r30
 b60:	29 d0       	rcall	.+82     	; 0xbb4 <__divsf3_pse+0x92>
 b62:	66 0f       	add	r22, r22
 b64:	77 1f       	adc	r23, r23
 b66:	88 1f       	adc	r24, r24
 b68:	bb 1f       	adc	r27, r27
 b6a:	26 17       	cp	r18, r22
 b6c:	37 07       	cpc	r19, r23
 b6e:	48 07       	cpc	r20, r24
 b70:	ab 07       	cpc	r26, r27
 b72:	b0 e8       	ldi	r27, 0x80	; 128
 b74:	09 f0       	breq	.+2      	; 0xb78 <__divsf3_pse+0x56>
 b76:	bb 0b       	sbc	r27, r27
 b78:	80 2d       	mov	r24, r0
 b7a:	bf 01       	movw	r22, r30
 b7c:	ff 27       	eor	r31, r31
 b7e:	93 58       	subi	r25, 0x83	; 131
 b80:	5f 4f       	sbci	r21, 0xFF	; 255
 b82:	3a f0       	brmi	.+14     	; 0xb92 <__divsf3_pse+0x70>
 b84:	9e 3f       	cpi	r25, 0xFE	; 254
 b86:	51 05       	cpc	r21, r1
 b88:	78 f0       	brcs	.+30     	; 0xba8 <__divsf3_pse+0x86>
 b8a:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__fp_inf>
 b8e:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__fp_szero>
 b92:	5f 3f       	cpi	r21, 0xFF	; 255
 b94:	e4 f3       	brlt	.-8      	; 0xb8e <__divsf3_pse+0x6c>
 b96:	98 3e       	cpi	r25, 0xE8	; 232
 b98:	d4 f3       	brlt	.-12     	; 0xb8e <__divsf3_pse+0x6c>
 b9a:	86 95       	lsr	r24
 b9c:	77 95       	ror	r23
 b9e:	67 95       	ror	r22
 ba0:	b7 95       	ror	r27
 ba2:	f7 95       	ror	r31
 ba4:	9f 5f       	subi	r25, 0xFF	; 255
 ba6:	c9 f7       	brne	.-14     	; 0xb9a <__divsf3_pse+0x78>
 ba8:	88 0f       	add	r24, r24
 baa:	91 1d       	adc	r25, r1
 bac:	96 95       	lsr	r25
 bae:	87 95       	ror	r24
 bb0:	97 f9       	bld	r25, 7
 bb2:	08 95       	ret
 bb4:	e1 e0       	ldi	r30, 0x01	; 1
 bb6:	66 0f       	add	r22, r22
 bb8:	77 1f       	adc	r23, r23
 bba:	88 1f       	adc	r24, r24
 bbc:	bb 1f       	adc	r27, r27
 bbe:	62 17       	cp	r22, r18
 bc0:	73 07       	cpc	r23, r19
 bc2:	84 07       	cpc	r24, r20
 bc4:	ba 07       	cpc	r27, r26
 bc6:	20 f0       	brcs	.+8      	; 0xbd0 <__divsf3_pse+0xae>
 bc8:	62 1b       	sub	r22, r18
 bca:	73 0b       	sbc	r23, r19
 bcc:	84 0b       	sbc	r24, r20
 bce:	ba 0b       	sbc	r27, r26
 bd0:	ee 1f       	adc	r30, r30
 bd2:	88 f7       	brcc	.-30     	; 0xbb6 <__divsf3_pse+0x94>
 bd4:	e0 95       	com	r30
 bd6:	08 95       	ret

00000bd8 <__fixunssfsi>:
 bd8:	0e 94 88 06 	call	0xd10	; 0xd10 <__fp_splitA>
 bdc:	88 f0       	brcs	.+34     	; 0xc00 <__fixunssfsi+0x28>
 bde:	9f 57       	subi	r25, 0x7F	; 127
 be0:	98 f0       	brcs	.+38     	; 0xc08 <__fixunssfsi+0x30>
 be2:	b9 2f       	mov	r27, r25
 be4:	99 27       	eor	r25, r25
 be6:	b7 51       	subi	r27, 0x17	; 23
 be8:	b0 f0       	brcs	.+44     	; 0xc16 <__fixunssfsi+0x3e>
 bea:	e1 f0       	breq	.+56     	; 0xc24 <__fixunssfsi+0x4c>
 bec:	66 0f       	add	r22, r22
 bee:	77 1f       	adc	r23, r23
 bf0:	88 1f       	adc	r24, r24
 bf2:	99 1f       	adc	r25, r25
 bf4:	1a f0       	brmi	.+6      	; 0xbfc <__fixunssfsi+0x24>
 bf6:	ba 95       	dec	r27
 bf8:	c9 f7       	brne	.-14     	; 0xbec <__fixunssfsi+0x14>
 bfa:	14 c0       	rjmp	.+40     	; 0xc24 <__fixunssfsi+0x4c>
 bfc:	b1 30       	cpi	r27, 0x01	; 1
 bfe:	91 f0       	breq	.+36     	; 0xc24 <__fixunssfsi+0x4c>
 c00:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fp_zero>
 c04:	b1 e0       	ldi	r27, 0x01	; 1
 c06:	08 95       	ret
 c08:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <__fp_zero>
 c0c:	67 2f       	mov	r22, r23
 c0e:	78 2f       	mov	r23, r24
 c10:	88 27       	eor	r24, r24
 c12:	b8 5f       	subi	r27, 0xF8	; 248
 c14:	39 f0       	breq	.+14     	; 0xc24 <__fixunssfsi+0x4c>
 c16:	b9 3f       	cpi	r27, 0xF9	; 249
 c18:	cc f3       	brlt	.-14     	; 0xc0c <__fixunssfsi+0x34>
 c1a:	86 95       	lsr	r24
 c1c:	77 95       	ror	r23
 c1e:	67 95       	ror	r22
 c20:	b3 95       	inc	r27
 c22:	d9 f7       	brne	.-10     	; 0xc1a <__fixunssfsi+0x42>
 c24:	3e f4       	brtc	.+14     	; 0xc34 <__fixunssfsi+0x5c>
 c26:	90 95       	com	r25
 c28:	80 95       	com	r24
 c2a:	70 95       	com	r23
 c2c:	61 95       	neg	r22
 c2e:	7f 4f       	sbci	r23, 0xFF	; 255
 c30:	8f 4f       	sbci	r24, 0xFF	; 255
 c32:	9f 4f       	sbci	r25, 0xFF	; 255
 c34:	08 95       	ret

00000c36 <__floatunsisf>:
 c36:	e8 94       	clt
 c38:	09 c0       	rjmp	.+18     	; 0xc4c <__floatsisf+0x12>

00000c3a <__floatsisf>:
 c3a:	97 fb       	bst	r25, 7
 c3c:	3e f4       	brtc	.+14     	; 0xc4c <__floatsisf+0x12>
 c3e:	90 95       	com	r25
 c40:	80 95       	com	r24
 c42:	70 95       	com	r23
 c44:	61 95       	neg	r22
 c46:	7f 4f       	sbci	r23, 0xFF	; 255
 c48:	8f 4f       	sbci	r24, 0xFF	; 255
 c4a:	9f 4f       	sbci	r25, 0xFF	; 255
 c4c:	99 23       	and	r25, r25
 c4e:	a9 f0       	breq	.+42     	; 0xc7a <__floatsisf+0x40>
 c50:	f9 2f       	mov	r31, r25
 c52:	96 e9       	ldi	r25, 0x96	; 150
 c54:	bb 27       	eor	r27, r27
 c56:	93 95       	inc	r25
 c58:	f6 95       	lsr	r31
 c5a:	87 95       	ror	r24
 c5c:	77 95       	ror	r23
 c5e:	67 95       	ror	r22
 c60:	b7 95       	ror	r27
 c62:	f1 11       	cpse	r31, r1
 c64:	f8 cf       	rjmp	.-16     	; 0xc56 <__floatsisf+0x1c>
 c66:	fa f4       	brpl	.+62     	; 0xca6 <__floatsisf+0x6c>
 c68:	bb 0f       	add	r27, r27
 c6a:	11 f4       	brne	.+4      	; 0xc70 <__floatsisf+0x36>
 c6c:	60 ff       	sbrs	r22, 0
 c6e:	1b c0       	rjmp	.+54     	; 0xca6 <__floatsisf+0x6c>
 c70:	6f 5f       	subi	r22, 0xFF	; 255
 c72:	7f 4f       	sbci	r23, 0xFF	; 255
 c74:	8f 4f       	sbci	r24, 0xFF	; 255
 c76:	9f 4f       	sbci	r25, 0xFF	; 255
 c78:	16 c0       	rjmp	.+44     	; 0xca6 <__floatsisf+0x6c>
 c7a:	88 23       	and	r24, r24
 c7c:	11 f0       	breq	.+4      	; 0xc82 <__floatsisf+0x48>
 c7e:	96 e9       	ldi	r25, 0x96	; 150
 c80:	11 c0       	rjmp	.+34     	; 0xca4 <__floatsisf+0x6a>
 c82:	77 23       	and	r23, r23
 c84:	21 f0       	breq	.+8      	; 0xc8e <__floatsisf+0x54>
 c86:	9e e8       	ldi	r25, 0x8E	; 142
 c88:	87 2f       	mov	r24, r23
 c8a:	76 2f       	mov	r23, r22
 c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__floatsisf+0x5e>
 c8e:	66 23       	and	r22, r22
 c90:	71 f0       	breq	.+28     	; 0xcae <__floatsisf+0x74>
 c92:	96 e8       	ldi	r25, 0x86	; 134
 c94:	86 2f       	mov	r24, r22
 c96:	70 e0       	ldi	r23, 0x00	; 0
 c98:	60 e0       	ldi	r22, 0x00	; 0
 c9a:	2a f0       	brmi	.+10     	; 0xca6 <__floatsisf+0x6c>
 c9c:	9a 95       	dec	r25
 c9e:	66 0f       	add	r22, r22
 ca0:	77 1f       	adc	r23, r23
 ca2:	88 1f       	adc	r24, r24
 ca4:	da f7       	brpl	.-10     	; 0xc9c <__floatsisf+0x62>
 ca6:	88 0f       	add	r24, r24
 ca8:	96 95       	lsr	r25
 caa:	87 95       	ror	r24
 cac:	97 f9       	bld	r25, 7
 cae:	08 95       	ret

00000cb0 <__fp_inf>:
 cb0:	97 f9       	bld	r25, 7
 cb2:	9f 67       	ori	r25, 0x7F	; 127
 cb4:	80 e8       	ldi	r24, 0x80	; 128
 cb6:	70 e0       	ldi	r23, 0x00	; 0
 cb8:	60 e0       	ldi	r22, 0x00	; 0
 cba:	08 95       	ret

00000cbc <__fp_nan>:
 cbc:	9f ef       	ldi	r25, 0xFF	; 255
 cbe:	80 ec       	ldi	r24, 0xC0	; 192
 cc0:	08 95       	ret

00000cc2 <__fp_pscA>:
 cc2:	00 24       	eor	r0, r0
 cc4:	0a 94       	dec	r0
 cc6:	16 16       	cp	r1, r22
 cc8:	17 06       	cpc	r1, r23
 cca:	18 06       	cpc	r1, r24
 ccc:	09 06       	cpc	r0, r25
 cce:	08 95       	ret

00000cd0 <__fp_pscB>:
 cd0:	00 24       	eor	r0, r0
 cd2:	0a 94       	dec	r0
 cd4:	12 16       	cp	r1, r18
 cd6:	13 06       	cpc	r1, r19
 cd8:	14 06       	cpc	r1, r20
 cda:	05 06       	cpc	r0, r21
 cdc:	08 95       	ret

00000cde <__fp_round>:
 cde:	09 2e       	mov	r0, r25
 ce0:	03 94       	inc	r0
 ce2:	00 0c       	add	r0, r0
 ce4:	11 f4       	brne	.+4      	; 0xcea <__fp_round+0xc>
 ce6:	88 23       	and	r24, r24
 ce8:	52 f0       	brmi	.+20     	; 0xcfe <__fp_round+0x20>
 cea:	bb 0f       	add	r27, r27
 cec:	40 f4       	brcc	.+16     	; 0xcfe <__fp_round+0x20>
 cee:	bf 2b       	or	r27, r31
 cf0:	11 f4       	brne	.+4      	; 0xcf6 <__fp_round+0x18>
 cf2:	60 ff       	sbrs	r22, 0
 cf4:	04 c0       	rjmp	.+8      	; 0xcfe <__fp_round+0x20>
 cf6:	6f 5f       	subi	r22, 0xFF	; 255
 cf8:	7f 4f       	sbci	r23, 0xFF	; 255
 cfa:	8f 4f       	sbci	r24, 0xFF	; 255
 cfc:	9f 4f       	sbci	r25, 0xFF	; 255
 cfe:	08 95       	ret

00000d00 <__fp_split3>:
 d00:	57 fd       	sbrc	r21, 7
 d02:	90 58       	subi	r25, 0x80	; 128
 d04:	44 0f       	add	r20, r20
 d06:	55 1f       	adc	r21, r21
 d08:	59 f0       	breq	.+22     	; 0xd20 <__fp_splitA+0x10>
 d0a:	5f 3f       	cpi	r21, 0xFF	; 255
 d0c:	71 f0       	breq	.+28     	; 0xd2a <__fp_splitA+0x1a>
 d0e:	47 95       	ror	r20

00000d10 <__fp_splitA>:
 d10:	88 0f       	add	r24, r24
 d12:	97 fb       	bst	r25, 7
 d14:	99 1f       	adc	r25, r25
 d16:	61 f0       	breq	.+24     	; 0xd30 <__fp_splitA+0x20>
 d18:	9f 3f       	cpi	r25, 0xFF	; 255
 d1a:	79 f0       	breq	.+30     	; 0xd3a <__fp_splitA+0x2a>
 d1c:	87 95       	ror	r24
 d1e:	08 95       	ret
 d20:	12 16       	cp	r1, r18
 d22:	13 06       	cpc	r1, r19
 d24:	14 06       	cpc	r1, r20
 d26:	55 1f       	adc	r21, r21
 d28:	f2 cf       	rjmp	.-28     	; 0xd0e <__fp_split3+0xe>
 d2a:	46 95       	lsr	r20
 d2c:	f1 df       	rcall	.-30     	; 0xd10 <__fp_splitA>
 d2e:	08 c0       	rjmp	.+16     	; 0xd40 <__fp_splitA+0x30>
 d30:	16 16       	cp	r1, r22
 d32:	17 06       	cpc	r1, r23
 d34:	18 06       	cpc	r1, r24
 d36:	99 1f       	adc	r25, r25
 d38:	f1 cf       	rjmp	.-30     	; 0xd1c <__fp_splitA+0xc>
 d3a:	86 95       	lsr	r24
 d3c:	71 05       	cpc	r23, r1
 d3e:	61 05       	cpc	r22, r1
 d40:	08 94       	sec
 d42:	08 95       	ret

00000d44 <__fp_zero>:
 d44:	e8 94       	clt

00000d46 <__fp_szero>:
 d46:	bb 27       	eor	r27, r27
 d48:	66 27       	eor	r22, r22
 d4a:	77 27       	eor	r23, r23
 d4c:	cb 01       	movw	r24, r22
 d4e:	97 f9       	bld	r25, 7
 d50:	08 95       	ret

00000d52 <_exit>:
 d52:	f8 94       	cli

00000d54 <__stop_program>:
 d54:	ff cf       	rjmp	.-2      	; 0xd54 <__stop_program>
