
small os.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ec6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000ec6  00000f5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003f6  0080007e  0080007e  00000f78  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000fa8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002357  00000000  00000000  0000124c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d9b  00000000  00000000  000035a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015ec  00000000  00000000  0000433e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000060c  00000000  00000000  0000592c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e19  00000000  00000000  00005f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001888  00000000  00000000  00006d51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  000085d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 07 03 	jmp	0x60e	; 0x60e <__vector_1>
   8:	0c 94 30 03 	jmp	0x660	; 0x660 <__vector_2>
   c:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 17 04 	jmp	0x82e	; 0x82e <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	24 e0       	ldi	r18, 0x04	; 4
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 60 01 	call	0x2c0	; 0x2c0 <main>
  8a:	0c 94 61 07 	jmp	0xec2	; 0xec2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TASK_1>:

void TASK_3(void)
{
	//SOS_deinit();
	SOS_delete_task(2);
	LED_off(LED_1);
  92:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <st_gc_ledConfig>
  96:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <st_gc_ledConfig+0x1>
  9a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LED_toggle>
  9e:	08 95       	ret

000000a0 <TASK_2>:
  a0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <st_gc_ledConfig+0x2>
  a4:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <st_gc_ledConfig+0x3>
  a8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LED_toggle>
  ac:	08 95       	ret

000000ae <APP_btn_start_pressed>:
  ae:	86 e6       	ldi	r24, 0x66	; 102
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 16 01 	call	0x22c	; 0x22c <button_enable_INT>
  b6:	82 e6       	ldi	r24, 0x62	; 98
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 31 01 	call	0x262	; 0x262 <button_disable_INT>
  be:	08 95       	ret

000000c0 <APP_btn_stop_pressed>:
  c0:	86 e6       	ldi	r24, 0x66	; 102
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 31 01 	call	0x262	; 0x262 <button_disable_INT>
  c8:	82 e6       	ldi	r24, 0x62	; 98
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 16 01 	call	0x22c	; 0x22c <button_enable_INT>
  d0:	08 95       	ret

000000d2 <APP_ext_int0_cbf>:
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	88 e1       	ldi	r24, 0x18	; 24
  d8:	96 e0       	ldi	r25, 0x06	; 6
  da:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  de:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	0e 94 2a 06 	call	0xc54	; 0xc54 <SOS_change_state>
  e8:	80 e6       	ldi	r24, 0x60	; 96
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 2d 06 	call	0xc5a	; 0xc5a <SOS_disable_ext_interrupt>
  f0:	cd e6       	ldi	r28, 0x6D	; 109
  f2:	d0 e0       	ldi	r29, 0x00	; 0
  f4:	88 81       	ld	r24, Y
  f6:	99 81       	ldd	r25, Y+1	; 0x01
  f8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LED_off>
  fc:	8a 81       	ldd	r24, Y+2	; 0x02
  fe:	9b 81       	ldd	r25, Y+3	; 0x03
 100:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LED_off>
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <APP_wake_up_cbf>:
 10a:	83 ec       	ldi	r24, 0xC3	; 195
 10c:	95 e0       	ldi	r25, 0x05	; 5
 10e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 112:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 2a 06 	call	0xc54	; 0xc54 <SOS_change_state>
 11c:	87 e5       	ldi	r24, 0x57	; 87
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 2d 06 	call	0xc5a	; 0xc5a <SOS_disable_ext_interrupt>
 124:	08 95       	ret

00000126 <APP_init>:
uint8_t APP_init(void)
{
	uint8_t u8_retVal = APP_ERROR_OK;
	
	// Init leds
	if ((LED_ERROR_OK == LED_init(LED_0)) && 
 126:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <st_gc_ledConfig>
 12a:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <st_gc_ledConfig+0x1>
 12e:	0e 94 4c 01 	call	0x298	; 0x298 <LED_init>
 132:	81 11       	cpse	r24, r1
 134:	38 c0       	rjmp	.+112    	; 0x1a6 <APP_init+0x80>
		(LED_ERROR_OK == LED_init(LED_1)))
 136:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <st_gc_ledConfig+0x2>
 13a:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <st_gc_ledConfig+0x3>
 13e:	0e 94 4c 01 	call	0x298	; 0x298 <LED_init>
uint8_t APP_init(void)
{
	uint8_t u8_retVal = APP_ERROR_OK;
	
	// Init leds
	if ((LED_ERROR_OK == LED_init(LED_0)) && 
 142:	81 11       	cpse	r24, r1
 144:	32 c0       	rjmp	.+100    	; 0x1aa <APP_init+0x84>
		(LED_ERROR_OK == LED_init(LED_1)))
	{
		// Init the small SOS
		if (SOS_STATUS_SUCCESS == SOS_init())
 146:	0e 94 3c 05 	call	0xa78	; 0xa78 <SOS_init>
 14a:	81 11       	cpse	r24, r1
 14c:	30 c0       	rjmp	.+96     	; 0x1ae <APP_init+0x88>
		{
			// create task 1
			if (SOS_STATUS_SUCCESS == SOS_create_task(
 14e:	2c e2       	ldi	r18, 0x2C	; 44
 150:	31 e0       	ldi	r19, 0x01	; 1
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	89 e4       	ldi	r24, 0x49	; 73
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 5c 05 	call	0xab8	; 0xab8 <SOS_create_task>
 15e:	81 11       	cpse	r24, r1
 160:	28 c0       	rjmp	.+80     	; 0x1b2 <APP_init+0x8c>
															 1,							// ID
															 1,							// priority
															300							// period
													 )															&&
				// create task 2
				SOS_STATUS_SUCCESS == SOS_create_task(
 162:	24 ef       	ldi	r18, 0xF4	; 244
 164:	31 e0       	ldi	r19, 0x01	; 1
 166:	43 e0       	ldi	r20, 0x03	; 3
 168:	62 e0       	ldi	r22, 0x02	; 2
 16a:	80 e5       	ldi	r24, 0x50	; 80
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 5c 05 	call	0xab8	; 0xab8 <SOS_create_task>
			if (SOS_STATUS_SUCCESS == SOS_create_task(
														TASK_1,					  	    // Function name
															 1,							// ID
															 1,							// priority
															300							// period
													 )															&&
 172:	81 11       	cpse	r24, r1
 174:	20 c0       	rjmp	.+64     	; 0x1b6 <APP_init+0x90>
															 3,							// priority
															500							// period
													))
			{
				// Init external interrupts
				if ((BUTTON_E_OK ==  button_with_INT(&st_gs_button_0,APP_ext_int0_cbf)) &&
 176:	69 e6       	ldi	r22, 0x69	; 105
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	86 e6       	ldi	r24, 0x66	; 102
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <button_with_INT>
 182:	81 11       	cpse	r24, r1
 184:	1a c0       	rjmp	.+52     	; 0x1ba <APP_init+0x94>
				    (BUTTON_E_OK ==  button_with_INT(&st_gs_button_1,APP_wake_up_cbf)))
 186:	65 e8       	ldi	r22, 0x85	; 133
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	82 e6       	ldi	r24, 0x62	; 98
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <button_with_INT>
															 3,							// priority
															500							// period
													))
			{
				// Init external interrupts
				if ((BUTTON_E_OK ==  button_with_INT(&st_gs_button_0,APP_ext_int0_cbf)) &&
 192:	81 11       	cpse	r24, r1
 194:	14 c0       	rjmp	.+40     	; 0x1be <APP_init+0x98>
				    (BUTTON_E_OK ==  button_with_INT(&st_gs_button_1,APP_wake_up_cbf)))
				{
					// enable global interrupts
					sei();
 196:	78 94       	sei
					
					if ((BUTTON_E_OK == button_enable_INT(&st_gs_button_0)))
 198:	86 e6       	ldi	r24, 0x66	; 102
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 16 01 	call	0x22c	; 0x22c <button_enable_INT>
 1a0:	81 11       	cpse	r24, r1
 1a2:	0f c0       	rjmp	.+30     	; 0x1c2 <APP_init+0x9c>
 1a4:	08 95       	ret
		}
		
	}
	else
	{
		u8_retVal = APP_ERROR_NOT_OK;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	08 95       	ret
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	08 95       	ret
				u8_retVal = APP_ERROR_NOT_OK;
			}
		}
		else
		{
			u8_retVal = APP_ERROR_NOT_OK;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	08 95       	ret
					u8_retVal = APP_ERROR_NOT_OK;
				}
			}
			else
			{
				u8_retVal = APP_ERROR_NOT_OK;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	08 95       	ret
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	08 95       	ret
						u8_retVal = APP_ERROR_NOT_OK;
					}
				}
				else
				{
					u8_retVal = APP_ERROR_NOT_OK;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	08 95       	ret
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	08 95       	ret
					{
						// finished Initialization
					}
					else
					{
						u8_retVal = APP_ERROR_NOT_OK;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		u8_retVal = APP_ERROR_NOT_OK;
	}
	return u8_retVal;
}
 1c4:	08 95       	ret

000001c6 <APP_start>:

void APP_start(void)
{
	while(1)
	{
		(APP_runing_task)();
 1c6:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ca:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ce:	09 95       	icall
 1d0:	fa cf       	rjmp	.-12     	; 0x1c6 <APP_start>

000001d2 <button_with_INT>:
 *   enu_button_return_state_t: Setup status
 *     - BUTTON_NULL_PTR: Null pointer detected
 *     - BUTTON_E_NOK: Invalid port or pin configuration
 *     - BUTTON_E_OK: Button set up successfully with interrupts
 */
enu_button_return_state_t button_with_INT( str_button_t *ptr_str_btn, void (*func)(void)){
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
	enu_button_return_state_t ret_state = BUTTON_E_OK;
	
	// Check if either pointer is NULL
	if((ptr_str_btn == NULL)||(func == NULL)){
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	f9 f0       	breq	.+62     	; 0x218 <button_with_INT+0x46>
 1da:	61 15       	cp	r22, r1
 1dc:	71 05       	cpc	r23, r1
 1de:	f1 f0       	breq	.+60     	; 0x21c <button_with_INT+0x4a>
		ret_state = BUTTON_NULL_PTR; // Return error code BUTTON_NULL_PTR if any pointer is NULL
	}
	else{
		if(ptr_str_btn->port_config == portd){
 1e0:	fc 01       	movw	r30, r24
 1e2:	20 81       	ld	r18, Z
 1e4:	23 30       	cpi	r18, 0x03	; 3
 1e6:	e1 f4       	brne	.+56     	; 0x220 <button_with_INT+0x4e>
 1e8:	eb 01       	movw	r28, r22
			
			// Set up interrupt for pin 2
			if(ptr_str_btn->pin_config == pin2){
 1ea:	81 81       	ldd	r24, Z+1	; 0x01
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	49 f4       	brne	.+18     	; 0x202 <button_with_INT+0x30>
				EXT_INTERRUPT_init(EXT_0);
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	0e 94 91 02 	call	0x522	; 0x522 <EXT_INTERRUPT_init>
				EXT_INTERRUPT_set_callback_init(EXT_0,func);
 1f6:	be 01       	movw	r22, r28
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <EXT_INTERRUPT_set_callback_init>
 *     - BUTTON_NULL_PTR: Null pointer detected
 *     - BUTTON_E_NOK: Invalid port or pin configuration
 *     - BUTTON_E_OK: Button set up successfully with interrupts
 */
enu_button_return_state_t button_with_INT( str_button_t *ptr_str_btn, void (*func)(void)){
	enu_button_return_state_t ret_state = BUTTON_E_OK;
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	12 c0       	rjmp	.+36     	; 0x226 <button_with_INT+0x54>
			if(ptr_str_btn->pin_config == pin2){
				EXT_INTERRUPT_init(EXT_0);
				EXT_INTERRUPT_set_callback_init(EXT_0,func);
			}
			// Set up interrupt for pin 3
			else if(ptr_str_btn->pin_config == pin3){
 202:	83 30       	cpi	r24, 0x03	; 3
 204:	79 f4       	brne	.+30     	; 0x224 <button_with_INT+0x52>
				EXT_INTERRUPT_init(EXT_1);
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	0e 94 91 02 	call	0x522	; 0x522 <EXT_INTERRUPT_init>
				EXT_INTERRUPT_set_callback_init(EXT_1,func);
 20c:	be 01       	movw	r22, r28
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <EXT_INTERRUPT_set_callback_init>
 *     - BUTTON_NULL_PTR: Null pointer detected
 *     - BUTTON_E_NOK: Invalid port or pin configuration
 *     - BUTTON_E_OK: Button set up successfully with interrupts
 */
enu_button_return_state_t button_with_INT( str_button_t *ptr_str_btn, void (*func)(void)){
	enu_button_return_state_t ret_state = BUTTON_E_OK;
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	07 c0       	rjmp	.+14     	; 0x226 <button_with_INT+0x54>
	
	// Check if either pointer is NULL
	if((ptr_str_btn == NULL)||(func == NULL)){
		ret_state = BUTTON_NULL_PTR; // Return error code BUTTON_NULL_PTR if any pointer is NULL
 218:	83 e0       	ldi	r24, 0x03	; 3
 21a:	05 c0       	rjmp	.+10     	; 0x226 <button_with_INT+0x54>
 21c:	83 e0       	ldi	r24, 0x03	; 3
 21e:	03 c0       	rjmp	.+6      	; 0x226 <button_with_INT+0x54>
			else{
				ret_state = BUTTON_E_NOK; // Return error code BUTTON_E_NOK for invalid pin configuration
			}
		}
		else{
			ret_state = BUTTON_E_NOK; // Return error code BUTTON_E_NOK for invalid port configuration
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	01 c0       	rjmp	.+2      	; 0x226 <button_with_INT+0x54>
			else if(ptr_str_btn->pin_config == pin3){
				EXT_INTERRUPT_init(EXT_1);
				EXT_INTERRUPT_set_callback_init(EXT_1,func);
			}
			else{
				ret_state = BUTTON_E_NOK; // Return error code BUTTON_E_NOK for invalid pin configuration
 224:	81 e0       	ldi	r24, 0x01	; 1
			ret_state = BUTTON_E_NOK; // Return error code BUTTON_E_NOK for invalid port configuration
		}
	}
	
	return ret_state; // Return the setup status
}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <button_enable_INT>:
 */
enu_button_return_state_t button_enable_INT( str_button_t *ptr_str_btn){
	enu_button_return_state_t ret_state = BUTTON_E_OK;
	
	// Check if the pointer is NULL
	if(ptr_str_btn == NULL){
 22c:	00 97       	sbiw	r24, 0x00	; 0
 22e:	99 f0       	breq	.+38     	; 0x256 <button_enable_INT+0x2a>
		ret_state = BUTTON_NULL_PTR; // Return error code BUTTON_NULL_PTR if NULL pointer
	}
	else{
		if(ptr_str_btn->port_config == portd){
 230:	fc 01       	movw	r30, r24
 232:	20 81       	ld	r18, Z
 234:	23 30       	cpi	r18, 0x03	; 3
 236:	89 f4       	brne	.+34     	; 0x25a <button_enable_INT+0x2e>
			
			// Enable interrupt for pin 2
			if(ptr_str_btn->pin_config == pin2){
 238:	81 81       	ldd	r24, Z+1	; 0x01
 23a:	82 30       	cpi	r24, 0x02	; 2
 23c:	29 f4       	brne	.+10     	; 0x248 <button_enable_INT+0x1c>
				EXT_INTERRUPT_enable(EXT_0);
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	0e 94 be 02 	call	0x57c	; 0x57c <EXT_INTERRUPT_enable>
 *     - BUTTON_NULL_PTR: Null pointer detected
 *     - BUTTON_E_NOK: Invalid port or pin configuration
 *     - BUTTON_E_OK: Interrupt enabled successfully for the button
 */
enu_button_return_state_t button_enable_INT( str_button_t *ptr_str_btn){
	enu_button_return_state_t ret_state = BUTTON_E_OK;
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	08 95       	ret
			// Enable interrupt for pin 2
			if(ptr_str_btn->pin_config == pin2){
				EXT_INTERRUPT_enable(EXT_0);
			}
			// Enable interrupt for pin 3
			else if(ptr_str_btn->pin_config == pin3){
 248:	83 30       	cpi	r24, 0x03	; 3
 24a:	49 f4       	brne	.+18     	; 0x25e <button_enable_INT+0x32>
				EXT_INTERRUPT_enable(EXT_1);
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 be 02 	call	0x57c	; 0x57c <EXT_INTERRUPT_enable>
 *     - BUTTON_NULL_PTR: Null pointer detected
 *     - BUTTON_E_NOK: Invalid port or pin configuration
 *     - BUTTON_E_OK: Interrupt enabled successfully for the button
 */
enu_button_return_state_t button_enable_INT( str_button_t *ptr_str_btn){
	enu_button_return_state_t ret_state = BUTTON_E_OK;
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	08 95       	ret
	
	// Check if the pointer is NULL
	if(ptr_str_btn == NULL){
		ret_state = BUTTON_NULL_PTR; // Return error code BUTTON_NULL_PTR if NULL pointer
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	08 95       	ret
			else{
				ret_state = BUTTON_E_NOK; // Return error code BUTTON_E_NOK for invalid pin configuration
			}
		}
		else{
			ret_state = BUTTON_E_NOK; // Return error code BUTTON_E_NOK for invalid port configuration
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	08 95       	ret
			// Enable interrupt for pin 3
			else if(ptr_str_btn->pin_config == pin3){
				EXT_INTERRUPT_enable(EXT_1);
			}
			else{
				ret_state = BUTTON_E_NOK; // Return error code BUTTON_E_NOK for invalid pin configuration
 25e:	81 e0       	ldi	r24, 0x01	; 1
			ret_state = BUTTON_E_NOK; // Return error code BUTTON_E_NOK for invalid port configuration
		}
	}
	
	return ret_state; // Return the enable interrupt status
}
 260:	08 95       	ret

00000262 <button_disable_INT>:
 */
enu_button_return_state_t button_disable_INT( str_button_t *ptr_str_btn){
	enu_button_return_state_t ret_state = BUTTON_E_OK;
	
	// Check if the pointer is NULL
	if(ptr_str_btn == NULL){
 262:	00 97       	sbiw	r24, 0x00	; 0
 264:	99 f0       	breq	.+38     	; 0x28c <button_disable_INT+0x2a>
		ret_state = BUTTON_NULL_PTR; // Return error code BUTTON_NULL_PTR if NULL pointer
	}
	else{
		if(ptr_str_btn->port_config == portd){
 266:	fc 01       	movw	r30, r24
 268:	20 81       	ld	r18, Z
 26a:	23 30       	cpi	r18, 0x03	; 3
 26c:	89 f4       	brne	.+34     	; 0x290 <button_disable_INT+0x2e>
			
			// Disable interrupt for pin 2
			if(ptr_str_btn->pin_config == pin2){
 26e:	81 81       	ldd	r24, Z+1	; 0x01
 270:	82 30       	cpi	r24, 0x02	; 2
 272:	29 f4       	brne	.+10     	; 0x27e <button_disable_INT+0x1c>
				EXT_INTERRUPT_disable(EXT_0);
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <EXT_INTERRUPT_disable>
 *     - BUTTON_NULL_PTR: Null pointer detected
 *     - BUTTON_E_NOK: Invalid port or pin configuration
 *     - BUTTON_E_OK: Interrupt disabled successfully for the button
 */
enu_button_return_state_t button_disable_INT( str_button_t *ptr_str_btn){
	enu_button_return_state_t ret_state = BUTTON_E_OK;
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	08 95       	ret
			// Disable interrupt for pin 2
			if(ptr_str_btn->pin_config == pin2){
				EXT_INTERRUPT_disable(EXT_0);
			}
			// Disable interrupt for pin 3
			else if(ptr_str_btn->pin_config == pin3){
 27e:	83 30       	cpi	r24, 0x03	; 3
 280:	49 f4       	brne	.+18     	; 0x294 <button_disable_INT+0x32>
				EXT_INTERRUPT_disable(EXT_1);
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <EXT_INTERRUPT_disable>
 *     - BUTTON_NULL_PTR: Null pointer detected
 *     - BUTTON_E_NOK: Invalid port or pin configuration
 *     - BUTTON_E_OK: Interrupt disabled successfully for the button
 */
enu_button_return_state_t button_disable_INT( str_button_t *ptr_str_btn){
	enu_button_return_state_t ret_state = BUTTON_E_OK;
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	08 95       	ret
	
	// Check if the pointer is NULL
	if(ptr_str_btn == NULL){
		ret_state = BUTTON_NULL_PTR; // Return error code BUTTON_NULL_PTR if NULL pointer
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	08 95       	ret
			else{
				ret_state = BUTTON_E_NOK; // Return error code BUTTON_E_NOK for invalid pin configuration
			}
		}
		else{
			ret_state = BUTTON_E_NOK; // Return error code BUTTON_E_NOK for invalid port configuration
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	08 95       	ret
			// Disable interrupt for pin 3
			else if(ptr_str_btn->pin_config == pin3){
				EXT_INTERRUPT_disable(EXT_1);
			}
			else{
				ret_state = BUTTON_E_NOK; // Return error code BUTTON_E_NOK for invalid pin configuration
 294:	81 e0       	ldi	r24, 0x01	; 1
			ret_state = BUTTON_E_NOK; // Return error code BUTTON_E_NOK for invalid port configuration
		}
	}
	
	return ret_state; // Return the disable interrupt status
}
 296:	08 95       	ret

00000298 <LED_init>:
	if (DIO_writePIN(led.port,led.pin,STD_HIGH) == DIO_E_OK)
	{
		return LED_ERROR_OK;
	}
	return LED_ERROR_NOT_OK;
}
 298:	41 e0       	ldi	r20, 0x01	; 1
 29a:	69 2f       	mov	r22, r25
 29c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_init>
 2a0:	81 11       	cpse	r24, r1
 2a2:	85 e0       	ldi	r24, 0x05	; 5
 2a4:	08 95       	ret

000002a6 <LED_off>:
 * @param led The LED configuration structure.
 *
 * @return LED_ERROR_OK if the operation is successful, otherwise LED_ERROR_NOT_OK.
 */
u8_ledError_t LED_off(st_ledConfig_t led){
	if (DIO_writePIN(led.port,led.pin,STD_LOW) == DIO_E_OK)
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	69 2f       	mov	r22, r25
 2aa:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <DIO_writePIN>
 2ae:	81 11       	cpse	r24, r1
	{
		return LED_ERROR_OK;
	}
	return LED_ERROR_NOT_OK;
 2b0:	85 e0       	ldi	r24, 0x05	; 5
}
 2b2:	08 95       	ret

000002b4 <LED_toggle>:
 * @param led The LED configuration structure.
 *
 * @return LED_ERROR_OK if the operation is successful, otherwise LED_ERROR_NOT_OK.
 */
u8_ledError_t LED_toggle(st_ledConfig_t led){
	if (DIO_togglePIN(led.port,led.pin) == DIO_E_OK)
 2b4:	69 2f       	mov	r22, r25
 2b6:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_togglePIN>
 2ba:	81 11       	cpse	r24, r1
	{
		return LED_ERROR_OK;
	}
	return LED_ERROR_NOT_OK;
 2bc:	85 e0       	ldi	r24, 0x05	; 5
}
 2be:	08 95       	ret

000002c0 <main>:


int main(void)
{
	uint8_t u8_retVal = 0;
	u8_retVal = APP_init();
 2c0:	0e 94 93 00 	call	0x126	; 0x126 <APP_init>
	if (0 == u8_retVal)
 2c4:	81 11       	cpse	r24, r1
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <main+0xc>
	{
		APP_start();
 2c8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <APP_start>
	}
	
	
	
	
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	08 95       	ret

000002d2 <DIO_init>:
			default:
			return DIO_InvalidPort;
			break;
		}
		return DIO_E_OK;
}
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	11 f1       	breq	.+68     	; 0x31a <DIO_init+0x48>
 2d6:	30 f0       	brcs	.+12     	; 0x2e4 <DIO_init+0x12>
 2d8:	82 30       	cpi	r24, 0x02	; 2
 2da:	d1 f1       	breq	.+116    	; 0x350 <DIO_init+0x7e>
 2dc:	83 30       	cpi	r24, 0x03	; 3
 2de:	09 f4       	brne	.+2      	; 0x2e2 <DIO_init+0x10>
 2e0:	52 c0       	rjmp	.+164    	; 0x386 <DIO_init+0xb4>
 2e2:	6c c0       	rjmp	.+216    	; 0x3bc <DIO_init+0xea>
 2e4:	41 11       	cpse	r20, r1
 2e6:	0d c0       	rjmp	.+26     	; 0x302 <DIO_init+0x30>
 2e8:	2a b3       	in	r18, 0x1a	; 26
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_init+0x22>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_init+0x1e>
 2f8:	80 95       	com	r24
 2fa:	82 23       	and	r24, r18
 2fc:	8a bb       	out	0x1a, r24	; 26
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	08 95       	ret
 302:	2a b3       	in	r18, 0x1a	; 26
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_init+0x3c>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_init+0x38>
 312:	82 2b       	or	r24, r18
 314:	8a bb       	out	0x1a, r24	; 26
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	08 95       	ret
 31a:	41 11       	cpse	r20, r1
 31c:	0d c0       	rjmp	.+26     	; 0x338 <DIO_init+0x66>
 31e:	27 b3       	in	r18, 0x17	; 23
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_init+0x58>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_init+0x54>
 32e:	80 95       	com	r24
 330:	82 23       	and	r24, r18
 332:	87 bb       	out	0x17, r24	; 23
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	08 95       	ret
 338:	27 b3       	in	r18, 0x17	; 23
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_init+0x72>
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	6a 95       	dec	r22
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_init+0x6e>
 348:	82 2b       	or	r24, r18
 34a:	87 bb       	out	0x17, r24	; 23
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	08 95       	ret
 350:	41 11       	cpse	r20, r1
 352:	0d c0       	rjmp	.+26     	; 0x36e <DIO_init+0x9c>
 354:	24 b3       	in	r18, 0x14	; 20
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_init+0x8e>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	6a 95       	dec	r22
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_init+0x8a>
 364:	80 95       	com	r24
 366:	82 23       	and	r24, r18
 368:	84 bb       	out	0x14, r24	; 20
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	08 95       	ret
 36e:	24 b3       	in	r18, 0x14	; 20
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_init+0xa8>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	6a 95       	dec	r22
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_init+0xa4>
 37e:	82 2b       	or	r24, r18
 380:	84 bb       	out	0x14, r24	; 20
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	08 95       	ret
 386:	41 11       	cpse	r20, r1
 388:	0d c0       	rjmp	.+26     	; 0x3a4 <DIO_init+0xd2>
 38a:	21 b3       	in	r18, 0x11	; 17
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_init+0xc4>
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	6a 95       	dec	r22
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_init+0xc0>
 39a:	80 95       	com	r24
 39c:	82 23       	and	r24, r18
 39e:	81 bb       	out	0x11, r24	; 17
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	08 95       	ret
 3a4:	21 b3       	in	r18, 0x11	; 17
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_init+0xde>
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	6a 95       	dec	r22
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_init+0xda>
 3b4:	82 2b       	or	r24, r18
 3b6:	81 bb       	out	0x11, r24	; 17
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	08 95       	ret
 3bc:	82 e0       	ldi	r24, 0x02	; 2
 3be:	08 95       	ret

000003c0 <DIO_writePIN>:
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	11 f1       	breq	.+68     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3c4:	30 f0       	brcs	.+12     	; 0x3d2 <DIO_writePIN+0x12>
 3c6:	82 30       	cpi	r24, 0x02	; 2
 3c8:	d1 f1       	breq	.+116    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 3ca:	83 30       	cpi	r24, 0x03	; 3
 3cc:	09 f4       	brne	.+2      	; 0x3d0 <DIO_writePIN+0x10>
 3ce:	52 c0       	rjmp	.+164    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 3d0:	6c c0       	rjmp	.+216    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 3d2:	41 11       	cpse	r20, r1
 3d4:	0d c0       	rjmp	.+26     	; 0x3f0 <DIO_writePIN+0x30>
 3d6:	2b b3       	in	r18, 0x1b	; 27
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_writePIN+0x22>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	6a 95       	dec	r22
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_writePIN+0x1e>
 3e6:	80 95       	com	r24
 3e8:	82 23       	and	r24, r18
 3ea:	8b bb       	out	0x1b, r24	; 27
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	08 95       	ret
 3f0:	2b b3       	in	r18, 0x1b	; 27
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_writePIN+0x3c>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	6a 95       	dec	r22
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_writePIN+0x38>
 400:	82 2b       	or	r24, r18
 402:	8b bb       	out	0x1b, r24	; 27
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	08 95       	ret
 408:	41 11       	cpse	r20, r1
 40a:	0d c0       	rjmp	.+26     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 40c:	28 b3       	in	r18, 0x18	; 24
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	6a 95       	dec	r22
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	80 95       	com	r24
 41e:	82 23       	and	r24, r18
 420:	88 bb       	out	0x18, r24	; 24
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	08 95       	ret
 426:	28 b3       	in	r18, 0x18	; 24
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	6a 95       	dec	r22
 434:	e2 f7       	brpl	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 436:	82 2b       	or	r24, r18
 438:	88 bb       	out	0x18, r24	; 24
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	08 95       	ret
 43e:	41 11       	cpse	r20, r1
 440:	0d c0       	rjmp	.+26     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 442:	25 b3       	in	r18, 0x15	; 21
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 c0       	rjmp	.+4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	6a 95       	dec	r22
 450:	e2 f7       	brpl	.-8      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 452:	80 95       	com	r24
 454:	82 23       	and	r24, r18
 456:	85 bb       	out	0x15, r24	; 21
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	08 95       	ret
 45c:	25 b3       	in	r18, 0x15	; 21
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	02 c0       	rjmp	.+4      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	6a 95       	dec	r22
 46a:	e2 f7       	brpl	.-8      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 46c:	82 2b       	or	r24, r18
 46e:	85 bb       	out	0x15, r24	; 21
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	08 95       	ret
 474:	41 11       	cpse	r20, r1
 476:	0d c0       	rjmp	.+26     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 478:	22 b3       	in	r18, 0x12	; 18
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	6a 95       	dec	r22
 486:	e2 f7       	brpl	.-8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 488:	80 95       	com	r24
 48a:	82 23       	and	r24, r18
 48c:	82 bb       	out	0x12, r24	; 18
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	08 95       	ret
 492:	22 b3       	in	r18, 0x12	; 18
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 c0       	rjmp	.+4      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	6a 95       	dec	r22
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 4a2:	82 2b       	or	r24, r18
 4a4:	82 bb       	out	0x12, r24	; 18
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	08 95       	ret
 4aa:	82 e0       	ldi	r24, 0x02	; 2
 4ac:	08 95       	ret

000004ae <DIO_togglePIN>:
	@param port The port to which the pin belongs (porta, portb, portc, or portd).
	@param pin The pin number to be toggled.
	@return DIO_E_OK if the toggle operation is successful, otherwise DIO_InvalidPort.
*/
u8_dioErrors_t DIO_togglePIN (en_dioPorts_t port, en_dioPins_t pin){
	switch(port){
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	91 f0       	breq	.+36     	; 0x4d6 <DIO_togglePIN+0x28>
 4b2:	28 f0       	brcs	.+10     	; 0x4be <DIO_togglePIN+0x10>
 4b4:	82 30       	cpi	r24, 0x02	; 2
 4b6:	d9 f0       	breq	.+54     	; 0x4ee <DIO_togglePIN+0x40>
 4b8:	83 30       	cpi	r24, 0x03	; 3
 4ba:	29 f1       	breq	.+74     	; 0x506 <DIO_togglePIN+0x58>
 4bc:	30 c0       	rjmp	.+96     	; 0x51e <DIO_togglePIN+0x70>
		case porta:
			TOGGLE_BIT(WR_PORT_A,pin);
 4be:	2b b3       	in	r18, 0x1b	; 27
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <DIO_togglePIN+0x1c>
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	6a 95       	dec	r22
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <DIO_togglePIN+0x18>
 4ce:	82 27       	eor	r24, r18
 4d0:	8b bb       	out	0x1b, r24	; 27
		break;
		default:
		return DIO_InvalidPort;
		break;
	}
	return DIO_E_OK;
 4d2:	80 e0       	ldi	r24, 0x00	; 0
*/
u8_dioErrors_t DIO_togglePIN (en_dioPorts_t port, en_dioPins_t pin){
	switch(port){
		case porta:
			TOGGLE_BIT(WR_PORT_A,pin);
			break;
 4d4:	08 95       	ret
		case portb:
			TOGGLE_BIT(WR_PORT_B,pin);
 4d6:	28 b3       	in	r18, 0x18	; 24
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_togglePIN+0x34>
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	6a 95       	dec	r22
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO_togglePIN+0x30>
 4e6:	82 27       	eor	r24, r18
 4e8:	88 bb       	out	0x18, r24	; 24
		break;
		default:
		return DIO_InvalidPort;
		break;
	}
	return DIO_E_OK;
 4ea:	80 e0       	ldi	r24, 0x00	; 0
		case porta:
			TOGGLE_BIT(WR_PORT_A,pin);
			break;
		case portb:
			TOGGLE_BIT(WR_PORT_B,pin);
		break;
 4ec:	08 95       	ret
		case portc:
			TOGGLE_BIT(WR_PORT_C,pin);
 4ee:	25 b3       	in	r18, 0x15	; 21
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <DIO_togglePIN+0x4c>
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	6a 95       	dec	r22
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <DIO_togglePIN+0x48>
 4fe:	82 27       	eor	r24, r18
 500:	85 bb       	out	0x15, r24	; 21
		break;
		default:
		return DIO_InvalidPort;
		break;
	}
	return DIO_E_OK;
 502:	80 e0       	ldi	r24, 0x00	; 0
		case portb:
			TOGGLE_BIT(WR_PORT_B,pin);
		break;
		case portc:
			TOGGLE_BIT(WR_PORT_C,pin);
		break;
 504:	08 95       	ret
		case portd:
			TOGGLE_BIT(WR_PORT_D,pin);
 506:	22 b3       	in	r18, 0x12	; 18
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_togglePIN+0x64>
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	6a 95       	dec	r22
 514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_togglePIN+0x60>
 516:	82 27       	eor	r24, r18
 518:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_InvalidPort;
		break;
	}
	return DIO_E_OK;
 51a:	80 e0       	ldi	r24, 0x00	; 0
		case portc:
			TOGGLE_BIT(WR_PORT_C,pin);
		break;
		case portd:
			TOGGLE_BIT(WR_PORT_D,pin);
		break;
 51c:	08 95       	ret
		default:
		return DIO_InvalidPort;
 51e:	82 e0       	ldi	r24, 0x02	; 2
		break;
	}
	return DIO_E_OK;
}
 520:	08 95       	ret

00000522 <EXT_INTERRUPT_init>:
 */
u8_interruptError_t EXT_INTERRUPT_init(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
	
	// Check if the external interrupt number is within valid range
	if(en_ext_interrupt_num < INVALID_EXT_INT){
 522:	83 30       	cpi	r24, 0x03	; 3
 524:	38 f5       	brcc	.+78     	; 0x574 <EXT_INTERRUPT_init+0x52>
		switch(en_ext_interrupt_num){
 526:	81 30       	cpi	r24, 0x01	; 1
 528:	79 f0       	breq	.+30     	; 0x548 <EXT_INTERRUPT_init+0x26>
 52a:	18 f0       	brcs	.+6      	; 0x532 <EXT_INTERRUPT_init+0x10>
 52c:	82 30       	cpi	r24, 0x02	; 2
 52e:	b9 f0       	breq	.+46     	; 0x55e <EXT_INTERRUPT_init+0x3c>
 530:	23 c0       	rjmp	.+70     	; 0x578 <EXT_INTERRUPT_init+0x56>
			case EXT_0:
				sei();	
 532:	78 94       	sei
				DIO_init (portd, pin2, STD_INPUT);
 534:	40 e0       	ldi	r20, 0x00	; 0
 536:	62 e0       	ldi	r22, 0x02	; 2
 538:	83 e0       	ldi	r24, 0x03	; 3
 53a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_init>
				MCUCR_ADD |= ( arr_en_gc_edge_detection[EXT_0]<<INT0_MODE_INDEX);
 53e:	85 b7       	in	r24, 0x35	; 53
 540:	82 60       	ori	r24, 0x02	; 2
 542:	85 bf       	out	0x35, r24	; 53
 *   u8_interruptError_t: Initialization status
 *     - EXT_INT_E_OK: External interrupt initialized successfully
 *     - EXT_INT_WRONG_EXT_NUM: Invalid external interrupt number
 */
u8_interruptError_t EXT_INTERRUPT_init(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 544:	80 e0       	ldi	r24, 0x00	; 0
		switch(en_ext_interrupt_num){
			case EXT_0:
				sei();	
				DIO_init (portd, pin2, STD_INPUT);
				MCUCR_ADD |= ( arr_en_gc_edge_detection[EXT_0]<<INT0_MODE_INDEX);
				break;
 546:	08 95       	ret
			case EXT_1:
				sei();
 548:	78 94       	sei
				DIO_init (portd, pin3, STD_INPUT);
 54a:	40 e0       	ldi	r20, 0x00	; 0
 54c:	63 e0       	ldi	r22, 0x03	; 3
 54e:	83 e0       	ldi	r24, 0x03	; 3
 550:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_init>
				MCUCR_ADD |= ( arr_en_gc_edge_detection[EXT_1]<<INT1_MODE_INDEX);
 554:	85 b7       	in	r24, 0x35	; 53
 556:	8c 60       	ori	r24, 0x0C	; 12
 558:	85 bf       	out	0x35, r24	; 53
 *   u8_interruptError_t: Initialization status
 *     - EXT_INT_E_OK: External interrupt initialized successfully
 *     - EXT_INT_WRONG_EXT_NUM: Invalid external interrupt number
 */
u8_interruptError_t EXT_INTERRUPT_init(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 55a:	80 e0       	ldi	r24, 0x00	; 0
				break;
			case EXT_1:
				sei();
				DIO_init (portd, pin3, STD_INPUT);
				MCUCR_ADD |= ( arr_en_gc_edge_detection[EXT_1]<<INT1_MODE_INDEX);
				break;
 55c:	08 95       	ret
			case EXT_2:
				sei();
 55e:	78 94       	sei
				DIO_init (portb, pin2, STD_INPUT);
 560:	40 e0       	ldi	r20, 0x00	; 0
 562:	62 e0       	ldi	r22, 0x02	; 2
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_init>
				MCUCSR_ADD |= ( arr_en_gc_edge_detection[EXT_2]<<INT2_MODE_INDEX);
 56a:	84 b7       	in	r24, 0x34	; 52
 56c:	80 68       	ori	r24, 0x80	; 128
 56e:	84 bf       	out	0x34, r24	; 52
 *   u8_interruptError_t: Initialization status
 *     - EXT_INT_E_OK: External interrupt initialized successfully
 *     - EXT_INT_WRONG_EXT_NUM: Invalid external interrupt number
 */
u8_interruptError_t EXT_INTERRUPT_init(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 570:	80 e0       	ldi	r24, 0x00	; 0
				break;
			case EXT_2:
				sei();
				DIO_init (portb, pin2, STD_INPUT);
				MCUCSR_ADD |= ( arr_en_gc_edge_detection[EXT_2]<<INT2_MODE_INDEX);
				break;
 572:	08 95       	ret
				ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
				break;
		}
	}
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
 574:	82 e0       	ldi	r24, 0x02	; 2
 576:	08 95       	ret
				sei();
				DIO_init (portb, pin2, STD_INPUT);
				MCUCSR_ADD |= ( arr_en_gc_edge_detection[EXT_2]<<INT2_MODE_INDEX);
				break;
			default:
				ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
 578:	82 e0       	ldi	r24, 0x02	; 2
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
	}
	
	return ret_state; // Return the initialization status
}
 57a:	08 95       	ret

0000057c <EXT_INTERRUPT_enable>:
 */
u8_interruptError_t EXT_INTERRUPT_enable(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
	
	// Check if the external interrupt number is within valid range
	if(en_ext_interrupt_num < INVALID_EXT_INT){
 57c:	83 30       	cpi	r24, 0x03	; 3
 57e:	a8 f4       	brcc	.+42     	; 0x5aa <EXT_INTERRUPT_enable+0x2e>
		switch(en_ext_interrupt_num){
 580:	81 30       	cpi	r24, 0x01	; 1
 582:	49 f0       	breq	.+18     	; 0x596 <EXT_INTERRUPT_enable+0x1a>
 584:	18 f0       	brcs	.+6      	; 0x58c <EXT_INTERRUPT_enable+0x10>
 586:	82 30       	cpi	r24, 0x02	; 2
 588:	59 f0       	breq	.+22     	; 0x5a0 <EXT_INTERRUPT_enable+0x24>
 58a:	11 c0       	rjmp	.+34     	; 0x5ae <EXT_INTERRUPT_enable+0x32>
			case EXT_0:
				SET_BIT(GICR_ADD,INT0_Globle);
 58c:	8b b7       	in	r24, 0x3b	; 59
 58e:	80 64       	ori	r24, 0x40	; 64
 590:	8b bf       	out	0x3b, r24	; 59
 *   u8_interruptError_t: Enable status
 *     - EXT_INT_E_OK: External interrupt enabled successfully
 *     - EXT_INT_WRONG_EXT_NUM: Invalid external interrupt number
 */
u8_interruptError_t EXT_INTERRUPT_enable(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 592:	80 e0       	ldi	r24, 0x00	; 0
	// Check if the external interrupt number is within valid range
	if(en_ext_interrupt_num < INVALID_EXT_INT){
		switch(en_ext_interrupt_num){
			case EXT_0:
				SET_BIT(GICR_ADD,INT0_Globle);
				break;
 594:	08 95       	ret
			case EXT_1:
				SET_BIT(GICR_ADD,INT1_Globle);
 596:	8b b7       	in	r24, 0x3b	; 59
 598:	80 68       	ori	r24, 0x80	; 128
 59a:	8b bf       	out	0x3b, r24	; 59
 *   u8_interruptError_t: Enable status
 *     - EXT_INT_E_OK: External interrupt enabled successfully
 *     - EXT_INT_WRONG_EXT_NUM: Invalid external interrupt number
 */
u8_interruptError_t EXT_INTERRUPT_enable(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 59c:	80 e0       	ldi	r24, 0x00	; 0
			case EXT_0:
				SET_BIT(GICR_ADD,INT0_Globle);
				break;
			case EXT_1:
				SET_BIT(GICR_ADD,INT1_Globle);
				break;
 59e:	08 95       	ret
			case EXT_2:
				SET_BIT(GICR_ADD,INT2_Globle);
 5a0:	8b b7       	in	r24, 0x3b	; 59
 5a2:	80 62       	ori	r24, 0x20	; 32
 5a4:	8b bf       	out	0x3b, r24	; 59
 *   u8_interruptError_t: Enable status
 *     - EXT_INT_E_OK: External interrupt enabled successfully
 *     - EXT_INT_WRONG_EXT_NUM: Invalid external interrupt number
 */
u8_interruptError_t EXT_INTERRUPT_enable(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 5a6:	80 e0       	ldi	r24, 0x00	; 0
			case EXT_1:
				SET_BIT(GICR_ADD,INT1_Globle);
				break;
			case EXT_2:
				SET_BIT(GICR_ADD,INT2_Globle);
				break;
 5a8:	08 95       	ret
				ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
				break;
		}
	}
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
 5aa:	82 e0       	ldi	r24, 0x02	; 2
 5ac:	08 95       	ret
				break;
			case EXT_2:
				SET_BIT(GICR_ADD,INT2_Globle);
				break;
			default:
				ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
 5ae:	82 e0       	ldi	r24, 0x02	; 2
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
	}
	
	return ret_state; // Return the enable status
}
 5b0:	08 95       	ret

000005b2 <EXT_INTERRUPT_disable>:
 */
u8_interruptError_t EXT_INTERRUPT_disable(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
	
	// Check if the external interrupt number is within valid range
	if(en_ext_interrupt_num < INVALID_EXT_INT){
 5b2:	83 30       	cpi	r24, 0x03	; 3
 5b4:	a8 f4       	brcc	.+42     	; 0x5e0 <EXT_INTERRUPT_disable+0x2e>
		switch(en_ext_interrupt_num){
 5b6:	81 30       	cpi	r24, 0x01	; 1
 5b8:	49 f0       	breq	.+18     	; 0x5cc <EXT_INTERRUPT_disable+0x1a>
 5ba:	18 f0       	brcs	.+6      	; 0x5c2 <EXT_INTERRUPT_disable+0x10>
 5bc:	82 30       	cpi	r24, 0x02	; 2
 5be:	59 f0       	breq	.+22     	; 0x5d6 <EXT_INTERRUPT_disable+0x24>
 5c0:	11 c0       	rjmp	.+34     	; 0x5e4 <EXT_INTERRUPT_disable+0x32>
			case EXT_0:
				CLEAR_BIT(GICR_ADD,INT0_Globle);
 5c2:	8b b7       	in	r24, 0x3b	; 59
 5c4:	8f 7b       	andi	r24, 0xBF	; 191
 5c6:	8b bf       	out	0x3b, r24	; 59
 *   u8_interruptError_t: Disable status
 *     - EXT_INT_E_OK: External interrupt disabled successfully
 *     - EXT_INT_WRONG_EXT_NUM: Invalid external interrupt number
 */
u8_interruptError_t EXT_INTERRUPT_disable(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 5c8:	80 e0       	ldi	r24, 0x00	; 0
	// Check if the external interrupt number is within valid range
	if(en_ext_interrupt_num < INVALID_EXT_INT){
		switch(en_ext_interrupt_num){
			case EXT_0:
				CLEAR_BIT(GICR_ADD,INT0_Globle);
				break;
 5ca:	08 95       	ret
			case EXT_1:
				CLEAR_BIT(GICR_ADD,INT1_Globle);
 5cc:	8b b7       	in	r24, 0x3b	; 59
 5ce:	8f 77       	andi	r24, 0x7F	; 127
 5d0:	8b bf       	out	0x3b, r24	; 59
 *   u8_interruptError_t: Disable status
 *     - EXT_INT_E_OK: External interrupt disabled successfully
 *     - EXT_INT_WRONG_EXT_NUM: Invalid external interrupt number
 */
u8_interruptError_t EXT_INTERRUPT_disable(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 5d2:	80 e0       	ldi	r24, 0x00	; 0
			case EXT_0:
				CLEAR_BIT(GICR_ADD,INT0_Globle);
				break;
			case EXT_1:
				CLEAR_BIT(GICR_ADD,INT1_Globle);
				break;
 5d4:	08 95       	ret
			case EXT_2:
				CLEAR_BIT(GICR_ADD,INT2_Globle);
 5d6:	8b b7       	in	r24, 0x3b	; 59
 5d8:	8f 7d       	andi	r24, 0xDF	; 223
 5da:	8b bf       	out	0x3b, r24	; 59
 *   u8_interruptError_t: Disable status
 *     - EXT_INT_E_OK: External interrupt disabled successfully
 *     - EXT_INT_WRONG_EXT_NUM: Invalid external interrupt number
 */
u8_interruptError_t EXT_INTERRUPT_disable(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 5dc:	80 e0       	ldi	r24, 0x00	; 0
			case EXT_1:
				CLEAR_BIT(GICR_ADD,INT1_Globle);
				break;
			case EXT_2:
				CLEAR_BIT(GICR_ADD,INT2_Globle);
				break;
 5de:	08 95       	ret
				ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
				break;
		}
	}
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
 5e0:	82 e0       	ldi	r24, 0x02	; 2
 5e2:	08 95       	ret
				break;
			case EXT_2:
				CLEAR_BIT(GICR_ADD,INT2_Globle);
				break;
			default:
				ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
 5e4:	82 e0       	ldi	r24, 0x02	; 2
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
	}
	
	return ret_state; // Return the disable status
}
 5e6:	08 95       	ret

000005e8 <EXT_INTERRUPT_set_callback_init>:
 */
u8_interruptError_t EXT_INTERRUPT_set_callback_init(en_ext_interrupt_num_t en_ext_interrupt_num, void(*callback)(void)){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
	
	// Check if the external interrupt number is within valid range
	if(en_ext_interrupt_num < INVALID_EXT_INT){
 5e8:	83 30       	cpi	r24, 0x03	; 3
 5ea:	68 f4       	brcc	.+26     	; 0x606 <EXT_INTERRUPT_set_callback_init+0x1e>
		if(callback != NULL){
 5ec:	61 15       	cp	r22, r1
 5ee:	71 05       	cpc	r23, r1
 5f0:	61 f0       	breq	.+24     	; 0x60a <EXT_INTERRUPT_set_callback_init+0x22>
			EXT_INT_callbacks[en_ext_interrupt_num] = callback; // Set the callback function pointer for the specified external interrupt
 5f2:	e8 2f       	mov	r30, r24
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	ee 0f       	add	r30, r30
 5f8:	ff 1f       	adc	r31, r31
 5fa:	e2 58       	subi	r30, 0x82	; 130
 5fc:	ff 4f       	sbci	r31, 0xFF	; 255
 5fe:	71 83       	std	Z+1, r23	; 0x01
 600:	60 83       	st	Z, r22
 *     - EXT_INT_E_OK: Callback set successfully
 *     - EXT_INT_NULL_PTR: Null pointer provided for the callback
 *     - EXT_INT_WRONG_EXT_NUM: Invalid external interrupt number
 */
u8_interruptError_t EXT_INTERRUPT_set_callback_init(en_ext_interrupt_num_t en_ext_interrupt_num, void(*callback)(void)){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	08 95       	ret
		else{
			ret_state = EXT_INT_NULL_PTR; // Return error code EXT_INT_NULL_PTR for null pointer provided for the callback
		}
	}
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
 606:	82 e0       	ldi	r24, 0x02	; 2
 608:	08 95       	ret
	if(en_ext_interrupt_num < INVALID_EXT_INT){
		if(callback != NULL){
			EXT_INT_callbacks[en_ext_interrupt_num] = callback; // Set the callback function pointer for the specified external interrupt
		}
		else{
			ret_state = EXT_INT_NULL_PTR; // Return error code EXT_INT_NULL_PTR for null pointer provided for the callback
 60a:	83 e0       	ldi	r24, 0x03	; 3
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM; // Return error code EXT_INT_WRONG_EXT_NUM for invalid external interrupt number
	}
	
	return ret_state; // Return the set callback status
}
 60c:	08 95       	ret

0000060e <__vector_1>:
 * Interrupt Service Routine: EXT_INT0
 * -----------------------------------
 * Executes the callback function for external interrupt 0.
 * If the callback function is not set, it returns immediately.
 */
ISR(EXT_INT0){
 60e:	1f 92       	push	r1
 610:	0f 92       	push	r0
 612:	0f b6       	in	r0, 0x3f	; 63
 614:	0f 92       	push	r0
 616:	11 24       	eor	r1, r1
 618:	2f 93       	push	r18
 61a:	3f 93       	push	r19
 61c:	4f 93       	push	r20
 61e:	5f 93       	push	r21
 620:	6f 93       	push	r22
 622:	7f 93       	push	r23
 624:	8f 93       	push	r24
 626:	9f 93       	push	r25
 628:	af 93       	push	r26
 62a:	bf 93       	push	r27
 62c:	ef 93       	push	r30
 62e:	ff 93       	push	r31
	if(EXT_INT_callbacks[EXT_0] != NULL){
 630:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <__data_end>
 634:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <__data_end+0x1>
 638:	30 97       	sbiw	r30, 0x00	; 0
 63a:	09 f0       	breq	.+2      	; 0x63e <__vector_1+0x30>
		(*EXT_INT_callbacks[EXT_0])(); // Call the callback function for external interrupt 0
 63c:	09 95       	icall
	}
	else{
		return; // If callback function is not set, return immediately
	}
}
 63e:	ff 91       	pop	r31
 640:	ef 91       	pop	r30
 642:	bf 91       	pop	r27
 644:	af 91       	pop	r26
 646:	9f 91       	pop	r25
 648:	8f 91       	pop	r24
 64a:	7f 91       	pop	r23
 64c:	6f 91       	pop	r22
 64e:	5f 91       	pop	r21
 650:	4f 91       	pop	r20
 652:	3f 91       	pop	r19
 654:	2f 91       	pop	r18
 656:	0f 90       	pop	r0
 658:	0f be       	out	0x3f, r0	; 63
 65a:	0f 90       	pop	r0
 65c:	1f 90       	pop	r1
 65e:	18 95       	reti

00000660 <__vector_2>:
 * Interrupt Service Routine: EXT_INT1
 * -----------------------------------
 * Executes the callback function for external interrupt 1.
 * If the callback function is not set, it returns immediately.
 */
ISR(EXT_INT1){
 660:	1f 92       	push	r1
 662:	0f 92       	push	r0
 664:	0f b6       	in	r0, 0x3f	; 63
 666:	0f 92       	push	r0
 668:	11 24       	eor	r1, r1
 66a:	2f 93       	push	r18
 66c:	3f 93       	push	r19
 66e:	4f 93       	push	r20
 670:	5f 93       	push	r21
 672:	6f 93       	push	r22
 674:	7f 93       	push	r23
 676:	8f 93       	push	r24
 678:	9f 93       	push	r25
 67a:	af 93       	push	r26
 67c:	bf 93       	push	r27
 67e:	ef 93       	push	r30
 680:	ff 93       	push	r31
	if(EXT_INT_callbacks[EXT_1] != NULL){
 682:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__data_end+0x2>
 686:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <__data_end+0x3>
 68a:	30 97       	sbiw	r30, 0x00	; 0
 68c:	09 f0       	breq	.+2      	; 0x690 <__vector_2+0x30>
		(*EXT_INT_callbacks[EXT_1])(); // Call the callback function for external interrupt 1
 68e:	09 95       	icall
	}
	else{
		return; // If callback function is not set, return immediately
	}
}
 690:	ff 91       	pop	r31
 692:	ef 91       	pop	r30
 694:	bf 91       	pop	r27
 696:	af 91       	pop	r26
 698:	9f 91       	pop	r25
 69a:	8f 91       	pop	r24
 69c:	7f 91       	pop	r23
 69e:	6f 91       	pop	r22
 6a0:	5f 91       	pop	r21
 6a2:	4f 91       	pop	r20
 6a4:	3f 91       	pop	r19
 6a6:	2f 91       	pop	r18
 6a8:	0f 90       	pop	r0
 6aa:	0f be       	out	0x3f, r0	; 63
 6ac:	0f 90       	pop	r0
 6ae:	1f 90       	pop	r1
 6b0:	18 95       	reti

000006b2 <__vector_3>:
 * Interrupt Service Routine: EXT_INT2
 * -----------------------------------
 * Executes the callback function for external interrupt 2.
 * If the callback function is not set, it returns immediately.
 */
ISR(EXT_INT2){
 6b2:	1f 92       	push	r1
 6b4:	0f 92       	push	r0
 6b6:	0f b6       	in	r0, 0x3f	; 63
 6b8:	0f 92       	push	r0
 6ba:	11 24       	eor	r1, r1
 6bc:	2f 93       	push	r18
 6be:	3f 93       	push	r19
 6c0:	4f 93       	push	r20
 6c2:	5f 93       	push	r21
 6c4:	6f 93       	push	r22
 6c6:	7f 93       	push	r23
 6c8:	8f 93       	push	r24
 6ca:	9f 93       	push	r25
 6cc:	af 93       	push	r26
 6ce:	bf 93       	push	r27
 6d0:	ef 93       	push	r30
 6d2:	ff 93       	push	r31
	if(EXT_INT_callbacks[EXT_2] != NULL){
 6d4:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <__data_end+0x4>
 6d8:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <__data_end+0x5>
 6dc:	30 97       	sbiw	r30, 0x00	; 0
 6de:	09 f0       	breq	.+2      	; 0x6e2 <__vector_3+0x30>
		(*EXT_INT_callbacks[EXT_2])(); // Call the callback function for external interrupt 2
 6e0:	09 95       	icall
	}
	else{
		return; // If callback function is not set, return immediately
	}
}
 6e2:	ff 91       	pop	r31
 6e4:	ef 91       	pop	r30
 6e6:	bf 91       	pop	r27
 6e8:	af 91       	pop	r26
 6ea:	9f 91       	pop	r25
 6ec:	8f 91       	pop	r24
 6ee:	7f 91       	pop	r23
 6f0:	6f 91       	pop	r22
 6f2:	5f 91       	pop	r21
 6f4:	4f 91       	pop	r20
 6f6:	3f 91       	pop	r19
 6f8:	2f 91       	pop	r18
 6fa:	0f 90       	pop	r0
 6fc:	0f be       	out	0x3f, r0	; 63
 6fe:	0f 90       	pop	r0
 700:	1f 90       	pop	r1
 702:	18 95       	reti

00000704 <TIMER2_enuInit>:
	enu_timerStatus_t errorStatus = TIMER_OK;

	CLEAR_BIT(TIMSK, TOIE2);

	return errorStatus;
}
 704:	84 30       	cpi	r24, 0x04	; 4
 706:	48 f5       	brcc	.+82     	; 0x75a <TIMER2_enuInit+0x56>
 708:	14 bc       	out	0x24, r1	; 36
 70a:	81 30       	cpi	r24, 0x01	; 1
 70c:	71 f0       	breq	.+28     	; 0x72a <TIMER2_enuInit+0x26>
 70e:	28 f0       	brcs	.+10     	; 0x71a <TIMER2_enuInit+0x16>
 710:	82 30       	cpi	r24, 0x02	; 2
 712:	99 f0       	breq	.+38     	; 0x73a <TIMER2_enuInit+0x36>
 714:	83 30       	cpi	r24, 0x03	; 3
 716:	c9 f0       	breq	.+50     	; 0x74a <TIMER2_enuInit+0x46>
 718:	22 c0       	rjmp	.+68     	; 0x75e <TIMER2_enuInit+0x5a>
 71a:	85 b5       	in	r24, 0x25	; 37
 71c:	87 7f       	andi	r24, 0xF7	; 247
 71e:	85 bd       	out	0x25, r24	; 37
 720:	85 b5       	in	r24, 0x25	; 37
 722:	8f 7b       	andi	r24, 0xBF	; 191
 724:	85 bd       	out	0x25, r24	; 37
 726:	80 e0       	ldi	r24, 0x00	; 0
 728:	08 95       	ret
 72a:	85 b5       	in	r24, 0x25	; 37
 72c:	87 7f       	andi	r24, 0xF7	; 247
 72e:	85 bd       	out	0x25, r24	; 37
 730:	85 b5       	in	r24, 0x25	; 37
 732:	80 64       	ori	r24, 0x40	; 64
 734:	85 bd       	out	0x25, r24	; 37
 736:	80 e0       	ldi	r24, 0x00	; 0
 738:	08 95       	ret
 73a:	85 b5       	in	r24, 0x25	; 37
 73c:	88 60       	ori	r24, 0x08	; 8
 73e:	85 bd       	out	0x25, r24	; 37
 740:	85 b5       	in	r24, 0x25	; 37
 742:	8f 7b       	andi	r24, 0xBF	; 191
 744:	85 bd       	out	0x25, r24	; 37
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	08 95       	ret
 74a:	85 b5       	in	r24, 0x25	; 37
 74c:	88 60       	ori	r24, 0x08	; 8
 74e:	85 bd       	out	0x25, r24	; 37
 750:	85 b5       	in	r24, 0x25	; 37
 752:	80 64       	ori	r24, 0x40	; 64
 754:	85 bd       	out	0x25, r24	; 37
 756:	80 e0       	ldi	r24, 0x00	; 0
 758:	08 95       	ret
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	08 95       	ret
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	08 95       	ret

00000762 <TIMER2_enuSetPrescallar>:
 762:	88 30       	cpi	r24, 0x08	; 8
 764:	70 f4       	brcc	.+28     	; 0x782 <TIMER2_enuSetPrescallar+0x20>
 766:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <gl_enu_prescaller>
 76a:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <gl_u8_timerStatus>
 76e:	91 30       	cpi	r25, 0x01	; 1
 770:	51 f4       	brne	.+20     	; 0x786 <TIMER2_enuSetPrescallar+0x24>
 772:	95 b5       	in	r25, 0x25	; 37
 774:	98 7f       	andi	r25, 0xF8	; 248
 776:	89 2b       	or	r24, r25
 778:	95 b5       	in	r25, 0x25	; 37
 77a:	89 2b       	or	r24, r25
 77c:	85 bd       	out	0x25, r24	; 37
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	08 95       	ret
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	08 95       	ret
 786:	80 e0       	ldi	r24, 0x00	; 0
 788:	08 95       	ret

0000078a <TIMER2_enuOVFIrqEnable>:
 78a:	88 b7       	in	r24, 0x38	; 56
 78c:	80 64       	ori	r24, 0x40	; 64
 78e:	88 bf       	out	0x38, r24	; 56
 790:	89 b7       	in	r24, 0x39	; 57
 792:	80 64       	ori	r24, 0x40	; 64
 794:	89 bf       	out	0x39, r24	; 57
 796:	80 e0       	ldi	r24, 0x00	; 0
 798:	08 95       	ret

0000079a <TIMER2_enuStart>:
/*************************************************************************************************************/
enu_timerStatus_t TIMER2_enuStart(void)
{
	enu_timerStatus_t errorStatus = TIMER_OK;

	TCCR2 |=  gl_enu_prescaller << PRESCALLER_OFFSET;
 79a:	95 b5       	in	r25, 0x25	; 37
 79c:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <gl_enu_prescaller>
 7a0:	89 2b       	or	r24, r25
 7a2:	85 bd       	out	0x25, r24	; 37
	gl_u8_timerStatus  = RUNNING;
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <gl_u8_timerStatus>

	return errorStatus;
}
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	08 95       	ret

000007ae <TIMER2_vidStop>:
/*************************************************************************************************************/
enu_timerStatus_t TIMER2_vidStop(void)
{
	enu_timerStatus_t errorStatus = TIMER_OK;

	TCCR2 &=  PRESCALLER_CLR_MSK;
 7ae:	85 b5       	in	r24, 0x25	; 37
 7b0:	88 7f       	andi	r24, 0xF8	; 248
 7b2:	85 bd       	out	0x25, r24	; 37
	gl_u8_timerStatus = STOPPED;
 7b4:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <gl_u8_timerStatus>

	return errorStatus;
}
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	08 95       	ret

000007bc <TIMER2_enuSetTime_ms>:
/*************************************************************************************************************/
enu_timerStatus_t TIMER2_enuSetTime_ms(uint8_t u32_time_ms)
{
 7bc:	cf 92       	push	r12
 7be:	df 92       	push	r13
 7c0:	ef 92       	push	r14
 7c2:	ff 92       	push	r15
 7c4:	cf 93       	push	r28
 7c6:	c8 2f       	mov	r28, r24
	enu_timerStatus_t errorStatus = TIMER_OK;
	uint8_t desired_ticks;
	float32_t tick_time_ms;
	if( u32_time_ms < MAX_TIM_MS )
	{
		tick_time_ms = ((float32_t)prescaller_map[gl_enu_prescaller]) / ((uint32_t)F_CPU / 1000U)  ;
 7c8:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <gl_enu_prescaller>
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	ee 0f       	add	r30, r30
 7d0:	ff 1f       	adc	r31, r31
 7d2:	ef 58       	subi	r30, 0x8F	; 143
 7d4:	ff 4f       	sbci	r31, 0xFF	; 255
 7d6:	60 81       	ld	r22, Z
 7d8:	71 81       	ldd	r23, Z+1	; 0x01
 7da:	80 e0       	ldi	r24, 0x00	; 0
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	0e 94 d3 06 	call	0xda6	; 0xda6 <__floatunsisf>
 7e2:	20 e0       	ldi	r18, 0x00	; 0
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	4a ef       	ldi	r20, 0xFA	; 250
 7e8:	55 e4       	ldi	r21, 0x45	; 69
 7ea:	0e 94 32 06 	call	0xc64	; 0xc64 <__divsf3>
 7ee:	6b 01       	movw	r12, r22
 7f0:	7c 01       	movw	r14, r24
		desired_ticks = u32_time_ms / tick_time_ms;
 7f2:	6c 2f       	mov	r22, r28
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__floatsisf>
 7fe:	a7 01       	movw	r20, r14
 800:	96 01       	movw	r18, r12
 802:	0e 94 32 06 	call	0xc64	; 0xc64 <__divsf3>
 806:	0e 94 a4 06 	call	0xd48	; 0xd48 <__fixunssfsi>
		{
			gl_u8_ovf = 1;
		}
		else if(desired_ticks < OVF_TICKS)
		{
			gl_u8_preload = OVF_TICKS - desired_ticks;
 80a:	61 95       	neg	r22
 80c:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <gl_u8_preload>
			TCNT2 = gl_u8_preload;
 810:	64 bd       	out	0x24, r22	; 36
			errorStatus = TIMER_NOK;
		}


		return errorStatus;
	}
 812:	80 e0       	ldi	r24, 0x00	; 0
 814:	cf 91       	pop	r28
 816:	ff 90       	pop	r15
 818:	ef 90       	pop	r14
 81a:	df 90       	pop	r13
 81c:	cf 90       	pop	r12
 81e:	08 95       	ret

00000820 <TIMER2_vidSetcbf_OVF>:

/*************************************************************************************************************/
void TIMER2_vidSetcbf_OVF(ptrFunc cbf)
{
	if (cbf != NULL)
 820:	00 97       	sbiw	r24, 0x00	; 0
 822:	21 f0       	breq	.+8      	; 0x82c <TIMER2_vidSetcbf_OVF+0xc>
	{
		gl_CallFunc = cbf;
 824:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <gl_CallFunc+0x1>
 828:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <gl_CallFunc>
 82c:	08 95       	ret

0000082e <__vector_5>:

/*************************************************************************************************************
 * 							ISR Interrupt Handling
 ************************************************************************************************************/
ISR(TIMER2_OVF)
{
 82e:	1f 92       	push	r1
 830:	0f 92       	push	r0
 832:	0f b6       	in	r0, 0x3f	; 63
 834:	0f 92       	push	r0
 836:	11 24       	eor	r1, r1
 838:	2f 93       	push	r18
 83a:	3f 93       	push	r19
 83c:	4f 93       	push	r20
 83e:	5f 93       	push	r21
 840:	6f 93       	push	r22
 842:	7f 93       	push	r23
 844:	8f 93       	push	r24
 846:	9f 93       	push	r25
 848:	af 93       	push	r26
 84a:	bf 93       	push	r27
 84c:	ef 93       	push	r30
 84e:	ff 93       	push	r31
	if (gl_CallFunc != NULL)
 850:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <gl_CallFunc>
 854:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <gl_CallFunc+0x1>
 858:	89 2b       	or	r24, r25
 85a:	41 f0       	breq	.+16     	; 0x86c <__stack+0xd>
	{
		TCNT2 = gl_u8_preload;
 85c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <gl_u8_preload>
 860:	84 bd       	out	0x24, r24	; 36
		gl_CallFunc();
 862:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <gl_CallFunc>
 866:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <gl_CallFunc+0x1>
 86a:	09 95       	icall
			TCNT2 = gl_u8_preload;
			gl_CallFunc();	
			
		}
	}*/
}
 86c:	ff 91       	pop	r31
 86e:	ef 91       	pop	r30
 870:	bf 91       	pop	r27
 872:	af 91       	pop	r26
 874:	9f 91       	pop	r25
 876:	8f 91       	pop	r24
 878:	7f 91       	pop	r23
 87a:	6f 91       	pop	r22
 87c:	5f 91       	pop	r21
 87e:	4f 91       	pop	r20
 880:	3f 91       	pop	r19
 882:	2f 91       	pop	r18
 884:	0f 90       	pop	r0
 886:	0f be       	out	0x3f, r0	; 63
 888:	0f 90       	pop	r0
 88a:	1f 90       	pop	r1
 88c:	18 95       	reti

0000088e <SOS_token_config_param>:
	else
	{
		enu_system_status_retVal = SOS_STATUS_INVALID_STATE;
	}
	return enu_system_status_retVal;
}
 88e:	9c 01       	movw	r18, r24
 890:	e6 2f       	mov	r30, r22
 892:	f0 e0       	ldi	r31, 0x00	; 0
 894:	e8 54       	subi	r30, 0x48	; 72
 896:	fe 4f       	sbci	r31, 0xFE	; 254
 898:	80 81       	ld	r24, Z
 89a:	81 11       	cpse	r24, r1
 89c:	1b c0       	rjmp	.+54     	; 0x8d4 <SOS_token_config_param+0x46>
 89e:	e4 2f       	mov	r30, r20
 8a0:	f0 e0       	ldi	r31, 0x00	; 0
 8a2:	ec 5a       	subi	r30, 0xAC	; 172
 8a4:	fe 4f       	sbci	r31, 0xFE	; 254
 8a6:	80 81       	ld	r24, Z
 8a8:	81 11       	cpse	r24, r1
 8aa:	16 c0       	rjmp	.+44     	; 0x8d8 <SOS_token_config_param+0x4a>
 8ac:	91 e0       	ldi	r25, 0x01	; 1
 8ae:	0c c0       	rjmp	.+24     	; 0x8c8 <SOS_token_config_param+0x3a>
 8b0:	86 e0       	ldi	r24, 0x06	; 6
 8b2:	98 9f       	mul	r25, r24
 8b4:	f0 01       	movw	r30, r0
 8b6:	11 24       	eor	r1, r1
 8b8:	e4 5e       	subi	r30, 0xE4	; 228
 8ba:	fd 4f       	sbci	r31, 0xFD	; 253
 8bc:	40 81       	ld	r20, Z
 8be:	51 81       	ldd	r21, Z+1	; 0x01
 8c0:	42 17       	cp	r20, r18
 8c2:	53 07       	cpc	r21, r19
 8c4:	59 f0       	breq	.+22     	; 0x8dc <SOS_token_config_param+0x4e>
 8c6:	9f 5f       	subi	r25, 0xFF	; 255
 8c8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <u8_gs_max_count_of_tasks>
 8cc:	98 17       	cp	r25, r24
 8ce:	80 f3       	brcs	.-32     	; 0x8b0 <SOS_token_config_param+0x22>
 8d0:	80 e0       	ldi	r24, 0x00	; 0
 8d2:	08 95       	ret
 8d4:	87 e0       	ldi	r24, 0x07	; 7
 8d6:	08 95       	ret
 8d8:	87 e0       	ldi	r24, 0x07	; 7
 8da:	08 95       	ret
 8dc:	87 e0       	ldi	r24, 0x07	; 7
 8de:	08 95       	ret

000008e0 <SOS_rearrange_tasks>:
 8e0:	6f 92       	push	r6
 8e2:	7f 92       	push	r7
 8e4:	9f 92       	push	r9
 8e6:	af 92       	push	r10
 8e8:	bf 92       	push	r11
 8ea:	cf 92       	push	r12
 8ec:	df 92       	push	r13
 8ee:	ef 92       	push	r14
 8f0:	ff 92       	push	r15
 8f2:	0f 93       	push	r16
 8f4:	1f 93       	push	r17
 8f6:	cf 93       	push	r28
 8f8:	df 93       	push	r29
 8fa:	51 e0       	ldi	r21, 0x01	; 1
 8fc:	83 c0       	rjmp	.+262    	; 0xa04 <SOS_rearrange_tasks+0x124>
 8fe:	aa 24       	eor	r10, r10
 900:	a3 94       	inc	r10
 902:	a5 0e       	add	r10, r21
 904:	4a 2d       	mov	r20, r10
 906:	7a c0       	rjmp	.+244    	; 0x9fc <SOS_rearrange_tasks+0x11c>
 908:	25 2f       	mov	r18, r21
 90a:	30 e0       	ldi	r19, 0x00	; 0
 90c:	f9 01       	movw	r30, r18
 90e:	ee 0f       	add	r30, r30
 910:	ff 1f       	adc	r31, r31
 912:	e2 0f       	add	r30, r18
 914:	f3 1f       	adc	r31, r19
 916:	ee 0f       	add	r30, r30
 918:	ff 1f       	adc	r31, r31
 91a:	e4 5e       	subi	r30, 0xE4	; 228
 91c:	fd 4f       	sbci	r31, 0xFD	; 253
 91e:	73 81       	ldd	r23, Z+3	; 0x03
 920:	84 2f       	mov	r24, r20
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	fc 01       	movw	r30, r24
 926:	ee 0f       	add	r30, r30
 928:	ff 1f       	adc	r31, r31
 92a:	e8 0f       	add	r30, r24
 92c:	f9 1f       	adc	r31, r25
 92e:	ee 0f       	add	r30, r30
 930:	ff 1f       	adc	r31, r31
 932:	e4 5e       	subi	r30, 0xE4	; 228
 934:	fd 4f       	sbci	r31, 0xFD	; 253
 936:	63 81       	ldd	r22, Z+3	; 0x03
 938:	67 17       	cp	r22, r23
 93a:	08 f0       	brcs	.+2      	; 0x93e <SOS_rearrange_tasks+0x5e>
 93c:	5e c0       	rjmp	.+188    	; 0x9fa <SOS_rearrange_tasks+0x11a>
 93e:	39 01       	movw	r6, r18
 940:	66 0c       	add	r6, r6
 942:	77 1c       	adc	r7, r7
 944:	f3 01       	movw	r30, r6
 946:	e2 0f       	add	r30, r18
 948:	f3 1f       	adc	r31, r19
 94a:	ee 0f       	add	r30, r30
 94c:	ff 1f       	adc	r31, r31
 94e:	e4 5e       	subi	r30, 0xE4	; 228
 950:	fd 4f       	sbci	r31, 0xFD	; 253
 952:	00 81       	ld	r16, Z
 954:	11 81       	ldd	r17, Z+1	; 0x01
 956:	bc 01       	movw	r22, r24
 958:	66 0f       	add	r22, r22
 95a:	77 1f       	adc	r23, r23
 95c:	db 01       	movw	r26, r22
 95e:	a8 0f       	add	r26, r24
 960:	b9 1f       	adc	r27, r25
 962:	aa 0f       	add	r26, r26
 964:	bb 1f       	adc	r27, r27
 966:	a4 5e       	subi	r26, 0xE4	; 228
 968:	bd 4f       	sbci	r27, 0xFD	; 253
 96a:	ed 90       	ld	r14, X+
 96c:	fc 90       	ld	r15, X
 96e:	11 97       	sbiw	r26, 0x01	; 1
 970:	f1 82       	std	Z+1, r15	; 0x01
 972:	e0 82       	st	Z, r14
 974:	11 96       	adiw	r26, 0x01	; 1
 976:	1c 93       	st	X, r17
 978:	0e 93       	st	-X, r16
 97a:	83 01       	movw	r16, r6
 97c:	05 57       	subi	r16, 0x75	; 117
 97e:	1f 4f       	sbci	r17, 0xFF	; 255
 980:	e8 01       	movw	r28, r16
 982:	98 80       	ld	r9, Y
 984:	eb 01       	movw	r28, r22
 986:	c5 57       	subi	r28, 0x75	; 117
 988:	df 4f       	sbci	r29, 0xFF	; 255
 98a:	7e 01       	movw	r14, r28
 98c:	c8 80       	ld	r12, Y
 98e:	d9 80       	ldd	r13, Y+1	; 0x01
 990:	e8 01       	movw	r28, r16
 992:	d9 82       	std	Y+1, r13	; 0x01
 994:	c8 82       	st	Y, r12
 996:	09 2d       	mov	r16, r9
 998:	10 e0       	ldi	r17, 0x00	; 0
 99a:	e7 01       	movw	r28, r14
 99c:	19 83       	std	Y+1, r17	; 0x01
 99e:	08 83       	st	Y, r16
 9a0:	04 81       	ldd	r16, Z+4	; 0x04
 9a2:	15 81       	ldd	r17, Z+5	; 0x05
 9a4:	14 96       	adiw	r26, 0x04	; 4
 9a6:	ed 90       	ld	r14, X+
 9a8:	fc 90       	ld	r15, X
 9aa:	15 97       	sbiw	r26, 0x05	; 5
 9ac:	f5 82       	std	Z+5, r15	; 0x05
 9ae:	e4 82       	std	Z+4, r14	; 0x04
 9b0:	15 96       	adiw	r26, 0x05	; 5
 9b2:	1c 93       	st	X, r17
 9b4:	0e 93       	st	-X, r16
 9b6:	14 97       	sbiw	r26, 0x04	; 4
 9b8:	02 81       	ldd	r16, Z+2	; 0x02
 9ba:	12 96       	adiw	r26, 0x02	; 2
 9bc:	1c 91       	ld	r17, X
 9be:	12 97       	sbiw	r26, 0x02	; 2
 9c0:	12 83       	std	Z+2, r17	; 0x02
 9c2:	12 96       	adiw	r26, 0x02	; 2
 9c4:	0c 93       	st	X, r16
 9c6:	12 97       	sbiw	r26, 0x02	; 2
 9c8:	e2 80       	ldd	r14, Z+2	; 0x02
 9ca:	f1 2c       	mov	r15, r1
 9cc:	e7 01       	movw	r28, r14
 9ce:	c8 54       	subi	r28, 0x48	; 72
 9d0:	de 4f       	sbci	r29, 0xFE	; 254
 9d2:	58 83       	st	Y, r21
 9d4:	10 e0       	ldi	r17, 0x00	; 0
 9d6:	08 54       	subi	r16, 0x48	; 72
 9d8:	1e 4f       	sbci	r17, 0xFE	; 254
 9da:	e8 01       	movw	r28, r16
 9dc:	48 83       	st	Y, r20
 9de:	13 81       	ldd	r17, Z+3	; 0x03
 9e0:	13 96       	adiw	r26, 0x03	; 3
 9e2:	ec 91       	ld	r30, X
 9e4:	13 97       	sbiw	r26, 0x03	; 3
 9e6:	e3 01       	movw	r28, r6
 9e8:	c2 0f       	add	r28, r18
 9ea:	d3 1f       	adc	r29, r19
 9ec:	cc 0f       	add	r28, r28
 9ee:	dd 1f       	adc	r29, r29
 9f0:	c4 5e       	subi	r28, 0xE4	; 228
 9f2:	dd 4f       	sbci	r29, 0xFD	; 253
 9f4:	eb 83       	std	Y+3, r30	; 0x03
 9f6:	fd 01       	movw	r30, r26
 9f8:	13 83       	std	Z+3, r17	; 0x03
 9fa:	4f 5f       	subi	r20, 0xFF	; 255
 9fc:	4b 15       	cp	r20, r11
 9fe:	08 f4       	brcc	.+2      	; 0xa02 <SOS_rearrange_tasks+0x122>
 a00:	83 cf       	rjmp	.-250    	; 0x908 <SOS_rearrange_tasks+0x28>
 a02:	5a 2d       	mov	r21, r10
 a04:	b0 90 6c 00 	lds	r11, 0x006C	; 0x80006c <u8_gs_max_count_of_tasks>
 a08:	5b 15       	cp	r21, r11
 a0a:	08 f4       	brcc	.+2      	; 0xa0e <SOS_rearrange_tasks+0x12e>
 a0c:	78 cf       	rjmp	.-272    	; 0x8fe <SOS_rearrange_tasks+0x1e>
 a0e:	df 91       	pop	r29
 a10:	cf 91       	pop	r28
 a12:	1f 91       	pop	r17
 a14:	0f 91       	pop	r16
 a16:	ff 90       	pop	r15
 a18:	ef 90       	pop	r14
 a1a:	df 90       	pop	r13
 a1c:	cf 90       	pop	r12
 a1e:	bf 90       	pop	r11
 a20:	af 90       	pop	r10
 a22:	9f 90       	pop	r9
 a24:	7f 90       	pop	r7
 a26:	6f 90       	pop	r6
 a28:	08 95       	ret

00000a2a <SOS_tick_cbf>:
 a2a:	41 e0       	ldi	r20, 0x01	; 1
 a2c:	20 c0       	rjmp	.+64     	; 0xa6e <SOS_tick_cbf+0x44>
 a2e:	24 2f       	mov	r18, r20
 a30:	30 e0       	ldi	r19, 0x00	; 0
 a32:	c9 01       	movw	r24, r18
 a34:	88 0f       	add	r24, r24
 a36:	99 1f       	adc	r25, r25
 a38:	fc 01       	movw	r30, r24
 a3a:	e5 57       	subi	r30, 0x75	; 117
 a3c:	ff 4f       	sbci	r31, 0xFF	; 255
 a3e:	60 81       	ld	r22, Z
 a40:	71 81       	ldd	r23, Z+1	; 0x01
 a42:	fc 01       	movw	r30, r24
 a44:	e2 0f       	add	r30, r18
 a46:	f3 1f       	adc	r31, r19
 a48:	ee 0f       	add	r30, r30
 a4a:	ff 1f       	adc	r31, r31
 a4c:	e4 5e       	subi	r30, 0xE4	; 228
 a4e:	fd 4f       	sbci	r31, 0xFD	; 253
 a50:	84 81       	ldd	r24, Z+4	; 0x04
 a52:	95 81       	ldd	r25, Z+5	; 0x05
 a54:	68 17       	cp	r22, r24
 a56:	79 07       	cpc	r23, r25
 a58:	49 f0       	breq	.+18     	; 0xa6c <SOS_tick_cbf+0x42>
 a5a:	22 0f       	add	r18, r18
 a5c:	33 1f       	adc	r19, r19
 a5e:	f9 01       	movw	r30, r18
 a60:	e5 57       	subi	r30, 0x75	; 117
 a62:	ff 4f       	sbci	r31, 0xFF	; 255
 a64:	6f 5f       	subi	r22, 0xFF	; 255
 a66:	7f 4f       	sbci	r23, 0xFF	; 255
 a68:	71 83       	std	Z+1, r23	; 0x01
 a6a:	60 83       	st	Z, r22
 a6c:	4f 5f       	subi	r20, 0xFF	; 255
 a6e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <u8_gs_max_count_of_tasks>
 a72:	48 17       	cp	r20, r24
 a74:	e0 f2       	brcs	.-72     	; 0xa2e <SOS_tick_cbf+0x4>
 a76:	08 95       	ret

00000a78 <SOS_init>:
 a78:	cf 93       	push	r28
 a7a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u8_gs_sos_module_state>
 a7e:	81 11       	cpse	r24, r1
 a80:	15 c0       	rjmp	.+42     	; 0xaac <SOS_init+0x34>
 a82:	0e 94 82 03 	call	0x704	; 0x704 <TIMER2_enuInit>
 a86:	84 e0       	ldi	r24, 0x04	; 4
 a88:	0e 94 b1 03 	call	0x762	; 0x762 <TIMER2_enuSetPrescallar>
 a8c:	81 e0       	ldi	r24, 0x01	; 1
 a8e:	0e 94 de 03 	call	0x7bc	; 0x7bc <TIMER2_enuSetTime_ms>
 a92:	0e 94 c5 03 	call	0x78a	; 0x78a <TIMER2_enuOVFIrqEnable>
 a96:	c8 2f       	mov	r28, r24
 a98:	85 e1       	ldi	r24, 0x15	; 21
 a9a:	95 e0       	ldi	r25, 0x05	; 5
 a9c:	0e 94 10 04 	call	0x820	; 0x820 <TIMER2_vidSetcbf_OVF>
 aa0:	c1 11       	cpse	r28, r1
 aa2:	05 c0       	rjmp	.+10     	; 0xaae <SOS_init+0x36>
 aa4:	81 e0       	ldi	r24, 0x01	; 1
 aa6:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <u8_gs_sos_module_state>
 aaa:	01 c0       	rjmp	.+2      	; 0xaae <SOS_init+0x36>
 aac:	c7 e0       	ldi	r28, 0x07	; 7
 aae:	c1 11       	cpse	r28, r1
 ab0:	c7 e0       	ldi	r28, 0x07	; 7
 ab2:	8c 2f       	mov	r24, r28
 ab4:	cf 91       	pop	r28
 ab6:	08 95       	ret

00000ab8 <SOS_create_task>:
 ab8:	af 92       	push	r10
 aba:	bf 92       	push	r11
 abc:	cf 92       	push	r12
 abe:	df 92       	push	r13
 ac0:	ff 92       	push	r15
 ac2:	0f 93       	push	r16
 ac4:	1f 93       	push	r17
 ac6:	cf 93       	push	r28
 ac8:	df 93       	push	r29
 aca:	00 97       	sbiw	r24, 0x00	; 0
 acc:	09 f4       	brne	.+2      	; 0xad0 <SOS_create_task+0x18>
 ace:	44 c0       	rjmp	.+136    	; 0xb58 <SOS_create_task+0xa0>
 ad0:	64 36       	cpi	r22, 0x64	; 100
 ad2:	08 f0       	brcs	.+2      	; 0xad6 <SOS_create_task+0x1e>
 ad4:	43 c0       	rjmp	.+134    	; 0xb5c <SOS_create_task+0xa4>
 ad6:	66 23       	and	r22, r22
 ad8:	09 f4       	brne	.+2      	; 0xadc <SOS_create_task+0x24>
 ada:	42 c0       	rjmp	.+132    	; 0xb60 <SOS_create_task+0xa8>
 adc:	44 36       	cpi	r20, 0x64	; 100
 ade:	08 f0       	brcs	.+2      	; 0xae2 <SOS_create_task+0x2a>
 ae0:	41 c0       	rjmp	.+130    	; 0xb64 <SOS_create_task+0xac>
 ae2:	d0 91 6c 00 	lds	r29, 0x006C	; 0x80006c <u8_gs_max_count_of_tasks>
 ae6:	0d 2f       	mov	r16, r29
 ae8:	10 e0       	ldi	r17, 0x00	; 0
 aea:	f8 01       	movw	r30, r16
 aec:	ee 0f       	add	r30, r30
 aee:	ff 1f       	adc	r31, r31
 af0:	e0 0f       	add	r30, r16
 af2:	f1 1f       	adc	r31, r17
 af4:	ee 0f       	add	r30, r30
 af6:	ff 1f       	adc	r31, r31
 af8:	e4 5e       	subi	r30, 0xE4	; 228
 afa:	fd 4f       	sbci	r31, 0xFD	; 253
 afc:	01 90       	ld	r0, Z+
 afe:	f0 81       	ld	r31, Z
 b00:	e0 2d       	mov	r30, r0
 b02:	ef 2b       	or	r30, r31
 b04:	89 f5       	brne	.+98     	; 0xb68 <SOS_create_task+0xb0>
 b06:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <u8_gs_sos_module_state>
 b0a:	51 30       	cpi	r21, 0x01	; 1
 b0c:	79 f5       	brne	.+94     	; 0xb6c <SOS_create_task+0xb4>
 b0e:	69 01       	movw	r12, r18
 b10:	c4 2f       	mov	r28, r20
 b12:	f6 2e       	mov	r15, r22
 b14:	5c 01       	movw	r10, r24
 b16:	0e 94 47 04 	call	0x88e	; 0x88e <SOS_token_config_param>
 b1a:	87 30       	cpi	r24, 0x07	; 7
 b1c:	49 f1       	breq	.+82     	; 0xb70 <SOS_create_task+0xb8>
 b1e:	86 e0       	ldi	r24, 0x06	; 6
 b20:	80 9f       	mul	r24, r16
 b22:	f0 01       	movw	r30, r0
 b24:	81 9f       	mul	r24, r17
 b26:	f0 0d       	add	r31, r0
 b28:	11 24       	eor	r1, r1
 b2a:	e4 5e       	subi	r30, 0xE4	; 228
 b2c:	fd 4f       	sbci	r31, 0xFD	; 253
 b2e:	b1 82       	std	Z+1, r11	; 0x01
 b30:	a0 82       	st	Z, r10
 b32:	c3 83       	std	Z+3, r28	; 0x03
 b34:	d5 82       	std	Z+5, r13	; 0x05
 b36:	c4 82       	std	Z+4, r12	; 0x04
 b38:	f2 82       	std	Z+2, r15	; 0x02
 b3a:	ec 2f       	mov	r30, r28
 b3c:	f0 e0       	ldi	r31, 0x00	; 0
 b3e:	ec 5a       	subi	r30, 0xAC	; 172
 b40:	fe 4f       	sbci	r31, 0xFE	; 254
 b42:	d0 83       	st	Z, r29
 b44:	ef 2d       	mov	r30, r15
 b46:	f0 e0       	ldi	r31, 0x00	; 0
 b48:	e8 54       	subi	r30, 0x48	; 72
 b4a:	fe 4f       	sbci	r31, 0xFE	; 254
 b4c:	d0 83       	st	Z, r29
 b4e:	df 5f       	subi	r29, 0xFF	; 255
 b50:	d0 93 6c 00 	sts	0x006C, r29	; 0x80006c <u8_gs_max_count_of_tasks>
 b54:	80 e0       	ldi	r24, 0x00	; 0
 b56:	0d c0       	rjmp	.+26     	; 0xb72 <SOS_create_task+0xba>
 b58:	87 e0       	ldi	r24, 0x07	; 7
 b5a:	0b c0       	rjmp	.+22     	; 0xb72 <SOS_create_task+0xba>
 b5c:	87 e0       	ldi	r24, 0x07	; 7
 b5e:	09 c0       	rjmp	.+18     	; 0xb72 <SOS_create_task+0xba>
 b60:	87 e0       	ldi	r24, 0x07	; 7
 b62:	07 c0       	rjmp	.+14     	; 0xb72 <SOS_create_task+0xba>
 b64:	87 e0       	ldi	r24, 0x07	; 7
 b66:	05 c0       	rjmp	.+10     	; 0xb72 <SOS_create_task+0xba>
 b68:	87 e0       	ldi	r24, 0x07	; 7
 b6a:	03 c0       	rjmp	.+6      	; 0xb72 <SOS_create_task+0xba>
 b6c:	87 e0       	ldi	r24, 0x07	; 7
 b6e:	01 c0       	rjmp	.+2      	; 0xb72 <SOS_create_task+0xba>
 b70:	87 e0       	ldi	r24, 0x07	; 7
 b72:	df 91       	pop	r29
 b74:	cf 91       	pop	r28
 b76:	1f 91       	pop	r17
 b78:	0f 91       	pop	r16
 b7a:	ff 90       	pop	r15
 b7c:	df 90       	pop	r13
 b7e:	cf 90       	pop	r12
 b80:	bf 90       	pop	r11
 b82:	af 90       	pop	r10
 b84:	08 95       	ret

00000b86 <SOS_run>:
* Desc : SOS_run to run the sos module
* Input : void
* Output : void
*/
void SOS_run(void)
{
 b86:	0f 93       	push	r16
 b88:	1f 93       	push	r17
 b8a:	cf 93       	push	r28
	// arrange tasks for 1 time only in the first start
	if (INIT == u8_gs_rearrange_flag)
 b8c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <u8_gs_rearrange_flag>
 b90:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <u8_gs_rearrange_flag+0x1>
 b94:	01 97       	sbiw	r24, 0x01	; 1
 b96:	31 f4       	brne	.+12     	; 0xba4 <SOS_run+0x1e>
	{
		SOS_rearrange_tasks();
 b98:	0e 94 70 04 	call	0x8e0	; 0x8e0 <SOS_rearrange_tasks>
		u8_gs_rearrange_flag = NOT_INIT;
 b9c:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <u8_gs_rearrange_flag+0x1>
 ba0:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <u8_gs_rearrange_flag>
	}
	
	
	// disable start external interrupt
	// enable stop external interrupt
	if (NULL != ptr_function_disable_ext_interrupt)
 ba4:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <ptr_function_disable_ext_interrupt>
 ba8:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <ptr_function_disable_ext_interrupt+0x1>
 bac:	30 97       	sbiw	r30, 0x00	; 0
 bae:	29 f0       	breq	.+10     	; 0xbba <SOS_run+0x34>
	{
		// run handler
		(ptr_function_disable_ext_interrupt)();
 bb0:	09 95       	icall
		
		// clear the pointer
		ptr_function_disable_ext_interrupt = NULL;
 bb2:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <ptr_function_disable_ext_interrupt+0x1>
 bb6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <ptr_function_disable_ext_interrupt>
		// do nothing
	}
	
	
	// start timer 
	TIMER2_enuStart();
 bba:	0e 94 cd 03 	call	0x79a	; 0x79a <TIMER2_enuStart>
	
	
	// loop till the state change 
	while(INIT == u8_gs_sos_module_state)
 bbe:	30 c0       	rjmp	.+96     	; 0xc20 <SOS_run+0x9a>
		
		// loop on tasks based on priority and execution time
		for(uint8_t i = DATABASE_FIRST_INDEX ; i  < u8_gs_max_count_of_tasks ; i++)
		{
			// if its the time to be executed the task will run
			if (arr_st_gs_task_parameters[i].u16_task_period == u16_sos_task_tick[i])
 bc0:	2c 2f       	mov	r18, r28
 bc2:	30 e0       	ldi	r19, 0x00	; 0
 bc4:	c9 01       	movw	r24, r18
 bc6:	88 0f       	add	r24, r24
 bc8:	99 1f       	adc	r25, r25
 bca:	fc 01       	movw	r30, r24
 bcc:	e2 0f       	add	r30, r18
 bce:	f3 1f       	adc	r31, r19
 bd0:	ee 0f       	add	r30, r30
 bd2:	ff 1f       	adc	r31, r31
 bd4:	e4 5e       	subi	r30, 0xE4	; 228
 bd6:	fd 4f       	sbci	r31, 0xFD	; 253
 bd8:	44 81       	ldd	r20, Z+4	; 0x04
 bda:	55 81       	ldd	r21, Z+5	; 0x05
 bdc:	fc 01       	movw	r30, r24
 bde:	e5 57       	subi	r30, 0x75	; 117
 be0:	ff 4f       	sbci	r31, 0xFF	; 255
 be2:	80 81       	ld	r24, Z
 be4:	91 81       	ldd	r25, Z+1	; 0x01
 be6:	48 17       	cp	r20, r24
 be8:	59 07       	cpc	r21, r25
 bea:	99 f4       	brne	.+38     	; 0xc12 <SOS_run+0x8c>
			{
				// run the task
				(arr_st_gs_task_parameters[i].ptr_function_name)();
 bec:	89 01       	movw	r16, r18
 bee:	00 0f       	add	r16, r16
 bf0:	11 1f       	adc	r17, r17
 bf2:	f8 01       	movw	r30, r16
 bf4:	e2 0f       	add	r30, r18
 bf6:	f3 1f       	adc	r31, r19
 bf8:	ee 0f       	add	r30, r30
 bfa:	ff 1f       	adc	r31, r31
 bfc:	e4 5e       	subi	r30, 0xE4	; 228
 bfe:	fd 4f       	sbci	r31, 0xFD	; 253
 c00:	01 90       	ld	r0, Z+
 c02:	f0 81       	ld	r31, Z
 c04:	e0 2d       	mov	r30, r0
 c06:	09 95       	icall
				
				// clear the task tick counter
				u16_sos_task_tick[i] = 0;
 c08:	f8 01       	movw	r30, r16
 c0a:	e5 57       	subi	r30, 0x75	; 117
 c0c:	ff 4f       	sbci	r31, 0xFF	; 255
 c0e:	11 82       	std	Z+1, r1	; 0x01
 c10:	10 82       	st	Z, r1
	// loop till the state change 
	while(INIT == u8_gs_sos_module_state)
	{
		
		// loop on tasks based on priority and execution time
		for(uint8_t i = DATABASE_FIRST_INDEX ; i  < u8_gs_max_count_of_tasks ; i++)
 c12:	cf 5f       	subi	r28, 0xFF	; 255
 c14:	01 c0       	rjmp	.+2      	; 0xc18 <SOS_run+0x92>
 c16:	c1 e0       	ldi	r28, 0x01	; 1
 c18:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <u8_gs_max_count_of_tasks>
 c1c:	c8 17       	cp	r28, r24
 c1e:	80 f2       	brcs	.-96     	; 0xbc0 <SOS_run+0x3a>
	// start timer 
	TIMER2_enuStart();
	
	
	// loop till the state change 
	while(INIT == u8_gs_sos_module_state)
 c20:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u8_gs_sos_module_state>
 c24:	81 30       	cpi	r24, 0x01	; 1
 c26:	b9 f3       	breq	.-18     	; 0xc16 <SOS_run+0x90>
				// clear the task tick counter
				u16_sos_task_tick[i] = 0;
			}
		}
	}
}
 c28:	cf 91       	pop	r28
 c2a:	1f 91       	pop	r17
 c2c:	0f 91       	pop	r16
 c2e:	08 95       	ret

00000c30 <SOS_disable>:
* Output : void
*/
void SOS_disable(void)
{
	// stop timer
	TIMER2_vidStop();
 c30:	0e 94 d7 03 	call	0x7ae	; 0x7ae <TIMER2_vidStop>
	
	// disable stop external interrupt
	// enable start external interrupt
	if (NULL != ptr_function_disable_ext_interrupt)
 c34:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <ptr_function_disable_ext_interrupt>
 c38:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <ptr_function_disable_ext_interrupt+0x1>
 c3c:	30 97       	sbiw	r30, 0x00	; 0
 c3e:	29 f0       	breq	.+10     	; 0xc4a <SOS_disable+0x1a>
	{
		// run handler
		(ptr_function_disable_ext_interrupt)();
 c40:	09 95       	icall
		
		// clear the pointer
		ptr_function_disable_ext_interrupt = NULL;
 c42:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <ptr_function_disable_ext_interrupt+0x1>
 c46:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <ptr_function_disable_ext_interrupt>
	}
	while(DISABLE == u8_gs_sos_module_state)
 c4a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <u8_gs_sos_module_state>
 c4e:	82 30       	cpi	r24, 0x02	; 2
 c50:	e1 f3       	breq	.-8      	; 0xc4a <SOS_disable+0x1a>
	{
		// stay here till the state changes
	}
}
 c52:	08 95       	ret

00000c54 <SOS_change_state>:
	}
}

void SOS_change_state(uint8_t u8_state)
{
	u8_gs_sos_module_state = u8_state;
 c54:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <u8_gs_sos_module_state>
 c58:	08 95       	ret

00000c5a <SOS_disable_ext_interrupt>:
/***********************************************************************************/
/* Desc : save the callback function locally to call it in SOS_run and SOS_disable */
/***********************************************************************************/
void SOS_disable_ext_interrupt(ptr_function_name_t ptr_function_name)
{
	ptr_function_disable_ext_interrupt = ptr_function_name;
 c5a:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <ptr_function_disable_ext_interrupt+0x1>
 c5e:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <ptr_function_disable_ext_interrupt>
 c62:	08 95       	ret

00000c64 <__divsf3>:
 c64:	0e 94 46 06 	call	0xc8c	; 0xc8c <__divsf3x>
 c68:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_round>
 c6c:	0e 94 20 07 	call	0xe40	; 0xe40 <__fp_pscB>
 c70:	58 f0       	brcs	.+22     	; 0xc88 <__divsf3+0x24>
 c72:	0e 94 19 07 	call	0xe32	; 0xe32 <__fp_pscA>
 c76:	40 f0       	brcs	.+16     	; 0xc88 <__divsf3+0x24>
 c78:	29 f4       	brne	.+10     	; 0xc84 <__divsf3+0x20>
 c7a:	5f 3f       	cpi	r21, 0xFF	; 255
 c7c:	29 f0       	breq	.+10     	; 0xc88 <__divsf3+0x24>
 c7e:	0c 94 10 07 	jmp	0xe20	; 0xe20 <__fp_inf>
 c82:	51 11       	cpse	r21, r1
 c84:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <__fp_szero>
 c88:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__fp_nan>

00000c8c <__divsf3x>:
 c8c:	0e 94 38 07 	call	0xe70	; 0xe70 <__fp_split3>
 c90:	68 f3       	brcs	.-38     	; 0xc6c <__divsf3+0x8>

00000c92 <__divsf3_pse>:
 c92:	99 23       	and	r25, r25
 c94:	b1 f3       	breq	.-20     	; 0xc82 <__divsf3+0x1e>
 c96:	55 23       	and	r21, r21
 c98:	91 f3       	breq	.-28     	; 0xc7e <__divsf3+0x1a>
 c9a:	95 1b       	sub	r25, r21
 c9c:	55 0b       	sbc	r21, r21
 c9e:	bb 27       	eor	r27, r27
 ca0:	aa 27       	eor	r26, r26
 ca2:	62 17       	cp	r22, r18
 ca4:	73 07       	cpc	r23, r19
 ca6:	84 07       	cpc	r24, r20
 ca8:	38 f0       	brcs	.+14     	; 0xcb8 <__divsf3_pse+0x26>
 caa:	9f 5f       	subi	r25, 0xFF	; 255
 cac:	5f 4f       	sbci	r21, 0xFF	; 255
 cae:	22 0f       	add	r18, r18
 cb0:	33 1f       	adc	r19, r19
 cb2:	44 1f       	adc	r20, r20
 cb4:	aa 1f       	adc	r26, r26
 cb6:	a9 f3       	breq	.-22     	; 0xca2 <__divsf3_pse+0x10>
 cb8:	35 d0       	rcall	.+106    	; 0xd24 <__divsf3_pse+0x92>
 cba:	0e 2e       	mov	r0, r30
 cbc:	3a f0       	brmi	.+14     	; 0xccc <__divsf3_pse+0x3a>
 cbe:	e0 e8       	ldi	r30, 0x80	; 128
 cc0:	32 d0       	rcall	.+100    	; 0xd26 <__divsf3_pse+0x94>
 cc2:	91 50       	subi	r25, 0x01	; 1
 cc4:	50 40       	sbci	r21, 0x00	; 0
 cc6:	e6 95       	lsr	r30
 cc8:	00 1c       	adc	r0, r0
 cca:	ca f7       	brpl	.-14     	; 0xcbe <__divsf3_pse+0x2c>
 ccc:	2b d0       	rcall	.+86     	; 0xd24 <__divsf3_pse+0x92>
 cce:	fe 2f       	mov	r31, r30
 cd0:	29 d0       	rcall	.+82     	; 0xd24 <__divsf3_pse+0x92>
 cd2:	66 0f       	add	r22, r22
 cd4:	77 1f       	adc	r23, r23
 cd6:	88 1f       	adc	r24, r24
 cd8:	bb 1f       	adc	r27, r27
 cda:	26 17       	cp	r18, r22
 cdc:	37 07       	cpc	r19, r23
 cde:	48 07       	cpc	r20, r24
 ce0:	ab 07       	cpc	r26, r27
 ce2:	b0 e8       	ldi	r27, 0x80	; 128
 ce4:	09 f0       	breq	.+2      	; 0xce8 <__divsf3_pse+0x56>
 ce6:	bb 0b       	sbc	r27, r27
 ce8:	80 2d       	mov	r24, r0
 cea:	bf 01       	movw	r22, r30
 cec:	ff 27       	eor	r31, r31
 cee:	93 58       	subi	r25, 0x83	; 131
 cf0:	5f 4f       	sbci	r21, 0xFF	; 255
 cf2:	3a f0       	brmi	.+14     	; 0xd02 <__divsf3_pse+0x70>
 cf4:	9e 3f       	cpi	r25, 0xFE	; 254
 cf6:	51 05       	cpc	r21, r1
 cf8:	78 f0       	brcs	.+30     	; 0xd18 <__divsf3_pse+0x86>
 cfa:	0c 94 10 07 	jmp	0xe20	; 0xe20 <__fp_inf>
 cfe:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <__fp_szero>
 d02:	5f 3f       	cpi	r21, 0xFF	; 255
 d04:	e4 f3       	brlt	.-8      	; 0xcfe <__divsf3_pse+0x6c>
 d06:	98 3e       	cpi	r25, 0xE8	; 232
 d08:	d4 f3       	brlt	.-12     	; 0xcfe <__divsf3_pse+0x6c>
 d0a:	86 95       	lsr	r24
 d0c:	77 95       	ror	r23
 d0e:	67 95       	ror	r22
 d10:	b7 95       	ror	r27
 d12:	f7 95       	ror	r31
 d14:	9f 5f       	subi	r25, 0xFF	; 255
 d16:	c9 f7       	brne	.-14     	; 0xd0a <__divsf3_pse+0x78>
 d18:	88 0f       	add	r24, r24
 d1a:	91 1d       	adc	r25, r1
 d1c:	96 95       	lsr	r25
 d1e:	87 95       	ror	r24
 d20:	97 f9       	bld	r25, 7
 d22:	08 95       	ret
 d24:	e1 e0       	ldi	r30, 0x01	; 1
 d26:	66 0f       	add	r22, r22
 d28:	77 1f       	adc	r23, r23
 d2a:	88 1f       	adc	r24, r24
 d2c:	bb 1f       	adc	r27, r27
 d2e:	62 17       	cp	r22, r18
 d30:	73 07       	cpc	r23, r19
 d32:	84 07       	cpc	r24, r20
 d34:	ba 07       	cpc	r27, r26
 d36:	20 f0       	brcs	.+8      	; 0xd40 <__divsf3_pse+0xae>
 d38:	62 1b       	sub	r22, r18
 d3a:	73 0b       	sbc	r23, r19
 d3c:	84 0b       	sbc	r24, r20
 d3e:	ba 0b       	sbc	r27, r26
 d40:	ee 1f       	adc	r30, r30
 d42:	88 f7       	brcc	.-30     	; 0xd26 <__divsf3_pse+0x94>
 d44:	e0 95       	com	r30
 d46:	08 95       	ret

00000d48 <__fixunssfsi>:
 d48:	0e 94 40 07 	call	0xe80	; 0xe80 <__fp_splitA>
 d4c:	88 f0       	brcs	.+34     	; 0xd70 <__fixunssfsi+0x28>
 d4e:	9f 57       	subi	r25, 0x7F	; 127
 d50:	98 f0       	brcs	.+38     	; 0xd78 <__fixunssfsi+0x30>
 d52:	b9 2f       	mov	r27, r25
 d54:	99 27       	eor	r25, r25
 d56:	b7 51       	subi	r27, 0x17	; 23
 d58:	b0 f0       	brcs	.+44     	; 0xd86 <__fixunssfsi+0x3e>
 d5a:	e1 f0       	breq	.+56     	; 0xd94 <__fixunssfsi+0x4c>
 d5c:	66 0f       	add	r22, r22
 d5e:	77 1f       	adc	r23, r23
 d60:	88 1f       	adc	r24, r24
 d62:	99 1f       	adc	r25, r25
 d64:	1a f0       	brmi	.+6      	; 0xd6c <__fixunssfsi+0x24>
 d66:	ba 95       	dec	r27
 d68:	c9 f7       	brne	.-14     	; 0xd5c <__fixunssfsi+0x14>
 d6a:	14 c0       	rjmp	.+40     	; 0xd94 <__fixunssfsi+0x4c>
 d6c:	b1 30       	cpi	r27, 0x01	; 1
 d6e:	91 f0       	breq	.+36     	; 0xd94 <__fixunssfsi+0x4c>
 d70:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__fp_zero>
 d74:	b1 e0       	ldi	r27, 0x01	; 1
 d76:	08 95       	ret
 d78:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_zero>
 d7c:	67 2f       	mov	r22, r23
 d7e:	78 2f       	mov	r23, r24
 d80:	88 27       	eor	r24, r24
 d82:	b8 5f       	subi	r27, 0xF8	; 248
 d84:	39 f0       	breq	.+14     	; 0xd94 <__fixunssfsi+0x4c>
 d86:	b9 3f       	cpi	r27, 0xF9	; 249
 d88:	cc f3       	brlt	.-14     	; 0xd7c <__fixunssfsi+0x34>
 d8a:	86 95       	lsr	r24
 d8c:	77 95       	ror	r23
 d8e:	67 95       	ror	r22
 d90:	b3 95       	inc	r27
 d92:	d9 f7       	brne	.-10     	; 0xd8a <__fixunssfsi+0x42>
 d94:	3e f4       	brtc	.+14     	; 0xda4 <__fixunssfsi+0x5c>
 d96:	90 95       	com	r25
 d98:	80 95       	com	r24
 d9a:	70 95       	com	r23
 d9c:	61 95       	neg	r22
 d9e:	7f 4f       	sbci	r23, 0xFF	; 255
 da0:	8f 4f       	sbci	r24, 0xFF	; 255
 da2:	9f 4f       	sbci	r25, 0xFF	; 255
 da4:	08 95       	ret

00000da6 <__floatunsisf>:
 da6:	e8 94       	clt
 da8:	09 c0       	rjmp	.+18     	; 0xdbc <__floatsisf+0x12>

00000daa <__floatsisf>:
 daa:	97 fb       	bst	r25, 7
 dac:	3e f4       	brtc	.+14     	; 0xdbc <__floatsisf+0x12>
 dae:	90 95       	com	r25
 db0:	80 95       	com	r24
 db2:	70 95       	com	r23
 db4:	61 95       	neg	r22
 db6:	7f 4f       	sbci	r23, 0xFF	; 255
 db8:	8f 4f       	sbci	r24, 0xFF	; 255
 dba:	9f 4f       	sbci	r25, 0xFF	; 255
 dbc:	99 23       	and	r25, r25
 dbe:	a9 f0       	breq	.+42     	; 0xdea <__floatsisf+0x40>
 dc0:	f9 2f       	mov	r31, r25
 dc2:	96 e9       	ldi	r25, 0x96	; 150
 dc4:	bb 27       	eor	r27, r27
 dc6:	93 95       	inc	r25
 dc8:	f6 95       	lsr	r31
 dca:	87 95       	ror	r24
 dcc:	77 95       	ror	r23
 dce:	67 95       	ror	r22
 dd0:	b7 95       	ror	r27
 dd2:	f1 11       	cpse	r31, r1
 dd4:	f8 cf       	rjmp	.-16     	; 0xdc6 <__floatsisf+0x1c>
 dd6:	fa f4       	brpl	.+62     	; 0xe16 <__floatsisf+0x6c>
 dd8:	bb 0f       	add	r27, r27
 dda:	11 f4       	brne	.+4      	; 0xde0 <__floatsisf+0x36>
 ddc:	60 ff       	sbrs	r22, 0
 dde:	1b c0       	rjmp	.+54     	; 0xe16 <__floatsisf+0x6c>
 de0:	6f 5f       	subi	r22, 0xFF	; 255
 de2:	7f 4f       	sbci	r23, 0xFF	; 255
 de4:	8f 4f       	sbci	r24, 0xFF	; 255
 de6:	9f 4f       	sbci	r25, 0xFF	; 255
 de8:	16 c0       	rjmp	.+44     	; 0xe16 <__floatsisf+0x6c>
 dea:	88 23       	and	r24, r24
 dec:	11 f0       	breq	.+4      	; 0xdf2 <__floatsisf+0x48>
 dee:	96 e9       	ldi	r25, 0x96	; 150
 df0:	11 c0       	rjmp	.+34     	; 0xe14 <__floatsisf+0x6a>
 df2:	77 23       	and	r23, r23
 df4:	21 f0       	breq	.+8      	; 0xdfe <__floatsisf+0x54>
 df6:	9e e8       	ldi	r25, 0x8E	; 142
 df8:	87 2f       	mov	r24, r23
 dfa:	76 2f       	mov	r23, r22
 dfc:	05 c0       	rjmp	.+10     	; 0xe08 <__floatsisf+0x5e>
 dfe:	66 23       	and	r22, r22
 e00:	71 f0       	breq	.+28     	; 0xe1e <__floatsisf+0x74>
 e02:	96 e8       	ldi	r25, 0x86	; 134
 e04:	86 2f       	mov	r24, r22
 e06:	70 e0       	ldi	r23, 0x00	; 0
 e08:	60 e0       	ldi	r22, 0x00	; 0
 e0a:	2a f0       	brmi	.+10     	; 0xe16 <__floatsisf+0x6c>
 e0c:	9a 95       	dec	r25
 e0e:	66 0f       	add	r22, r22
 e10:	77 1f       	adc	r23, r23
 e12:	88 1f       	adc	r24, r24
 e14:	da f7       	brpl	.-10     	; 0xe0c <__floatsisf+0x62>
 e16:	88 0f       	add	r24, r24
 e18:	96 95       	lsr	r25
 e1a:	87 95       	ror	r24
 e1c:	97 f9       	bld	r25, 7
 e1e:	08 95       	ret

00000e20 <__fp_inf>:
 e20:	97 f9       	bld	r25, 7
 e22:	9f 67       	ori	r25, 0x7F	; 127
 e24:	80 e8       	ldi	r24, 0x80	; 128
 e26:	70 e0       	ldi	r23, 0x00	; 0
 e28:	60 e0       	ldi	r22, 0x00	; 0
 e2a:	08 95       	ret

00000e2c <__fp_nan>:
 e2c:	9f ef       	ldi	r25, 0xFF	; 255
 e2e:	80 ec       	ldi	r24, 0xC0	; 192
 e30:	08 95       	ret

00000e32 <__fp_pscA>:
 e32:	00 24       	eor	r0, r0
 e34:	0a 94       	dec	r0
 e36:	16 16       	cp	r1, r22
 e38:	17 06       	cpc	r1, r23
 e3a:	18 06       	cpc	r1, r24
 e3c:	09 06       	cpc	r0, r25
 e3e:	08 95       	ret

00000e40 <__fp_pscB>:
 e40:	00 24       	eor	r0, r0
 e42:	0a 94       	dec	r0
 e44:	12 16       	cp	r1, r18
 e46:	13 06       	cpc	r1, r19
 e48:	14 06       	cpc	r1, r20
 e4a:	05 06       	cpc	r0, r21
 e4c:	08 95       	ret

00000e4e <__fp_round>:
 e4e:	09 2e       	mov	r0, r25
 e50:	03 94       	inc	r0
 e52:	00 0c       	add	r0, r0
 e54:	11 f4       	brne	.+4      	; 0xe5a <__fp_round+0xc>
 e56:	88 23       	and	r24, r24
 e58:	52 f0       	brmi	.+20     	; 0xe6e <__fp_round+0x20>
 e5a:	bb 0f       	add	r27, r27
 e5c:	40 f4       	brcc	.+16     	; 0xe6e <__fp_round+0x20>
 e5e:	bf 2b       	or	r27, r31
 e60:	11 f4       	brne	.+4      	; 0xe66 <__fp_round+0x18>
 e62:	60 ff       	sbrs	r22, 0
 e64:	04 c0       	rjmp	.+8      	; 0xe6e <__fp_round+0x20>
 e66:	6f 5f       	subi	r22, 0xFF	; 255
 e68:	7f 4f       	sbci	r23, 0xFF	; 255
 e6a:	8f 4f       	sbci	r24, 0xFF	; 255
 e6c:	9f 4f       	sbci	r25, 0xFF	; 255
 e6e:	08 95       	ret

00000e70 <__fp_split3>:
 e70:	57 fd       	sbrc	r21, 7
 e72:	90 58       	subi	r25, 0x80	; 128
 e74:	44 0f       	add	r20, r20
 e76:	55 1f       	adc	r21, r21
 e78:	59 f0       	breq	.+22     	; 0xe90 <__fp_splitA+0x10>
 e7a:	5f 3f       	cpi	r21, 0xFF	; 255
 e7c:	71 f0       	breq	.+28     	; 0xe9a <__fp_splitA+0x1a>
 e7e:	47 95       	ror	r20

00000e80 <__fp_splitA>:
 e80:	88 0f       	add	r24, r24
 e82:	97 fb       	bst	r25, 7
 e84:	99 1f       	adc	r25, r25
 e86:	61 f0       	breq	.+24     	; 0xea0 <__fp_splitA+0x20>
 e88:	9f 3f       	cpi	r25, 0xFF	; 255
 e8a:	79 f0       	breq	.+30     	; 0xeaa <__fp_splitA+0x2a>
 e8c:	87 95       	ror	r24
 e8e:	08 95       	ret
 e90:	12 16       	cp	r1, r18
 e92:	13 06       	cpc	r1, r19
 e94:	14 06       	cpc	r1, r20
 e96:	55 1f       	adc	r21, r21
 e98:	f2 cf       	rjmp	.-28     	; 0xe7e <__fp_split3+0xe>
 e9a:	46 95       	lsr	r20
 e9c:	f1 df       	rcall	.-30     	; 0xe80 <__fp_splitA>
 e9e:	08 c0       	rjmp	.+16     	; 0xeb0 <__fp_splitA+0x30>
 ea0:	16 16       	cp	r1, r22
 ea2:	17 06       	cpc	r1, r23
 ea4:	18 06       	cpc	r1, r24
 ea6:	99 1f       	adc	r25, r25
 ea8:	f1 cf       	rjmp	.-30     	; 0xe8c <__fp_splitA+0xc>
 eaa:	86 95       	lsr	r24
 eac:	71 05       	cpc	r23, r1
 eae:	61 05       	cpc	r22, r1
 eb0:	08 94       	sec
 eb2:	08 95       	ret

00000eb4 <__fp_zero>:
 eb4:	e8 94       	clt

00000eb6 <__fp_szero>:
 eb6:	bb 27       	eor	r27, r27
 eb8:	66 27       	eor	r22, r22
 eba:	77 27       	eor	r23, r23
 ebc:	cb 01       	movw	r24, r22
 ebe:	97 f9       	bld	r25, 7
 ec0:	08 95       	ret

00000ec2 <_exit>:
 ec2:	f8 94       	cli

00000ec4 <__stop_program>:
 ec4:	ff cf       	rjmp	.-2      	; 0xec4 <__stop_program>
