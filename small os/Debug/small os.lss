
small os.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000e18  00000eac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003f6  00800076  00800076  00000ec2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ec2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ef4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000201e  00000000  00000000  00001188  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d60  00000000  00000000  000031a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001523  00000000  00000000  00003f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005cc  00000000  00000000  0000542c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d08  00000000  00000000  000059f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001539  00000000  00000000  00006700  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  00007c39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 9b 02 	jmp	0x536	; 0x536 <__vector_1>
   8:	0c 94 c4 02 	jmp	0x588	; 0x588 <__vector_2>
   c:	0c 94 ed 02 	jmp	0x5da	; 0x5da <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 ab 03 	jmp	0x756	; 0x756 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	24 e0       	ldi	r18, 0x04	; 4
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <main>
  8a:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TASK_1>:

void TASK_3(void)
{
	//SOS_deinit();
	SOS_delete_task(2);
	LED_off(LED_1);
  92:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <st_gc_ledConfig>
  96:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <st_gc_ledConfig+0x1>
  9a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LED_toggle>
  9e:	08 95       	ret

000000a0 <TASK_2>:
  a0:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <st_gc_ledConfig+0x2>
  a4:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <st_gc_ledConfig+0x3>
  a8:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LED_toggle>
  ac:	08 95       	ret

000000ae <APP_btn_start_pressed>:
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <EXT_INTERRUPT_MANAGER_enable>
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	0e 94 ed 03 	call	0x7da	; 0x7da <EXT_INTERRUPT_MANAGER_disable>
  ba:	08 95       	ret

000000bc <APP_btn_stop_pressed>:
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0e 94 ed 03 	call	0x7da	; 0x7da <EXT_INTERRUPT_MANAGER_disable>
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <EXT_INTERRUPT_MANAGER_enable>
  c8:	08 95       	ret

000000ca <APP_ext_int0_cbf>:
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	81 ec       	ldi	r24, 0xC1	; 193
  d0:	95 e0       	ldi	r25, 0x05	; 5
  d2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	0e 94 d3 05 	call	0xba6	; 0xba6 <SOS_change_state>
  e0:	8e e5       	ldi	r24, 0x5E	; 94
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 d6 05 	call	0xbac	; 0xbac <SOS_disable_ext_interrupt>
  e8:	c5 e6       	ldi	r28, 0x65	; 101
  ea:	d0 e0       	ldi	r29, 0x00	; 0
  ec:	88 81       	ld	r24, Y
  ee:	99 81       	ldd	r25, Y+1	; 0x01
  f0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_off>
  f4:	8a 81       	ldd	r24, Y+2	; 0x02
  f6:	9b 81       	ldd	r25, Y+3	; 0x03
  f8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_off>
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <APP_wake_up_cbf>:
 102:	8c e6       	ldi	r24, 0x6C	; 108
 104:	95 e0       	ldi	r25, 0x05	; 5
 106:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 10a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	0e 94 d3 05 	call	0xba6	; 0xba6 <SOS_change_state>
 114:	87 e5       	ldi	r24, 0x57	; 87
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 d6 05 	call	0xbac	; 0xbac <SOS_disable_ext_interrupt>
 11c:	08 95       	ret

0000011e <APP_init>:
uint8_t APP_init(void)
{
	uint8_t u8_retVal = APP_ERROR_OK;
	
	// Init leds
	if ((LED_ERROR_OK == LED_init(LED_0)) && 
 11e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <st_gc_ledConfig>
 122:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <st_gc_ledConfig+0x1>
 126:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LED_init>
 12a:	81 11       	cpse	r24, r1
 12c:	33 c0       	rjmp	.+102    	; 0x194 <APP_init+0x76>
		(LED_ERROR_OK == LED_init(LED_1)))
 12e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <st_gc_ledConfig+0x2>
 132:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <st_gc_ledConfig+0x3>
 136:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LED_init>
uint8_t APP_init(void)
{
	uint8_t u8_retVal = APP_ERROR_OK;
	
	// Init leds
	if ((LED_ERROR_OK == LED_init(LED_0)) && 
 13a:	81 11       	cpse	r24, r1
 13c:	2d c0       	rjmp	.+90     	; 0x198 <APP_init+0x7a>
		(LED_ERROR_OK == LED_init(LED_1)))
	{
		// Init the small SOS
		if (SOS_STATUS_SUCCESS == SOS_init())
 13e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <SOS_init>
 142:	81 11       	cpse	r24, r1
 144:	2b c0       	rjmp	.+86     	; 0x19c <APP_init+0x7e>
		{
			// create task 1
			if (SOS_STATUS_SUCCESS == SOS_create_task(
 146:	2c e2       	ldi	r18, 0x2C	; 44
 148:	31 e0       	ldi	r19, 0x01	; 1
 14a:	41 e0       	ldi	r20, 0x01	; 1
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	89 e4       	ldi	r24, 0x49	; 73
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 05 05 	call	0xa0a	; 0xa0a <SOS_create_task>
 156:	81 11       	cpse	r24, r1
 158:	23 c0       	rjmp	.+70     	; 0x1a0 <APP_init+0x82>
															 1,							// ID
															 1,							// priority
															300							// period
													 )															&&
				// create task 2
				SOS_STATUS_SUCCESS == SOS_create_task(
 15a:	24 ef       	ldi	r18, 0xF4	; 244
 15c:	31 e0       	ldi	r19, 0x01	; 1
 15e:	43 e0       	ldi	r20, 0x03	; 3
 160:	62 e0       	ldi	r22, 0x02	; 2
 162:	80 e5       	ldi	r24, 0x50	; 80
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 05 05 	call	0xa0a	; 0xa0a <SOS_create_task>
			if (SOS_STATUS_SUCCESS == SOS_create_task(
														TASK_1,					  	    // Function name
															 1,							// ID
															 1,							// priority
															300							// period
													 )															&&
 16a:	81 11       	cpse	r24, r1
 16c:	1b c0       	rjmp	.+54     	; 0x1a4 <APP_init+0x86>
															 3,							// priority
															500							// period
													))
			{
				// Init external interrupts
				if ((EXT_INT_E_OK ==  EXT_INTERRUPT_MANAGER_init(EXT_0,APP_ext_int0_cbf)) &&
 16e:	65 e6       	ldi	r22, 0x65	; 101
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	0e 94 db 03 	call	0x7b6	; 0x7b6 <EXT_INTERRUPT_MANAGER_init>
 176:	81 11       	cpse	r24, r1
 178:	17 c0       	rjmp	.+46     	; 0x1a8 <APP_init+0x8a>
				    (EXT_INT_E_OK ==  EXT_INTERRUPT_MANAGER_init(EXT_1,APP_wake_up_cbf)))
 17a:	61 e8       	ldi	r22, 0x81	; 129
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	0e 94 db 03 	call	0x7b6	; 0x7b6 <EXT_INTERRUPT_MANAGER_init>
															 3,							// priority
															500							// period
													))
			{
				// Init external interrupts
				if ((EXT_INT_E_OK ==  EXT_INTERRUPT_MANAGER_init(EXT_0,APP_ext_int0_cbf)) &&
 184:	81 11       	cpse	r24, r1
 186:	12 c0       	rjmp	.+36     	; 0x1ac <APP_init+0x8e>
				    (EXT_INT_E_OK ==  EXT_INTERRUPT_MANAGER_init(EXT_1,APP_wake_up_cbf)))
				{
					// enable global interrupts
					sei();
 188:	78 94       	sei
					
					if ((EXT_INT_E_OK == EXT_INTERRUPT_MANAGER_enable(EXT_0)))
 18a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <EXT_INTERRUPT_MANAGER_enable>
 18e:	81 11       	cpse	r24, r1
 190:	0f c0       	rjmp	.+30     	; 0x1b0 <APP_init+0x92>
 192:	08 95       	ret
		}
		
	}
	else
	{
		u8_retVal = APP_ERROR_NOT_OK;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	08 95       	ret
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	08 95       	ret
				u8_retVal = APP_ERROR_NOT_OK;
			}
		}
		else
		{
			u8_retVal = APP_ERROR_NOT_OK;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	08 95       	ret
					u8_retVal = APP_ERROR_NOT_OK;
				}
			}
			else
			{
				u8_retVal = APP_ERROR_NOT_OK;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	08 95       	ret
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	08 95       	ret
						u8_retVal = APP_ERROR_NOT_OK;
					}
				}
				else
				{
					u8_retVal = APP_ERROR_NOT_OK;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	08 95       	ret
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	08 95       	ret
					{
						// finished Initialization
					}
					else
					{
						u8_retVal = APP_ERROR_NOT_OK;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		u8_retVal = APP_ERROR_NOT_OK;
	}
	return u8_retVal;
}
 1b2:	08 95       	ret

000001b4 <APP_start>:

void APP_start(void)
{
	while(1)
	{
		(APP_runing_task)();
 1b4:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b8:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1bc:	09 95       	icall
 1be:	fa cf       	rjmp	.-12     	; 0x1b4 <APP_start>

000001c0 <LED_init>:
	if (DIO_writePIN(led.port,led.pin,STD_HIGH) == DIO_E_OK)
	{
		return LED_ERROR_OK;
	}
	return LED_ERROR_NOT_OK;
}
 1c0:	41 e0       	ldi	r20, 0x01	; 1
 1c2:	69 2f       	mov	r22, r25
 1c4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_init>
 1c8:	81 11       	cpse	r24, r1
 1ca:	85 e0       	ldi	r24, 0x05	; 5
 1cc:	08 95       	ret

000001ce <LED_off>:
 * @param led The LED configuration structure.
 *
 * @return LED_ERROR_OK if the operation is successful, otherwise LED_ERROR_NOT_OK.
 */
u8_ledError_t LED_off(st_ledConfig_t led){
	if (DIO_writePIN(led.port,led.pin,STD_HIGH) == DIO_E_OK)
 1ce:	41 e0       	ldi	r20, 0x01	; 1
 1d0:	69 2f       	mov	r22, r25
 1d2:	0e 94 74 01 	call	0x2e8	; 0x2e8 <DIO_writePIN>
 1d6:	81 11       	cpse	r24, r1
	{
		return LED_ERROR_OK;
	}
	return LED_ERROR_NOT_OK;
 1d8:	85 e0       	ldi	r24, 0x05	; 5
}
 1da:	08 95       	ret

000001dc <LED_toggle>:
 * @param led The LED configuration structure.
 *
 * @return LED_ERROR_OK if the operation is successful, otherwise LED_ERROR_NOT_OK.
 */
u8_ledError_t LED_toggle(st_ledConfig_t led){
	if (DIO_togglePIN(led.port,led.pin) == DIO_E_OK)
 1dc:	69 2f       	mov	r22, r25
 1de:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DIO_togglePIN>
 1e2:	81 11       	cpse	r24, r1
	{
		return LED_ERROR_OK;
	}
	return LED_ERROR_NOT_OK;
 1e4:	85 e0       	ldi	r24, 0x05	; 5
}
 1e6:	08 95       	ret

000001e8 <main>:


int main(void)
{
	uint8_t u8_retVal = 0;
	u8_retVal = APP_init();
 1e8:	0e 94 8f 00 	call	0x11e	; 0x11e <APP_init>
	if (0 == u8_retVal)
 1ec:	81 11       	cpse	r24, r1
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <main+0xc>
	{
		APP_start();
 1f0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <APP_start>
	}
	
	
	
	
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	08 95       	ret

000001fa <DIO_init>:
			default:
			return DIO_InvalidPort;
			break;
		}
		return DIO_E_OK;
}
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	11 f1       	breq	.+68     	; 0x242 <DIO_init+0x48>
 1fe:	30 f0       	brcs	.+12     	; 0x20c <DIO_init+0x12>
 200:	82 30       	cpi	r24, 0x02	; 2
 202:	d1 f1       	breq	.+116    	; 0x278 <DIO_init+0x7e>
 204:	83 30       	cpi	r24, 0x03	; 3
 206:	09 f4       	brne	.+2      	; 0x20a <DIO_init+0x10>
 208:	52 c0       	rjmp	.+164    	; 0x2ae <DIO_init+0xb4>
 20a:	6c c0       	rjmp	.+216    	; 0x2e4 <DIO_init+0xea>
 20c:	41 11       	cpse	r20, r1
 20e:	0d c0       	rjmp	.+26     	; 0x22a <DIO_init+0x30>
 210:	2a b3       	in	r18, 0x1a	; 26
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_init+0x22>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_init+0x1e>
 220:	80 95       	com	r24
 222:	82 23       	and	r24, r18
 224:	8a bb       	out	0x1a, r24	; 26
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	08 95       	ret
 22a:	2a b3       	in	r18, 0x1a	; 26
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_init+0x3c>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_init+0x38>
 23a:	82 2b       	or	r24, r18
 23c:	8a bb       	out	0x1a, r24	; 26
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	08 95       	ret
 242:	41 11       	cpse	r20, r1
 244:	0d c0       	rjmp	.+26     	; 0x260 <DIO_init+0x66>
 246:	27 b3       	in	r18, 0x17	; 23
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_init+0x58>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_init+0x54>
 256:	80 95       	com	r24
 258:	82 23       	and	r24, r18
 25a:	87 bb       	out	0x17, r24	; 23
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	08 95       	ret
 260:	27 b3       	in	r18, 0x17	; 23
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_init+0x72>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_init+0x6e>
 270:	82 2b       	or	r24, r18
 272:	87 bb       	out	0x17, r24	; 23
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	08 95       	ret
 278:	41 11       	cpse	r20, r1
 27a:	0d c0       	rjmp	.+26     	; 0x296 <DIO_init+0x9c>
 27c:	24 b3       	in	r18, 0x14	; 20
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_init+0x8e>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_init+0x8a>
 28c:	80 95       	com	r24
 28e:	82 23       	and	r24, r18
 290:	84 bb       	out	0x14, r24	; 20
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	08 95       	ret
 296:	24 b3       	in	r18, 0x14	; 20
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_init+0xa8>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_init+0xa4>
 2a6:	82 2b       	or	r24, r18
 2a8:	84 bb       	out	0x14, r24	; 20
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	08 95       	ret
 2ae:	41 11       	cpse	r20, r1
 2b0:	0d c0       	rjmp	.+26     	; 0x2cc <DIO_init+0xd2>
 2b2:	21 b3       	in	r18, 0x11	; 17
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_init+0xc4>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	6a 95       	dec	r22
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_init+0xc0>
 2c2:	80 95       	com	r24
 2c4:	82 23       	and	r24, r18
 2c6:	81 bb       	out	0x11, r24	; 17
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	08 95       	ret
 2cc:	21 b3       	in	r18, 0x11	; 17
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_init+0xde>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_init+0xda>
 2dc:	82 2b       	or	r24, r18
 2de:	81 bb       	out	0x11, r24	; 17
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	08 95       	ret
 2e4:	82 e0       	ldi	r24, 0x02	; 2
 2e6:	08 95       	ret

000002e8 <DIO_writePIN>:
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	11 f1       	breq	.+68     	; 0x330 <DIO_writePIN+0x48>
 2ec:	30 f0       	brcs	.+12     	; 0x2fa <DIO_writePIN+0x12>
 2ee:	82 30       	cpi	r24, 0x02	; 2
 2f0:	d1 f1       	breq	.+116    	; 0x366 <DIO_writePIN+0x7e>
 2f2:	83 30       	cpi	r24, 0x03	; 3
 2f4:	09 f4       	brne	.+2      	; 0x2f8 <DIO_writePIN+0x10>
 2f6:	52 c0       	rjmp	.+164    	; 0x39c <DIO_writePIN+0xb4>
 2f8:	6c c0       	rjmp	.+216    	; 0x3d2 <DIO_writePIN+0xea>
 2fa:	41 30       	cpi	r20, 0x01	; 1
 2fc:	69 f4       	brne	.+26     	; 0x318 <DIO_writePIN+0x30>
 2fe:	2b b3       	in	r18, 0x1b	; 27
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_writePIN+0x22>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	6a 95       	dec	r22
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_writePIN+0x1e>
 30e:	80 95       	com	r24
 310:	82 23       	and	r24, r18
 312:	8b bb       	out	0x1b, r24	; 27
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	08 95       	ret
 318:	2b b3       	in	r18, 0x1b	; 27
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_writePIN+0x3c>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_writePIN+0x38>
 328:	82 2b       	or	r24, r18
 32a:	8b bb       	out	0x1b, r24	; 27
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	08 95       	ret
 330:	41 30       	cpi	r20, 0x01	; 1
 332:	69 f4       	brne	.+26     	; 0x34e <DIO_writePIN+0x66>
 334:	28 b3       	in	r18, 0x18	; 24
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_writePIN+0x58>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_writePIN+0x54>
 344:	80 95       	com	r24
 346:	82 23       	and	r24, r18
 348:	88 bb       	out	0x18, r24	; 24
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	08 95       	ret
 34e:	28 b3       	in	r18, 0x18	; 24
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_writePIN+0x72>
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	6a 95       	dec	r22
 35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_writePIN+0x6e>
 35e:	82 2b       	or	r24, r18
 360:	88 bb       	out	0x18, r24	; 24
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	08 95       	ret
 366:	41 30       	cpi	r20, 0x01	; 1
 368:	69 f4       	brne	.+26     	; 0x384 <DIO_writePIN+0x9c>
 36a:	25 b3       	in	r18, 0x15	; 21
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_writePIN+0x8e>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_writePIN+0x8a>
 37a:	80 95       	com	r24
 37c:	82 23       	and	r24, r18
 37e:	85 bb       	out	0x15, r24	; 21
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	08 95       	ret
 384:	25 b3       	in	r18, 0x15	; 21
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_writePIN+0xa8>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_writePIN+0xa4>
 394:	82 2b       	or	r24, r18
 396:	85 bb       	out	0x15, r24	; 21
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	08 95       	ret
 39c:	41 30       	cpi	r20, 0x01	; 1
 39e:	69 f4       	brne	.+26     	; 0x3ba <DIO_writePIN+0xd2>
 3a0:	22 b3       	in	r18, 0x12	; 18
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <DIO_writePIN+0xc4>
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	6a 95       	dec	r22
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <DIO_writePIN+0xc0>
 3b0:	80 95       	com	r24
 3b2:	82 23       	and	r24, r18
 3b4:	82 bb       	out	0x12, r24	; 18
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	08 95       	ret
 3ba:	22 b3       	in	r18, 0x12	; 18
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_writePIN+0xde>
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	6a 95       	dec	r22
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_writePIN+0xda>
 3ca:	82 2b       	or	r24, r18
 3cc:	82 bb       	out	0x12, r24	; 18
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	08 95       	ret
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	08 95       	ret

000003d6 <DIO_togglePIN>:
	@param port The port to which the pin belongs (porta, portb, portc, or portd).
	@param pin The pin number to be toggled.
	@return DIO_E_OK if the toggle operation is successful, otherwise DIO_InvalidPort.
*/
u8_dioErrors_t DIO_togglePIN (en_dioPorts_t port, en_dioPins_t pin){
	switch(port){
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	91 f0       	breq	.+36     	; 0x3fe <DIO_togglePIN+0x28>
 3da:	28 f0       	brcs	.+10     	; 0x3e6 <DIO_togglePIN+0x10>
 3dc:	82 30       	cpi	r24, 0x02	; 2
 3de:	d9 f0       	breq	.+54     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3e0:	83 30       	cpi	r24, 0x03	; 3
 3e2:	29 f1       	breq	.+74     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 3e4:	30 c0       	rjmp	.+96     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
		case porta:
			TOGGLE_BIT(WR_PORT_A,pin);
 3e6:	2b b3       	in	r18, 0x1b	; 27
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_togglePIN+0x1c>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	6a 95       	dec	r22
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_togglePIN+0x18>
 3f6:	82 27       	eor	r24, r18
 3f8:	8b bb       	out	0x1b, r24	; 27
		break;
		default:
		return DIO_InvalidPort;
		break;
	}
	return DIO_E_OK;
 3fa:	80 e0       	ldi	r24, 0x00	; 0
*/
u8_dioErrors_t DIO_togglePIN (en_dioPorts_t port, en_dioPins_t pin){
	switch(port){
		case porta:
			TOGGLE_BIT(WR_PORT_A,pin);
			break;
 3fc:	08 95       	ret
		case portb:
			TOGGLE_BIT(WR_PORT_B,pin);
 3fe:	28 b3       	in	r18, 0x18	; 24
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	6a 95       	dec	r22
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	82 27       	eor	r24, r18
 410:	88 bb       	out	0x18, r24	; 24
		break;
		default:
		return DIO_InvalidPort;
		break;
	}
	return DIO_E_OK;
 412:	80 e0       	ldi	r24, 0x00	; 0
		case porta:
			TOGGLE_BIT(WR_PORT_A,pin);
			break;
		case portb:
			TOGGLE_BIT(WR_PORT_B,pin);
		break;
 414:	08 95       	ret
		case portc:
			TOGGLE_BIT(WR_PORT_C,pin);
 416:	25 b3       	in	r18, 0x15	; 21
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	6a 95       	dec	r22
 424:	e2 f7       	brpl	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	82 27       	eor	r24, r18
 428:	85 bb       	out	0x15, r24	; 21
		break;
		default:
		return DIO_InvalidPort;
		break;
	}
	return DIO_E_OK;
 42a:	80 e0       	ldi	r24, 0x00	; 0
		case portb:
			TOGGLE_BIT(WR_PORT_B,pin);
		break;
		case portc:
			TOGGLE_BIT(WR_PORT_C,pin);
		break;
 42c:	08 95       	ret
		case portd:
			TOGGLE_BIT(WR_PORT_D,pin);
 42e:	22 b3       	in	r18, 0x12	; 18
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	6a 95       	dec	r22
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	82 27       	eor	r24, r18
 440:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_InvalidPort;
		break;
	}
	return DIO_E_OK;
 442:	80 e0       	ldi	r24, 0x00	; 0
		case portc:
			TOGGLE_BIT(WR_PORT_C,pin);
		break;
		case portd:
			TOGGLE_BIT(WR_PORT_D,pin);
		break;
 444:	08 95       	ret
		default:
		return DIO_InvalidPort;
 446:	82 e0       	ldi	r24, 0x02	; 2
		break;
	}
	return DIO_E_OK;
}
 448:	08 95       	ret

0000044a <EXT_INTERRUPT_init>:
ptr_function_t EXT_INT_callbacks[INVALID_EXT_INT] ={NULL};

u8_interruptError_t EXT_INTERRUPT_init(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
	
	if(en_ext_interrupt_num < INVALID_EXT_INT){
 44a:	83 30       	cpi	r24, 0x03	; 3
 44c:	38 f5       	brcc	.+78     	; 0x49c <EXT_INTERRUPT_init+0x52>
		switch(en_ext_interrupt_num){
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	79 f0       	breq	.+30     	; 0x470 <EXT_INTERRUPT_init+0x26>
 452:	18 f0       	brcs	.+6      	; 0x45a <EXT_INTERRUPT_init+0x10>
 454:	82 30       	cpi	r24, 0x02	; 2
 456:	b9 f0       	breq	.+46     	; 0x486 <EXT_INTERRUPT_init+0x3c>
 458:	23 c0       	rjmp	.+70     	; 0x4a0 <EXT_INTERRUPT_init+0x56>
			case EXT_0:
				sei();	
 45a:	78 94       	sei
				DIO_init (portd, pin2, STD_INPUT);
 45c:	40 e0       	ldi	r20, 0x00	; 0
 45e:	62 e0       	ldi	r22, 0x02	; 2
 460:	83 e0       	ldi	r24, 0x03	; 3
 462:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_init>
				MCUCR_ADD |= ( arr_en_gc_edge_detection[EXT_0]<<INT0_MODE_INDEX);
 466:	85 b7       	in	r24, 0x35	; 53
 468:	82 60       	ori	r24, 0x02	; 2
 46a:	85 bf       	out	0x35, r24	; 53
#include "ext_interrupt.h"

ptr_function_t EXT_INT_callbacks[INVALID_EXT_INT] ={NULL};

u8_interruptError_t EXT_INTERRUPT_init(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 46c:	80 e0       	ldi	r24, 0x00	; 0
		switch(en_ext_interrupt_num){
			case EXT_0:
				sei();	
				DIO_init (portd, pin2, STD_INPUT);
				MCUCR_ADD |= ( arr_en_gc_edge_detection[EXT_0]<<INT0_MODE_INDEX);
				break;
 46e:	08 95       	ret
			case EXT_1:
				sei();
 470:	78 94       	sei
				DIO_init (portd, pin3, STD_INPUT);
 472:	40 e0       	ldi	r20, 0x00	; 0
 474:	63 e0       	ldi	r22, 0x03	; 3
 476:	83 e0       	ldi	r24, 0x03	; 3
 478:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_init>
				MCUCR_ADD |= ( arr_en_gc_edge_detection[EXT_1]<<INT1_MODE_INDEX);
 47c:	85 b7       	in	r24, 0x35	; 53
 47e:	8c 60       	ori	r24, 0x0C	; 12
 480:	85 bf       	out	0x35, r24	; 53
#include "ext_interrupt.h"

ptr_function_t EXT_INT_callbacks[INVALID_EXT_INT] ={NULL};

u8_interruptError_t EXT_INTERRUPT_init(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 482:	80 e0       	ldi	r24, 0x00	; 0
				break;
			case EXT_1:
				sei();
				DIO_init (portd, pin3, STD_INPUT);
				MCUCR_ADD |= ( arr_en_gc_edge_detection[EXT_1]<<INT1_MODE_INDEX);
				break;
 484:	08 95       	ret
			case EXT_2:
				sei();
 486:	78 94       	sei
				DIO_init (portb, pin2, STD_INPUT);
 488:	40 e0       	ldi	r20, 0x00	; 0
 48a:	62 e0       	ldi	r22, 0x02	; 2
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_init>
				MCUCSR_ADD |= ( arr_en_gc_edge_detection[EXT_2]<<INT2_MODE_INDEX);
 492:	84 b7       	in	r24, 0x34	; 52
 494:	80 68       	ori	r24, 0x80	; 128
 496:	84 bf       	out	0x34, r24	; 52
#include "ext_interrupt.h"

ptr_function_t EXT_INT_callbacks[INVALID_EXT_INT] ={NULL};

u8_interruptError_t EXT_INTERRUPT_init(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 498:	80 e0       	ldi	r24, 0x00	; 0
				break;
			case EXT_2:
				sei();
				DIO_init (portb, pin2, STD_INPUT);
				MCUCSR_ADD |= ( arr_en_gc_edge_detection[EXT_2]<<INT2_MODE_INDEX);
				break;
 49a:	08 95       	ret
				ret_state = EXT_INT_WRONG_EXT_NUM;
				break;
		}
	}
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM;
 49c:	82 e0       	ldi	r24, 0x02	; 2
 49e:	08 95       	ret
				sei();
				DIO_init (portb, pin2, STD_INPUT);
				MCUCSR_ADD |= ( arr_en_gc_edge_detection[EXT_2]<<INT2_MODE_INDEX);
				break;
			default:
				ret_state = EXT_INT_WRONG_EXT_NUM;
 4a0:	82 e0       	ldi	r24, 0x02	; 2
	}
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM;
	}
	return ret_state;
}
 4a2:	08 95       	ret

000004a4 <EXT_INTERRUPT_enable>:
u8_interruptError_t EXT_INTERRUPT_enable(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
	
	if(en_ext_interrupt_num < INVALID_EXT_INT){
 4a4:	83 30       	cpi	r24, 0x03	; 3
 4a6:	a8 f4       	brcc	.+42     	; 0x4d2 <EXT_INTERRUPT_enable+0x2e>
		switch(en_ext_interrupt_num){
 4a8:	81 30       	cpi	r24, 0x01	; 1
 4aa:	49 f0       	breq	.+18     	; 0x4be <EXT_INTERRUPT_enable+0x1a>
 4ac:	18 f0       	brcs	.+6      	; 0x4b4 <EXT_INTERRUPT_enable+0x10>
 4ae:	82 30       	cpi	r24, 0x02	; 2
 4b0:	59 f0       	breq	.+22     	; 0x4c8 <EXT_INTERRUPT_enable+0x24>
 4b2:	11 c0       	rjmp	.+34     	; 0x4d6 <EXT_INTERRUPT_enable+0x32>
			case EXT_0:
			SET_BIT(GICR_ADD,INT0_Globle);
 4b4:	8b b7       	in	r24, 0x3b	; 59
 4b6:	80 64       	ori	r24, 0x40	; 64
 4b8:	8b bf       	out	0x3b, r24	; 59
		ret_state = EXT_INT_WRONG_EXT_NUM;
	}
	return ret_state;
}
u8_interruptError_t EXT_INTERRUPT_enable(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 4ba:	80 e0       	ldi	r24, 0x00	; 0
	
	if(en_ext_interrupt_num < INVALID_EXT_INT){
		switch(en_ext_interrupt_num){
			case EXT_0:
			SET_BIT(GICR_ADD,INT0_Globle);
			break;
 4bc:	08 95       	ret
			case EXT_1:
			SET_BIT(GICR_ADD,INT1_Globle);
 4be:	8b b7       	in	r24, 0x3b	; 59
 4c0:	80 68       	ori	r24, 0x80	; 128
 4c2:	8b bf       	out	0x3b, r24	; 59
		ret_state = EXT_INT_WRONG_EXT_NUM;
	}
	return ret_state;
}
u8_interruptError_t EXT_INTERRUPT_enable(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 4c4:	80 e0       	ldi	r24, 0x00	; 0
			case EXT_0:
			SET_BIT(GICR_ADD,INT0_Globle);
			break;
			case EXT_1:
			SET_BIT(GICR_ADD,INT1_Globle);
			break;
 4c6:	08 95       	ret
			case EXT_2:
			SET_BIT(GICR_ADD,INT2_Globle);
 4c8:	8b b7       	in	r24, 0x3b	; 59
 4ca:	80 62       	ori	r24, 0x20	; 32
 4cc:	8b bf       	out	0x3b, r24	; 59
		ret_state = EXT_INT_WRONG_EXT_NUM;
	}
	return ret_state;
}
u8_interruptError_t EXT_INTERRUPT_enable(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 4ce:	80 e0       	ldi	r24, 0x00	; 0
			case EXT_1:
			SET_BIT(GICR_ADD,INT1_Globle);
			break;
			case EXT_2:
			SET_BIT(GICR_ADD,INT2_Globle);
			break;
 4d0:	08 95       	ret
			ret_state = EXT_INT_WRONG_EXT_NUM;
			break;
		}
	}
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM;
 4d2:	82 e0       	ldi	r24, 0x02	; 2
 4d4:	08 95       	ret
			break;
			case EXT_2:
			SET_BIT(GICR_ADD,INT2_Globle);
			break;
			default:
			ret_state = EXT_INT_WRONG_EXT_NUM;
 4d6:	82 e0       	ldi	r24, 0x02	; 2
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM;
	}
	return ret_state;
	
}
 4d8:	08 95       	ret

000004da <EXT_INTERRUPT_disable>:
u8_interruptError_t EXT_INTERRUPT_disable(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
	
	if(en_ext_interrupt_num < INVALID_EXT_INT){
 4da:	83 30       	cpi	r24, 0x03	; 3
 4dc:	a8 f4       	brcc	.+42     	; 0x508 <EXT_INTERRUPT_disable+0x2e>
		switch(en_ext_interrupt_num){
 4de:	81 30       	cpi	r24, 0x01	; 1
 4e0:	49 f0       	breq	.+18     	; 0x4f4 <EXT_INTERRUPT_disable+0x1a>
 4e2:	18 f0       	brcs	.+6      	; 0x4ea <EXT_INTERRUPT_disable+0x10>
 4e4:	82 30       	cpi	r24, 0x02	; 2
 4e6:	59 f0       	breq	.+22     	; 0x4fe <EXT_INTERRUPT_disable+0x24>
 4e8:	11 c0       	rjmp	.+34     	; 0x50c <EXT_INTERRUPT_disable+0x32>
			case EXT_0:
			CLEAR_BIT(GICR_ADD,INT0_Globle);
 4ea:	8b b7       	in	r24, 0x3b	; 59
 4ec:	8f 7b       	andi	r24, 0xBF	; 191
 4ee:	8b bf       	out	0x3b, r24	; 59
	}
	return ret_state;
	
}
u8_interruptError_t EXT_INTERRUPT_disable(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 4f0:	80 e0       	ldi	r24, 0x00	; 0
	
	if(en_ext_interrupt_num < INVALID_EXT_INT){
		switch(en_ext_interrupt_num){
			case EXT_0:
			CLEAR_BIT(GICR_ADD,INT0_Globle);
			break;
 4f2:	08 95       	ret
			case EXT_1:
			CLEAR_BIT(GICR_ADD,INT1_Globle);
 4f4:	8b b7       	in	r24, 0x3b	; 59
 4f6:	8f 77       	andi	r24, 0x7F	; 127
 4f8:	8b bf       	out	0x3b, r24	; 59
	}
	return ret_state;
	
}
u8_interruptError_t EXT_INTERRUPT_disable(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 4fa:	80 e0       	ldi	r24, 0x00	; 0
			case EXT_0:
			CLEAR_BIT(GICR_ADD,INT0_Globle);
			break;
			case EXT_1:
			CLEAR_BIT(GICR_ADD,INT1_Globle);
			break;
 4fc:	08 95       	ret
			case EXT_2:
			CLEAR_BIT(GICR_ADD,INT2_Globle);
 4fe:	8b b7       	in	r24, 0x3b	; 59
 500:	8f 7d       	andi	r24, 0xDF	; 223
 502:	8b bf       	out	0x3b, r24	; 59
	}
	return ret_state;
	
}
u8_interruptError_t EXT_INTERRUPT_disable(en_ext_interrupt_num_t en_ext_interrupt_num){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 504:	80 e0       	ldi	r24, 0x00	; 0
			case EXT_1:
			CLEAR_BIT(GICR_ADD,INT1_Globle);
			break;
			case EXT_2:
			CLEAR_BIT(GICR_ADD,INT2_Globle);
			break;
 506:	08 95       	ret
			ret_state = EXT_INT_WRONG_EXT_NUM;
			break;
		}
	}
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM;
 508:	82 e0       	ldi	r24, 0x02	; 2
 50a:	08 95       	ret
			break;
			case EXT_2:
			CLEAR_BIT(GICR_ADD,INT2_Globle);
			break;
			default:
			ret_state = EXT_INT_WRONG_EXT_NUM;
 50c:	82 e0       	ldi	r24, 0x02	; 2
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM;
	}
	return ret_state;
	
}
 50e:	08 95       	ret

00000510 <EXT_INTERRUPT_set_callback_init>:
u8_interruptError_t EXT_INTERRUPT_set_callback_init(en_ext_interrupt_num_t en_ext_interrupt_num ,void(*callback)(void)){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
	
	if(en_ext_interrupt_num < INVALID_EXT_INT){
 510:	83 30       	cpi	r24, 0x03	; 3
 512:	68 f4       	brcc	.+26     	; 0x52e <EXT_INTERRUPT_set_callback_init+0x1e>
		if(callback != NULL){
 514:	61 15       	cp	r22, r1
 516:	71 05       	cpc	r23, r1
 518:	61 f0       	breq	.+24     	; 0x532 <EXT_INTERRUPT_set_callback_init+0x22>
			EXT_INT_callbacks[en_ext_interrupt_num] = callback;
 51a:	e8 2f       	mov	r30, r24
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	ee 0f       	add	r30, r30
 520:	ff 1f       	adc	r31, r31
 522:	ea 58       	subi	r30, 0x8A	; 138
 524:	ff 4f       	sbci	r31, 0xFF	; 255
 526:	71 83       	std	Z+1, r23	; 0x01
 528:	60 83       	st	Z, r22
	}
	return ret_state;
	
}
u8_interruptError_t EXT_INTERRUPT_set_callback_init(en_ext_interrupt_num_t en_ext_interrupt_num ,void(*callback)(void)){
	u8_interruptError_t ret_state = EXT_INT_E_OK;
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	08 95       	ret
			ret_state = EXT_INT_NULL_PTR;
		}
		
	}
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM;
 52e:	82 e0       	ldi	r24, 0x02	; 2
 530:	08 95       	ret
	if(en_ext_interrupt_num < INVALID_EXT_INT){
		if(callback != NULL){
			EXT_INT_callbacks[en_ext_interrupt_num] = callback;
		}
		else{
			ret_state = EXT_INT_NULL_PTR;
 532:	83 e0       	ldi	r24, 0x03	; 3
	}
	else{
		ret_state = EXT_INT_WRONG_EXT_NUM;
	}
	return ret_state;
}
 534:	08 95       	ret

00000536 <__vector_1>:


ISR(EXT_INT0){
 536:	1f 92       	push	r1
 538:	0f 92       	push	r0
 53a:	0f b6       	in	r0, 0x3f	; 63
 53c:	0f 92       	push	r0
 53e:	11 24       	eor	r1, r1
 540:	2f 93       	push	r18
 542:	3f 93       	push	r19
 544:	4f 93       	push	r20
 546:	5f 93       	push	r21
 548:	6f 93       	push	r22
 54a:	7f 93       	push	r23
 54c:	8f 93       	push	r24
 54e:	9f 93       	push	r25
 550:	af 93       	push	r26
 552:	bf 93       	push	r27
 554:	ef 93       	push	r30
 556:	ff 93       	push	r31
	if(EXT_INT_callbacks[EXT_0] != NULL){
 558:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <__data_end>
 55c:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <__data_end+0x1>
 560:	30 97       	sbiw	r30, 0x00	; 0
 562:	09 f0       	breq	.+2      	; 0x566 <__vector_1+0x30>
		(*EXT_INT_callbacks[EXT_0])();
 564:	09 95       	icall
	else{
		return;
	}
	
	
}
 566:	ff 91       	pop	r31
 568:	ef 91       	pop	r30
 56a:	bf 91       	pop	r27
 56c:	af 91       	pop	r26
 56e:	9f 91       	pop	r25
 570:	8f 91       	pop	r24
 572:	7f 91       	pop	r23
 574:	6f 91       	pop	r22
 576:	5f 91       	pop	r21
 578:	4f 91       	pop	r20
 57a:	3f 91       	pop	r19
 57c:	2f 91       	pop	r18
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <__vector_2>:
ISR(EXT_INT1){
 588:	1f 92       	push	r1
 58a:	0f 92       	push	r0
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	0f 92       	push	r0
 590:	11 24       	eor	r1, r1
 592:	2f 93       	push	r18
 594:	3f 93       	push	r19
 596:	4f 93       	push	r20
 598:	5f 93       	push	r21
 59a:	6f 93       	push	r22
 59c:	7f 93       	push	r23
 59e:	8f 93       	push	r24
 5a0:	9f 93       	push	r25
 5a2:	af 93       	push	r26
 5a4:	bf 93       	push	r27
 5a6:	ef 93       	push	r30
 5a8:	ff 93       	push	r31
	
	
	if(EXT_INT_callbacks[EXT_1] != NULL){
 5aa:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__data_end+0x2>
 5ae:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__data_end+0x3>
 5b2:	30 97       	sbiw	r30, 0x00	; 0
 5b4:	09 f0       	breq	.+2      	; 0x5b8 <__vector_2+0x30>
		(*EXT_INT_callbacks[EXT_1])();
 5b6:	09 95       	icall
	else{
		return;
	}
	
	
}
 5b8:	ff 91       	pop	r31
 5ba:	ef 91       	pop	r30
 5bc:	bf 91       	pop	r27
 5be:	af 91       	pop	r26
 5c0:	9f 91       	pop	r25
 5c2:	8f 91       	pop	r24
 5c4:	7f 91       	pop	r23
 5c6:	6f 91       	pop	r22
 5c8:	5f 91       	pop	r21
 5ca:	4f 91       	pop	r20
 5cc:	3f 91       	pop	r19
 5ce:	2f 91       	pop	r18
 5d0:	0f 90       	pop	r0
 5d2:	0f be       	out	0x3f, r0	; 63
 5d4:	0f 90       	pop	r0
 5d6:	1f 90       	pop	r1
 5d8:	18 95       	reti

000005da <__vector_3>:
ISR(EXT_INT2){
 5da:	1f 92       	push	r1
 5dc:	0f 92       	push	r0
 5de:	0f b6       	in	r0, 0x3f	; 63
 5e0:	0f 92       	push	r0
 5e2:	11 24       	eor	r1, r1
 5e4:	2f 93       	push	r18
 5e6:	3f 93       	push	r19
 5e8:	4f 93       	push	r20
 5ea:	5f 93       	push	r21
 5ec:	6f 93       	push	r22
 5ee:	7f 93       	push	r23
 5f0:	8f 93       	push	r24
 5f2:	9f 93       	push	r25
 5f4:	af 93       	push	r26
 5f6:	bf 93       	push	r27
 5f8:	ef 93       	push	r30
 5fa:	ff 93       	push	r31
	
	if(EXT_INT_callbacks[EXT_2] != NULL){
 5fc:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <__data_end+0x4>
 600:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <__data_end+0x5>
 604:	30 97       	sbiw	r30, 0x00	; 0
 606:	09 f0       	breq	.+2      	; 0x60a <__vector_3+0x30>
		(*EXT_INT_callbacks[EXT_2])();
 608:	09 95       	icall
	}
	else{
		return;
	}
	
 60a:	ff 91       	pop	r31
 60c:	ef 91       	pop	r30
 60e:	bf 91       	pop	r27
 610:	af 91       	pop	r26
 612:	9f 91       	pop	r25
 614:	8f 91       	pop	r24
 616:	7f 91       	pop	r23
 618:	6f 91       	pop	r22
 61a:	5f 91       	pop	r21
 61c:	4f 91       	pop	r20
 61e:	3f 91       	pop	r19
 620:	2f 91       	pop	r18
 622:	0f 90       	pop	r0
 624:	0f be       	out	0x3f, r0	; 63
 626:	0f 90       	pop	r0
 628:	1f 90       	pop	r1
 62a:	18 95       	reti

0000062c <TIMER2_enuInit>:
	enu_timerStatus_t errorStatus = TIMER_OK;

	CLEAR_BIT(TIMSK, TOIE2);

	return errorStatus;
}
 62c:	84 30       	cpi	r24, 0x04	; 4
 62e:	48 f5       	brcc	.+82     	; 0x682 <TIMER2_enuInit+0x56>
 630:	14 bc       	out	0x24, r1	; 36
 632:	81 30       	cpi	r24, 0x01	; 1
 634:	71 f0       	breq	.+28     	; 0x652 <TIMER2_enuInit+0x26>
 636:	28 f0       	brcs	.+10     	; 0x642 <TIMER2_enuInit+0x16>
 638:	82 30       	cpi	r24, 0x02	; 2
 63a:	99 f0       	breq	.+38     	; 0x662 <TIMER2_enuInit+0x36>
 63c:	83 30       	cpi	r24, 0x03	; 3
 63e:	c9 f0       	breq	.+50     	; 0x672 <TIMER2_enuInit+0x46>
 640:	22 c0       	rjmp	.+68     	; 0x686 <TIMER2_enuInit+0x5a>
 642:	85 b5       	in	r24, 0x25	; 37
 644:	87 7f       	andi	r24, 0xF7	; 247
 646:	85 bd       	out	0x25, r24	; 37
 648:	85 b5       	in	r24, 0x25	; 37
 64a:	8f 7b       	andi	r24, 0xBF	; 191
 64c:	85 bd       	out	0x25, r24	; 37
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	08 95       	ret
 652:	85 b5       	in	r24, 0x25	; 37
 654:	87 7f       	andi	r24, 0xF7	; 247
 656:	85 bd       	out	0x25, r24	; 37
 658:	85 b5       	in	r24, 0x25	; 37
 65a:	80 64       	ori	r24, 0x40	; 64
 65c:	85 bd       	out	0x25, r24	; 37
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	08 95       	ret
 662:	85 b5       	in	r24, 0x25	; 37
 664:	88 60       	ori	r24, 0x08	; 8
 666:	85 bd       	out	0x25, r24	; 37
 668:	85 b5       	in	r24, 0x25	; 37
 66a:	8f 7b       	andi	r24, 0xBF	; 191
 66c:	85 bd       	out	0x25, r24	; 37
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	08 95       	ret
 672:	85 b5       	in	r24, 0x25	; 37
 674:	88 60       	ori	r24, 0x08	; 8
 676:	85 bd       	out	0x25, r24	; 37
 678:	85 b5       	in	r24, 0x25	; 37
 67a:	80 64       	ori	r24, 0x40	; 64
 67c:	85 bd       	out	0x25, r24	; 37
 67e:	80 e0       	ldi	r24, 0x00	; 0
 680:	08 95       	ret
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	08 95       	ret
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	08 95       	ret

0000068a <TIMER2_enuSetPrescallar>:
 68a:	88 30       	cpi	r24, 0x08	; 8
 68c:	70 f4       	brcc	.+28     	; 0x6aa <TIMER2_enuSetPrescallar+0x20>
 68e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <gl_enu_prescaller>
 692:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <gl_u8_timerStatus>
 696:	91 30       	cpi	r25, 0x01	; 1
 698:	51 f4       	brne	.+20     	; 0x6ae <TIMER2_enuSetPrescallar+0x24>
 69a:	95 b5       	in	r25, 0x25	; 37
 69c:	98 7f       	andi	r25, 0xF8	; 248
 69e:	89 2b       	or	r24, r25
 6a0:	95 b5       	in	r25, 0x25	; 37
 6a2:	89 2b       	or	r24, r25
 6a4:	85 bd       	out	0x25, r24	; 37
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	08 95       	ret
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	08 95       	ret
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	08 95       	ret

000006b2 <TIMER2_enuOVFIrqEnable>:
 6b2:	88 b7       	in	r24, 0x38	; 56
 6b4:	80 64       	ori	r24, 0x40	; 64
 6b6:	88 bf       	out	0x38, r24	; 56
 6b8:	89 b7       	in	r24, 0x39	; 57
 6ba:	80 64       	ori	r24, 0x40	; 64
 6bc:	89 bf       	out	0x39, r24	; 57
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	08 95       	ret

000006c2 <TIMER2_enuStart>:
/*************************************************************************************************************/
enu_timerStatus_t TIMER2_enuStart(void)
{
	enu_timerStatus_t errorStatus = TIMER_OK;

	TCCR2 |=  gl_enu_prescaller << PRESCALLER_OFFSET;
 6c2:	95 b5       	in	r25, 0x25	; 37
 6c4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <gl_enu_prescaller>
 6c8:	89 2b       	or	r24, r25
 6ca:	85 bd       	out	0x25, r24	; 37
	gl_u8_timerStatus  = RUNNING;
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <gl_u8_timerStatus>

	return errorStatus;
}
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	08 95       	ret

000006d6 <TIMER2_vidStop>:
/*************************************************************************************************************/
enu_timerStatus_t TIMER2_vidStop(void)
{
	enu_timerStatus_t errorStatus = TIMER_OK;

	TCCR2 &=  PRESCALLER_CLR_MSK;
 6d6:	85 b5       	in	r24, 0x25	; 37
 6d8:	88 7f       	andi	r24, 0xF8	; 248
 6da:	85 bd       	out	0x25, r24	; 37
	gl_u8_timerStatus = STOPPED;
 6dc:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <gl_u8_timerStatus>

	return errorStatus;
}
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	08 95       	ret

000006e4 <TIMER2_enuSetTime_ms>:
/*************************************************************************************************************/
enu_timerStatus_t TIMER2_enuSetTime_ms(uint8_t u32_time_ms)
{
 6e4:	cf 92       	push	r12
 6e6:	df 92       	push	r13
 6e8:	ef 92       	push	r14
 6ea:	ff 92       	push	r15
 6ec:	cf 93       	push	r28
 6ee:	c8 2f       	mov	r28, r24
	enu_timerStatus_t errorStatus = TIMER_OK;
	uint8_t desired_ticks;
	float32_t tick_time_ms;
	if( u32_time_ms < MAX_TIM_MS )
	{
		tick_time_ms = ((float32_t)prescaller_map[gl_enu_prescaller]) / ((uint32_t)F_CPU / 1000U)  ;
 6f0:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <gl_enu_prescaller>
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	ee 0f       	add	r30, r30
 6f8:	ff 1f       	adc	r31, r31
 6fa:	e7 59       	subi	r30, 0x97	; 151
 6fc:	ff 4f       	sbci	r31, 0xFF	; 255
 6fe:	60 81       	ld	r22, Z
 700:	71 81       	ldd	r23, Z+1	; 0x01
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__floatunsisf>
 70a:	20 e0       	ldi	r18, 0x00	; 0
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	4a ef       	ldi	r20, 0xFA	; 250
 710:	55 e4       	ldi	r21, 0x45	; 69
 712:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__divsf3>
 716:	6b 01       	movw	r12, r22
 718:	7c 01       	movw	r14, r24
		desired_ticks = u32_time_ms / tick_time_ms;
 71a:	6c 2f       	mov	r22, r28
 71c:	70 e0       	ldi	r23, 0x00	; 0
 71e:	80 e0       	ldi	r24, 0x00	; 0
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__floatsisf>
 726:	a7 01       	movw	r20, r14
 728:	96 01       	movw	r18, r12
 72a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__divsf3>
 72e:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__fixunssfsi>
		{
			gl_u8_ovf = 1;
		}
		else if(desired_ticks < OVF_TICKS)
		{
			gl_u8_preload = OVF_TICKS - desired_ticks;
 732:	61 95       	neg	r22
 734:	60 93 7e 00 	sts	0x007E, r22	; 0x80007e <gl_u8_preload>
			TCNT2 = gl_u8_preload;
 738:	64 bd       	out	0x24, r22	; 36
			errorStatus = TIMER_NOK;
		}


		return errorStatus;
	}
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	cf 91       	pop	r28
 73e:	ff 90       	pop	r15
 740:	ef 90       	pop	r14
 742:	df 90       	pop	r13
 744:	cf 90       	pop	r12
 746:	08 95       	ret

00000748 <TIMER2_vidSetcbf_OVF>:

/*************************************************************************************************************/
void TIMER2_vidSetcbf_OVF(ptrFunc cbf)
{
	if (cbf != NULL)
 748:	00 97       	sbiw	r24, 0x00	; 0
 74a:	21 f0       	breq	.+8      	; 0x754 <TIMER2_vidSetcbf_OVF+0xc>
	{
		gl_CallFunc = cbf;
 74c:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <gl_CallFunc+0x1>
 750:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <gl_CallFunc>
 754:	08 95       	ret

00000756 <__vector_5>:

/*************************************************************************************************************
 * 							ISR Interrupt Handling
 ************************************************************************************************************/
ISR(TIMER2_OVF)
{
 756:	1f 92       	push	r1
 758:	0f 92       	push	r0
 75a:	0f b6       	in	r0, 0x3f	; 63
 75c:	0f 92       	push	r0
 75e:	11 24       	eor	r1, r1
 760:	2f 93       	push	r18
 762:	3f 93       	push	r19
 764:	4f 93       	push	r20
 766:	5f 93       	push	r21
 768:	6f 93       	push	r22
 76a:	7f 93       	push	r23
 76c:	8f 93       	push	r24
 76e:	9f 93       	push	r25
 770:	af 93       	push	r26
 772:	bf 93       	push	r27
 774:	ef 93       	push	r30
 776:	ff 93       	push	r31
	if (gl_CallFunc != NULL)
 778:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <gl_CallFunc>
 77c:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <gl_CallFunc+0x1>
 780:	89 2b       	or	r24, r25
 782:	41 f0       	breq	.+16     	; 0x794 <__vector_5+0x3e>
	{
		TCNT2 = gl_u8_preload;
 784:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <gl_u8_preload>
 788:	84 bd       	out	0x24, r24	; 36
		gl_CallFunc();
 78a:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <gl_CallFunc>
 78e:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <gl_CallFunc+0x1>
 792:	09 95       	icall
			TCNT2 = gl_u8_preload;
			gl_CallFunc();	
			
		}
	}*/
}
 794:	ff 91       	pop	r31
 796:	ef 91       	pop	r30
 798:	bf 91       	pop	r27
 79a:	af 91       	pop	r26
 79c:	9f 91       	pop	r25
 79e:	8f 91       	pop	r24
 7a0:	7f 91       	pop	r23
 7a2:	6f 91       	pop	r22
 7a4:	5f 91       	pop	r21
 7a6:	4f 91       	pop	r20
 7a8:	3f 91       	pop	r19
 7aa:	2f 91       	pop	r18
 7ac:	0f 90       	pop	r0
 7ae:	0f be       	out	0x3f, r0	; 63
 7b0:	0f 90       	pop	r0
 7b2:	1f 90       	pop	r1
 7b4:	18 95       	reti

000007b6 <EXT_INTERRUPT_MANAGER_init>:
 *  Author: Mahmoud Sarhan
 */ 
#include "ext_interrupt_manager.h"

u8_interruptError_t EXT_INTERRUPT_MANAGER_init(en_ext_interrupt_num_t en_ext_interrupt_num,void(*callback)(void))
{
 7b6:	0f 93       	push	r16
 7b8:	1f 93       	push	r17
 7ba:	cf 93       	push	r28
 7bc:	c8 2f       	mov	r28, r24
 7be:	8b 01       	movw	r16, r22
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
	u8_interruptError_retVal = EXT_INTERRUPT_init(en_ext_interrupt_num);
 7c0:	0e 94 25 02 	call	0x44a	; 0x44a <EXT_INTERRUPT_init>
	u8_interruptError_retVal = EXT_INTERRUPT_set_callback_init(en_ext_interrupt_num,callback);
 7c4:	b8 01       	movw	r22, r16
 7c6:	8c 2f       	mov	r24, r28
 7c8:	0e 94 88 02 	call	0x510	; 0x510 <EXT_INTERRUPT_set_callback_init>
	return u8_interruptError_retVal;
}
 7cc:	cf 91       	pop	r28
 7ce:	1f 91       	pop	r17
 7d0:	0f 91       	pop	r16
 7d2:	08 95       	ret

000007d4 <EXT_INTERRUPT_MANAGER_enable>:
u8_interruptError_t EXT_INTERRUPT_MANAGER_enable(en_ext_interrupt_num_t en_ext_interrupt_num)
{
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
	u8_interruptError_retVal = EXT_INTERRUPT_enable(en_ext_interrupt_num);
 7d4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <EXT_INTERRUPT_enable>
	return u8_interruptError_retVal;
}
 7d8:	08 95       	ret

000007da <EXT_INTERRUPT_MANAGER_disable>:
u8_interruptError_t EXT_INTERRUPT_MANAGER_disable(en_ext_interrupt_num_t en_ext_interrupt_num)
{
	u8_interruptError_t u8_interruptError_retVal = EXT_INT_E_OK;
	u8_interruptError_retVal = EXT_INTERRUPT_disable(en_ext_interrupt_num);
 7da:	0e 94 6d 02 	call	0x4da	; 0x4da <EXT_INTERRUPT_disable>
	return u8_interruptError_retVal;
}
 7de:	08 95       	ret

000007e0 <SOS_token_config_param>:
	else
	{
		enu_system_status_retVal = SOS_STATUS_INVALID_STATE;
	}
	return enu_system_status_retVal;
}
 7e0:	9c 01       	movw	r18, r24
 7e2:	e6 2f       	mov	r30, r22
 7e4:	f0 e0       	ldi	r31, 0x00	; 0
 7e6:	e0 55       	subi	r30, 0x50	; 80
 7e8:	fe 4f       	sbci	r31, 0xFE	; 254
 7ea:	80 81       	ld	r24, Z
 7ec:	81 11       	cpse	r24, r1
 7ee:	1b c0       	rjmp	.+54     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7f0:	e4 2f       	mov	r30, r20
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	e4 5b       	subi	r30, 0xB4	; 180
 7f6:	fe 4f       	sbci	r31, 0xFE	; 254
 7f8:	80 81       	ld	r24, Z
 7fa:	81 11       	cpse	r24, r1
 7fc:	16 c0       	rjmp	.+44     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 7fe:	91 e0       	ldi	r25, 0x01	; 1
 800:	0c c0       	rjmp	.+24     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 802:	86 e0       	ldi	r24, 0x06	; 6
 804:	98 9f       	mul	r25, r24
 806:	f0 01       	movw	r30, r0
 808:	11 24       	eor	r1, r1
 80a:	ec 5e       	subi	r30, 0xEC	; 236
 80c:	fd 4f       	sbci	r31, 0xFD	; 253
 80e:	40 81       	ld	r20, Z
 810:	51 81       	ldd	r21, Z+1	; 0x01
 812:	42 17       	cp	r20, r18
 814:	53 07       	cpc	r21, r19
 816:	59 f0       	breq	.+22     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 818:	9f 5f       	subi	r25, 0xFF	; 255
 81a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <u8_gs_max_count_of_tasks>
 81e:	98 17       	cp	r25, r24
 820:	80 f3       	brcs	.-32     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	08 95       	ret
 826:	87 e0       	ldi	r24, 0x07	; 7
 828:	08 95       	ret
 82a:	87 e0       	ldi	r24, 0x07	; 7
 82c:	08 95       	ret
 82e:	87 e0       	ldi	r24, 0x07	; 7
 830:	08 95       	ret

00000832 <SOS_rearrange_tasks>:
 832:	6f 92       	push	r6
 834:	7f 92       	push	r7
 836:	9f 92       	push	r9
 838:	af 92       	push	r10
 83a:	bf 92       	push	r11
 83c:	cf 92       	push	r12
 83e:	df 92       	push	r13
 840:	ef 92       	push	r14
 842:	ff 92       	push	r15
 844:	0f 93       	push	r16
 846:	1f 93       	push	r17
 848:	cf 93       	push	r28
 84a:	df 93       	push	r29
 84c:	51 e0       	ldi	r21, 0x01	; 1
 84e:	83 c0       	rjmp	.+262    	; 0x956 <__stack+0xf7>
 850:	aa 24       	eor	r10, r10
 852:	a3 94       	inc	r10
 854:	a5 0e       	add	r10, r21
 856:	4a 2d       	mov	r20, r10
 858:	7a c0       	rjmp	.+244    	; 0x94e <__stack+0xef>
 85a:	25 2f       	mov	r18, r21
 85c:	30 e0       	ldi	r19, 0x00	; 0
 85e:	f9 01       	movw	r30, r18
 860:	ee 0f       	add	r30, r30
 862:	ff 1f       	adc	r31, r31
 864:	e2 0f       	add	r30, r18
 866:	f3 1f       	adc	r31, r19
 868:	ee 0f       	add	r30, r30
 86a:	ff 1f       	adc	r31, r31
 86c:	ec 5e       	subi	r30, 0xEC	; 236
 86e:	fd 4f       	sbci	r31, 0xFD	; 253
 870:	73 81       	ldd	r23, Z+3	; 0x03
 872:	84 2f       	mov	r24, r20
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	fc 01       	movw	r30, r24
 878:	ee 0f       	add	r30, r30
 87a:	ff 1f       	adc	r31, r31
 87c:	e8 0f       	add	r30, r24
 87e:	f9 1f       	adc	r31, r25
 880:	ee 0f       	add	r30, r30
 882:	ff 1f       	adc	r31, r31
 884:	ec 5e       	subi	r30, 0xEC	; 236
 886:	fd 4f       	sbci	r31, 0xFD	; 253
 888:	63 81       	ldd	r22, Z+3	; 0x03
 88a:	67 17       	cp	r22, r23
 88c:	08 f0       	brcs	.+2      	; 0x890 <__stack+0x31>
 88e:	5e c0       	rjmp	.+188    	; 0x94c <__stack+0xed>
 890:	39 01       	movw	r6, r18
 892:	66 0c       	add	r6, r6
 894:	77 1c       	adc	r7, r7
 896:	f3 01       	movw	r30, r6
 898:	e2 0f       	add	r30, r18
 89a:	f3 1f       	adc	r31, r19
 89c:	ee 0f       	add	r30, r30
 89e:	ff 1f       	adc	r31, r31
 8a0:	ec 5e       	subi	r30, 0xEC	; 236
 8a2:	fd 4f       	sbci	r31, 0xFD	; 253
 8a4:	00 81       	ld	r16, Z
 8a6:	11 81       	ldd	r17, Z+1	; 0x01
 8a8:	bc 01       	movw	r22, r24
 8aa:	66 0f       	add	r22, r22
 8ac:	77 1f       	adc	r23, r23
 8ae:	db 01       	movw	r26, r22
 8b0:	a8 0f       	add	r26, r24
 8b2:	b9 1f       	adc	r27, r25
 8b4:	aa 0f       	add	r26, r26
 8b6:	bb 1f       	adc	r27, r27
 8b8:	ac 5e       	subi	r26, 0xEC	; 236
 8ba:	bd 4f       	sbci	r27, 0xFD	; 253
 8bc:	ed 90       	ld	r14, X+
 8be:	fc 90       	ld	r15, X
 8c0:	11 97       	sbiw	r26, 0x01	; 1
 8c2:	f1 82       	std	Z+1, r15	; 0x01
 8c4:	e0 82       	st	Z, r14
 8c6:	11 96       	adiw	r26, 0x01	; 1
 8c8:	1c 93       	st	X, r17
 8ca:	0e 93       	st	-X, r16
 8cc:	83 01       	movw	r16, r6
 8ce:	0d 57       	subi	r16, 0x7D	; 125
 8d0:	1f 4f       	sbci	r17, 0xFF	; 255
 8d2:	e8 01       	movw	r28, r16
 8d4:	98 80       	ld	r9, Y
 8d6:	eb 01       	movw	r28, r22
 8d8:	cd 57       	subi	r28, 0x7D	; 125
 8da:	df 4f       	sbci	r29, 0xFF	; 255
 8dc:	7e 01       	movw	r14, r28
 8de:	c8 80       	ld	r12, Y
 8e0:	d9 80       	ldd	r13, Y+1	; 0x01
 8e2:	e8 01       	movw	r28, r16
 8e4:	d9 82       	std	Y+1, r13	; 0x01
 8e6:	c8 82       	st	Y, r12
 8e8:	09 2d       	mov	r16, r9
 8ea:	10 e0       	ldi	r17, 0x00	; 0
 8ec:	e7 01       	movw	r28, r14
 8ee:	19 83       	std	Y+1, r17	; 0x01
 8f0:	08 83       	st	Y, r16
 8f2:	04 81       	ldd	r16, Z+4	; 0x04
 8f4:	15 81       	ldd	r17, Z+5	; 0x05
 8f6:	14 96       	adiw	r26, 0x04	; 4
 8f8:	ed 90       	ld	r14, X+
 8fa:	fc 90       	ld	r15, X
 8fc:	15 97       	sbiw	r26, 0x05	; 5
 8fe:	f5 82       	std	Z+5, r15	; 0x05
 900:	e4 82       	std	Z+4, r14	; 0x04
 902:	15 96       	adiw	r26, 0x05	; 5
 904:	1c 93       	st	X, r17
 906:	0e 93       	st	-X, r16
 908:	14 97       	sbiw	r26, 0x04	; 4
 90a:	02 81       	ldd	r16, Z+2	; 0x02
 90c:	12 96       	adiw	r26, 0x02	; 2
 90e:	1c 91       	ld	r17, X
 910:	12 97       	sbiw	r26, 0x02	; 2
 912:	12 83       	std	Z+2, r17	; 0x02
 914:	12 96       	adiw	r26, 0x02	; 2
 916:	0c 93       	st	X, r16
 918:	12 97       	sbiw	r26, 0x02	; 2
 91a:	e2 80       	ldd	r14, Z+2	; 0x02
 91c:	f1 2c       	mov	r15, r1
 91e:	e7 01       	movw	r28, r14
 920:	c0 55       	subi	r28, 0x50	; 80
 922:	de 4f       	sbci	r29, 0xFE	; 254
 924:	58 83       	st	Y, r21
 926:	10 e0       	ldi	r17, 0x00	; 0
 928:	00 55       	subi	r16, 0x50	; 80
 92a:	1e 4f       	sbci	r17, 0xFE	; 254
 92c:	e8 01       	movw	r28, r16
 92e:	48 83       	st	Y, r20
 930:	13 81       	ldd	r17, Z+3	; 0x03
 932:	13 96       	adiw	r26, 0x03	; 3
 934:	ec 91       	ld	r30, X
 936:	13 97       	sbiw	r26, 0x03	; 3
 938:	e3 01       	movw	r28, r6
 93a:	c2 0f       	add	r28, r18
 93c:	d3 1f       	adc	r29, r19
 93e:	cc 0f       	add	r28, r28
 940:	dd 1f       	adc	r29, r29
 942:	cc 5e       	subi	r28, 0xEC	; 236
 944:	dd 4f       	sbci	r29, 0xFD	; 253
 946:	eb 83       	std	Y+3, r30	; 0x03
 948:	fd 01       	movw	r30, r26
 94a:	13 83       	std	Z+3, r17	; 0x03
 94c:	4f 5f       	subi	r20, 0xFF	; 255
 94e:	4b 15       	cp	r20, r11
 950:	08 f4       	brcc	.+2      	; 0x954 <__stack+0xf5>
 952:	83 cf       	rjmp	.-250    	; 0x85a <SOS_rearrange_tasks+0x28>
 954:	5a 2d       	mov	r21, r10
 956:	b0 90 64 00 	lds	r11, 0x0064	; 0x800064 <u8_gs_max_count_of_tasks>
 95a:	5b 15       	cp	r21, r11
 95c:	08 f4       	brcc	.+2      	; 0x960 <__stack+0x101>
 95e:	78 cf       	rjmp	.-272    	; 0x850 <SOS_rearrange_tasks+0x1e>
 960:	df 91       	pop	r29
 962:	cf 91       	pop	r28
 964:	1f 91       	pop	r17
 966:	0f 91       	pop	r16
 968:	ff 90       	pop	r15
 96a:	ef 90       	pop	r14
 96c:	df 90       	pop	r13
 96e:	cf 90       	pop	r12
 970:	bf 90       	pop	r11
 972:	af 90       	pop	r10
 974:	9f 90       	pop	r9
 976:	7f 90       	pop	r7
 978:	6f 90       	pop	r6
 97a:	08 95       	ret

0000097c <SOS_tick_cbf>:
 97c:	41 e0       	ldi	r20, 0x01	; 1
 97e:	20 c0       	rjmp	.+64     	; 0x9c0 <SOS_tick_cbf+0x44>
 980:	24 2f       	mov	r18, r20
 982:	30 e0       	ldi	r19, 0x00	; 0
 984:	c9 01       	movw	r24, r18
 986:	88 0f       	add	r24, r24
 988:	99 1f       	adc	r25, r25
 98a:	fc 01       	movw	r30, r24
 98c:	ed 57       	subi	r30, 0x7D	; 125
 98e:	ff 4f       	sbci	r31, 0xFF	; 255
 990:	60 81       	ld	r22, Z
 992:	71 81       	ldd	r23, Z+1	; 0x01
 994:	fc 01       	movw	r30, r24
 996:	e2 0f       	add	r30, r18
 998:	f3 1f       	adc	r31, r19
 99a:	ee 0f       	add	r30, r30
 99c:	ff 1f       	adc	r31, r31
 99e:	ec 5e       	subi	r30, 0xEC	; 236
 9a0:	fd 4f       	sbci	r31, 0xFD	; 253
 9a2:	84 81       	ldd	r24, Z+4	; 0x04
 9a4:	95 81       	ldd	r25, Z+5	; 0x05
 9a6:	68 17       	cp	r22, r24
 9a8:	79 07       	cpc	r23, r25
 9aa:	49 f0       	breq	.+18     	; 0x9be <SOS_tick_cbf+0x42>
 9ac:	22 0f       	add	r18, r18
 9ae:	33 1f       	adc	r19, r19
 9b0:	f9 01       	movw	r30, r18
 9b2:	ed 57       	subi	r30, 0x7D	; 125
 9b4:	ff 4f       	sbci	r31, 0xFF	; 255
 9b6:	6f 5f       	subi	r22, 0xFF	; 255
 9b8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ba:	71 83       	std	Z+1, r23	; 0x01
 9bc:	60 83       	st	Z, r22
 9be:	4f 5f       	subi	r20, 0xFF	; 255
 9c0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <u8_gs_max_count_of_tasks>
 9c4:	48 17       	cp	r20, r24
 9c6:	e0 f2       	brcs	.-72     	; 0x980 <SOS_tick_cbf+0x4>
 9c8:	08 95       	ret

000009ca <SOS_init>:
 9ca:	cf 93       	push	r28
 9cc:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8_gs_sos_module_state>
 9d0:	81 11       	cpse	r24, r1
 9d2:	15 c0       	rjmp	.+42     	; 0x9fe <SOS_init+0x34>
 9d4:	0e 94 16 03 	call	0x62c	; 0x62c <TIMER2_enuInit>
 9d8:	84 e0       	ldi	r24, 0x04	; 4
 9da:	0e 94 45 03 	call	0x68a	; 0x68a <TIMER2_enuSetPrescallar>
 9de:	81 e0       	ldi	r24, 0x01	; 1
 9e0:	0e 94 72 03 	call	0x6e4	; 0x6e4 <TIMER2_enuSetTime_ms>
 9e4:	0e 94 59 03 	call	0x6b2	; 0x6b2 <TIMER2_enuOVFIrqEnable>
 9e8:	c8 2f       	mov	r28, r24
 9ea:	8e eb       	ldi	r24, 0xBE	; 190
 9ec:	94 e0       	ldi	r25, 0x04	; 4
 9ee:	0e 94 a4 03 	call	0x748	; 0x748 <TIMER2_vidSetcbf_OVF>
 9f2:	c1 11       	cpse	r28, r1
 9f4:	05 c0       	rjmp	.+10     	; 0xa00 <SOS_init+0x36>
 9f6:	81 e0       	ldi	r24, 0x01	; 1
 9f8:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <u8_gs_sos_module_state>
 9fc:	01 c0       	rjmp	.+2      	; 0xa00 <SOS_init+0x36>
 9fe:	c7 e0       	ldi	r28, 0x07	; 7
 a00:	c1 11       	cpse	r28, r1
 a02:	c7 e0       	ldi	r28, 0x07	; 7
 a04:	8c 2f       	mov	r24, r28
 a06:	cf 91       	pop	r28
 a08:	08 95       	ret

00000a0a <SOS_create_task>:
 a0a:	af 92       	push	r10
 a0c:	bf 92       	push	r11
 a0e:	cf 92       	push	r12
 a10:	df 92       	push	r13
 a12:	ff 92       	push	r15
 a14:	0f 93       	push	r16
 a16:	1f 93       	push	r17
 a18:	cf 93       	push	r28
 a1a:	df 93       	push	r29
 a1c:	00 97       	sbiw	r24, 0x00	; 0
 a1e:	09 f4       	brne	.+2      	; 0xa22 <SOS_create_task+0x18>
 a20:	44 c0       	rjmp	.+136    	; 0xaaa <SOS_create_task+0xa0>
 a22:	64 36       	cpi	r22, 0x64	; 100
 a24:	08 f0       	brcs	.+2      	; 0xa28 <SOS_create_task+0x1e>
 a26:	43 c0       	rjmp	.+134    	; 0xaae <SOS_create_task+0xa4>
 a28:	66 23       	and	r22, r22
 a2a:	09 f4       	brne	.+2      	; 0xa2e <SOS_create_task+0x24>
 a2c:	42 c0       	rjmp	.+132    	; 0xab2 <SOS_create_task+0xa8>
 a2e:	44 36       	cpi	r20, 0x64	; 100
 a30:	08 f0       	brcs	.+2      	; 0xa34 <SOS_create_task+0x2a>
 a32:	41 c0       	rjmp	.+130    	; 0xab6 <SOS_create_task+0xac>
 a34:	d0 91 64 00 	lds	r29, 0x0064	; 0x800064 <u8_gs_max_count_of_tasks>
 a38:	0d 2f       	mov	r16, r29
 a3a:	10 e0       	ldi	r17, 0x00	; 0
 a3c:	f8 01       	movw	r30, r16
 a3e:	ee 0f       	add	r30, r30
 a40:	ff 1f       	adc	r31, r31
 a42:	e0 0f       	add	r30, r16
 a44:	f1 1f       	adc	r31, r17
 a46:	ee 0f       	add	r30, r30
 a48:	ff 1f       	adc	r31, r31
 a4a:	ec 5e       	subi	r30, 0xEC	; 236
 a4c:	fd 4f       	sbci	r31, 0xFD	; 253
 a4e:	01 90       	ld	r0, Z+
 a50:	f0 81       	ld	r31, Z
 a52:	e0 2d       	mov	r30, r0
 a54:	ef 2b       	or	r30, r31
 a56:	89 f5       	brne	.+98     	; 0xaba <SOS_create_task+0xb0>
 a58:	50 91 4b 01 	lds	r21, 0x014B	; 0x80014b <u8_gs_sos_module_state>
 a5c:	51 30       	cpi	r21, 0x01	; 1
 a5e:	79 f5       	brne	.+94     	; 0xabe <SOS_create_task+0xb4>
 a60:	69 01       	movw	r12, r18
 a62:	c4 2f       	mov	r28, r20
 a64:	f6 2e       	mov	r15, r22
 a66:	5c 01       	movw	r10, r24
 a68:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <SOS_token_config_param>
 a6c:	87 30       	cpi	r24, 0x07	; 7
 a6e:	49 f1       	breq	.+82     	; 0xac2 <SOS_create_task+0xb8>
 a70:	86 e0       	ldi	r24, 0x06	; 6
 a72:	80 9f       	mul	r24, r16
 a74:	f0 01       	movw	r30, r0
 a76:	81 9f       	mul	r24, r17
 a78:	f0 0d       	add	r31, r0
 a7a:	11 24       	eor	r1, r1
 a7c:	ec 5e       	subi	r30, 0xEC	; 236
 a7e:	fd 4f       	sbci	r31, 0xFD	; 253
 a80:	b1 82       	std	Z+1, r11	; 0x01
 a82:	a0 82       	st	Z, r10
 a84:	c3 83       	std	Z+3, r28	; 0x03
 a86:	d5 82       	std	Z+5, r13	; 0x05
 a88:	c4 82       	std	Z+4, r12	; 0x04
 a8a:	f2 82       	std	Z+2, r15	; 0x02
 a8c:	ec 2f       	mov	r30, r28
 a8e:	f0 e0       	ldi	r31, 0x00	; 0
 a90:	e4 5b       	subi	r30, 0xB4	; 180
 a92:	fe 4f       	sbci	r31, 0xFE	; 254
 a94:	d0 83       	st	Z, r29
 a96:	ef 2d       	mov	r30, r15
 a98:	f0 e0       	ldi	r31, 0x00	; 0
 a9a:	e0 55       	subi	r30, 0x50	; 80
 a9c:	fe 4f       	sbci	r31, 0xFE	; 254
 a9e:	d0 83       	st	Z, r29
 aa0:	df 5f       	subi	r29, 0xFF	; 255
 aa2:	d0 93 64 00 	sts	0x0064, r29	; 0x800064 <u8_gs_max_count_of_tasks>
 aa6:	80 e0       	ldi	r24, 0x00	; 0
 aa8:	0d c0       	rjmp	.+26     	; 0xac4 <SOS_create_task+0xba>
 aaa:	87 e0       	ldi	r24, 0x07	; 7
 aac:	0b c0       	rjmp	.+22     	; 0xac4 <SOS_create_task+0xba>
 aae:	87 e0       	ldi	r24, 0x07	; 7
 ab0:	09 c0       	rjmp	.+18     	; 0xac4 <SOS_create_task+0xba>
 ab2:	87 e0       	ldi	r24, 0x07	; 7
 ab4:	07 c0       	rjmp	.+14     	; 0xac4 <SOS_create_task+0xba>
 ab6:	87 e0       	ldi	r24, 0x07	; 7
 ab8:	05 c0       	rjmp	.+10     	; 0xac4 <SOS_create_task+0xba>
 aba:	87 e0       	ldi	r24, 0x07	; 7
 abc:	03 c0       	rjmp	.+6      	; 0xac4 <SOS_create_task+0xba>
 abe:	87 e0       	ldi	r24, 0x07	; 7
 ac0:	01 c0       	rjmp	.+2      	; 0xac4 <SOS_create_task+0xba>
 ac2:	87 e0       	ldi	r24, 0x07	; 7
 ac4:	df 91       	pop	r29
 ac6:	cf 91       	pop	r28
 ac8:	1f 91       	pop	r17
 aca:	0f 91       	pop	r16
 acc:	ff 90       	pop	r15
 ace:	df 90       	pop	r13
 ad0:	cf 90       	pop	r12
 ad2:	bf 90       	pop	r11
 ad4:	af 90       	pop	r10
 ad6:	08 95       	ret

00000ad8 <SOS_run>:
* Desc : SOS_run to run the sos module
* Input : void
* Output : void
*/
void SOS_run(void)
{
 ad8:	0f 93       	push	r16
 ada:	1f 93       	push	r17
 adc:	cf 93       	push	r28
	// arrange tasks for 1 time only in the first start
	if (INIT == u8_gs_rearrange_flag)
 ade:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <u8_gs_rearrange_flag>
 ae2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <u8_gs_rearrange_flag+0x1>
 ae6:	01 97       	sbiw	r24, 0x01	; 1
 ae8:	31 f4       	brne	.+12     	; 0xaf6 <SOS_run+0x1e>
	{
		SOS_rearrange_tasks();
 aea:	0e 94 19 04 	call	0x832	; 0x832 <SOS_rearrange_tasks>
		u8_gs_rearrange_flag = NOT_INIT;
 aee:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <u8_gs_rearrange_flag+0x1>
 af2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <u8_gs_rearrange_flag>
	}
	
	
	// disable start external interrupt
	// enable stop external interrupt
	if (NULL != ptr_function_disable_ext_interrupt)
 af6:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <ptr_function_disable_ext_interrupt>
 afa:	f0 91 82 00 	lds	r31, 0x0082	; 0x800082 <ptr_function_disable_ext_interrupt+0x1>
 afe:	30 97       	sbiw	r30, 0x00	; 0
 b00:	29 f0       	breq	.+10     	; 0xb0c <SOS_run+0x34>
	{
		// run handler
		(ptr_function_disable_ext_interrupt)();
 b02:	09 95       	icall
		
		// clear the pointer
		ptr_function_disable_ext_interrupt = NULL;
 b04:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <ptr_function_disable_ext_interrupt+0x1>
 b08:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <ptr_function_disable_ext_interrupt>
		// do nothing
	}
	
	
	// start timer 
	TIMER2_enuStart();
 b0c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <TIMER2_enuStart>
	
	
	// loop till the state change 
	while(INIT == u8_gs_sos_module_state)
 b10:	30 c0       	rjmp	.+96     	; 0xb72 <SOS_run+0x9a>
		
		// loop on tasks based on priority and execution time
		for(uint8_t i = DATABASE_FIRST_INDEX ; i  < u8_gs_max_count_of_tasks ; i++)
		{
			// if its the time to be executed the task will run
			if (arr_st_gs_task_parameters[i].u16_task_period == u16_sos_task_tick[i])
 b12:	2c 2f       	mov	r18, r28
 b14:	30 e0       	ldi	r19, 0x00	; 0
 b16:	c9 01       	movw	r24, r18
 b18:	88 0f       	add	r24, r24
 b1a:	99 1f       	adc	r25, r25
 b1c:	fc 01       	movw	r30, r24
 b1e:	e2 0f       	add	r30, r18
 b20:	f3 1f       	adc	r31, r19
 b22:	ee 0f       	add	r30, r30
 b24:	ff 1f       	adc	r31, r31
 b26:	ec 5e       	subi	r30, 0xEC	; 236
 b28:	fd 4f       	sbci	r31, 0xFD	; 253
 b2a:	44 81       	ldd	r20, Z+4	; 0x04
 b2c:	55 81       	ldd	r21, Z+5	; 0x05
 b2e:	fc 01       	movw	r30, r24
 b30:	ed 57       	subi	r30, 0x7D	; 125
 b32:	ff 4f       	sbci	r31, 0xFF	; 255
 b34:	80 81       	ld	r24, Z
 b36:	91 81       	ldd	r25, Z+1	; 0x01
 b38:	48 17       	cp	r20, r24
 b3a:	59 07       	cpc	r21, r25
 b3c:	99 f4       	brne	.+38     	; 0xb64 <SOS_run+0x8c>
			{
				// run the task
				(arr_st_gs_task_parameters[i].ptr_function_name)();
 b3e:	89 01       	movw	r16, r18
 b40:	00 0f       	add	r16, r16
 b42:	11 1f       	adc	r17, r17
 b44:	f8 01       	movw	r30, r16
 b46:	e2 0f       	add	r30, r18
 b48:	f3 1f       	adc	r31, r19
 b4a:	ee 0f       	add	r30, r30
 b4c:	ff 1f       	adc	r31, r31
 b4e:	ec 5e       	subi	r30, 0xEC	; 236
 b50:	fd 4f       	sbci	r31, 0xFD	; 253
 b52:	01 90       	ld	r0, Z+
 b54:	f0 81       	ld	r31, Z
 b56:	e0 2d       	mov	r30, r0
 b58:	09 95       	icall
				
				// clear the task tick counter
				u16_sos_task_tick[i] = 0;
 b5a:	f8 01       	movw	r30, r16
 b5c:	ed 57       	subi	r30, 0x7D	; 125
 b5e:	ff 4f       	sbci	r31, 0xFF	; 255
 b60:	11 82       	std	Z+1, r1	; 0x01
 b62:	10 82       	st	Z, r1
	// loop till the state change 
	while(INIT == u8_gs_sos_module_state)
	{
		
		// loop on tasks based on priority and execution time
		for(uint8_t i = DATABASE_FIRST_INDEX ; i  < u8_gs_max_count_of_tasks ; i++)
 b64:	cf 5f       	subi	r28, 0xFF	; 255
 b66:	01 c0       	rjmp	.+2      	; 0xb6a <SOS_run+0x92>
 b68:	c1 e0       	ldi	r28, 0x01	; 1
 b6a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <u8_gs_max_count_of_tasks>
 b6e:	c8 17       	cp	r28, r24
 b70:	80 f2       	brcs	.-96     	; 0xb12 <SOS_run+0x3a>
	// start timer 
	TIMER2_enuStart();
	
	
	// loop till the state change 
	while(INIT == u8_gs_sos_module_state)
 b72:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8_gs_sos_module_state>
 b76:	81 30       	cpi	r24, 0x01	; 1
 b78:	b9 f3       	breq	.-18     	; 0xb68 <SOS_run+0x90>
				// clear the task tick counter
				u16_sos_task_tick[i] = 0;
			}
		}
	}
}
 b7a:	cf 91       	pop	r28
 b7c:	1f 91       	pop	r17
 b7e:	0f 91       	pop	r16
 b80:	08 95       	ret

00000b82 <SOS_disable>:
* Output : void
*/
void SOS_disable(void)
{
	// stop timer
	TIMER2_vidStop();
 b82:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <TIMER2_vidStop>
	
	// disable stop external interrupt
	// enable start external interrupt
	if (NULL != ptr_function_disable_ext_interrupt)
 b86:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <ptr_function_disable_ext_interrupt>
 b8a:	f0 91 82 00 	lds	r31, 0x0082	; 0x800082 <ptr_function_disable_ext_interrupt+0x1>
 b8e:	30 97       	sbiw	r30, 0x00	; 0
 b90:	29 f0       	breq	.+10     	; 0xb9c <SOS_disable+0x1a>
	{
		// run handler
		(ptr_function_disable_ext_interrupt)();
 b92:	09 95       	icall
		
		// clear the pointer
		ptr_function_disable_ext_interrupt = NULL;
 b94:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <ptr_function_disable_ext_interrupt+0x1>
 b98:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <ptr_function_disable_ext_interrupt>
	}
	while(DISABLE == u8_gs_sos_module_state)
 b9c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <u8_gs_sos_module_state>
 ba0:	82 30       	cpi	r24, 0x02	; 2
 ba2:	e1 f3       	breq	.-8      	; 0xb9c <SOS_disable+0x1a>
	{
		// stay here till the state changes
	}
}
 ba4:	08 95       	ret

00000ba6 <SOS_change_state>:
	}
}

void SOS_change_state(uint8_t u8_state)
{
	u8_gs_sos_module_state = u8_state;
 ba6:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <u8_gs_sos_module_state>
 baa:	08 95       	ret

00000bac <SOS_disable_ext_interrupt>:
/***********************************************************************************/
/* Desc : save the callback function locally to call it in SOS_run and SOS_disable */
/***********************************************************************************/
void SOS_disable_ext_interrupt(ptr_function_name_t ptr_function_name)
{
	ptr_function_disable_ext_interrupt = ptr_function_name;
 bac:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <ptr_function_disable_ext_interrupt+0x1>
 bb0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <ptr_function_disable_ext_interrupt>
 bb4:	08 95       	ret

00000bb6 <__divsf3>:
 bb6:	0e 94 ef 05 	call	0xbde	; 0xbde <__divsf3x>
 bba:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_round>
 bbe:	0e 94 c9 06 	call	0xd92	; 0xd92 <__fp_pscB>
 bc2:	58 f0       	brcs	.+22     	; 0xbda <__divsf3+0x24>
 bc4:	0e 94 c2 06 	call	0xd84	; 0xd84 <__fp_pscA>
 bc8:	40 f0       	brcs	.+16     	; 0xbda <__divsf3+0x24>
 bca:	29 f4       	brne	.+10     	; 0xbd6 <__divsf3+0x20>
 bcc:	5f 3f       	cpi	r21, 0xFF	; 255
 bce:	29 f0       	breq	.+10     	; 0xbda <__divsf3+0x24>
 bd0:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__fp_inf>
 bd4:	51 11       	cpse	r21, r1
 bd6:	0c 94 04 07 	jmp	0xe08	; 0xe08 <__fp_szero>
 bda:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__fp_nan>

00000bde <__divsf3x>:
 bde:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__fp_split3>
 be2:	68 f3       	brcs	.-38     	; 0xbbe <__divsf3+0x8>

00000be4 <__divsf3_pse>:
 be4:	99 23       	and	r25, r25
 be6:	b1 f3       	breq	.-20     	; 0xbd4 <__divsf3+0x1e>
 be8:	55 23       	and	r21, r21
 bea:	91 f3       	breq	.-28     	; 0xbd0 <__divsf3+0x1a>
 bec:	95 1b       	sub	r25, r21
 bee:	55 0b       	sbc	r21, r21
 bf0:	bb 27       	eor	r27, r27
 bf2:	aa 27       	eor	r26, r26
 bf4:	62 17       	cp	r22, r18
 bf6:	73 07       	cpc	r23, r19
 bf8:	84 07       	cpc	r24, r20
 bfa:	38 f0       	brcs	.+14     	; 0xc0a <__divsf3_pse+0x26>
 bfc:	9f 5f       	subi	r25, 0xFF	; 255
 bfe:	5f 4f       	sbci	r21, 0xFF	; 255
 c00:	22 0f       	add	r18, r18
 c02:	33 1f       	adc	r19, r19
 c04:	44 1f       	adc	r20, r20
 c06:	aa 1f       	adc	r26, r26
 c08:	a9 f3       	breq	.-22     	; 0xbf4 <__divsf3_pse+0x10>
 c0a:	35 d0       	rcall	.+106    	; 0xc76 <__divsf3_pse+0x92>
 c0c:	0e 2e       	mov	r0, r30
 c0e:	3a f0       	brmi	.+14     	; 0xc1e <__divsf3_pse+0x3a>
 c10:	e0 e8       	ldi	r30, 0x80	; 128
 c12:	32 d0       	rcall	.+100    	; 0xc78 <__divsf3_pse+0x94>
 c14:	91 50       	subi	r25, 0x01	; 1
 c16:	50 40       	sbci	r21, 0x00	; 0
 c18:	e6 95       	lsr	r30
 c1a:	00 1c       	adc	r0, r0
 c1c:	ca f7       	brpl	.-14     	; 0xc10 <__divsf3_pse+0x2c>
 c1e:	2b d0       	rcall	.+86     	; 0xc76 <__divsf3_pse+0x92>
 c20:	fe 2f       	mov	r31, r30
 c22:	29 d0       	rcall	.+82     	; 0xc76 <__divsf3_pse+0x92>
 c24:	66 0f       	add	r22, r22
 c26:	77 1f       	adc	r23, r23
 c28:	88 1f       	adc	r24, r24
 c2a:	bb 1f       	adc	r27, r27
 c2c:	26 17       	cp	r18, r22
 c2e:	37 07       	cpc	r19, r23
 c30:	48 07       	cpc	r20, r24
 c32:	ab 07       	cpc	r26, r27
 c34:	b0 e8       	ldi	r27, 0x80	; 128
 c36:	09 f0       	breq	.+2      	; 0xc3a <__divsf3_pse+0x56>
 c38:	bb 0b       	sbc	r27, r27
 c3a:	80 2d       	mov	r24, r0
 c3c:	bf 01       	movw	r22, r30
 c3e:	ff 27       	eor	r31, r31
 c40:	93 58       	subi	r25, 0x83	; 131
 c42:	5f 4f       	sbci	r21, 0xFF	; 255
 c44:	3a f0       	brmi	.+14     	; 0xc54 <__divsf3_pse+0x70>
 c46:	9e 3f       	cpi	r25, 0xFE	; 254
 c48:	51 05       	cpc	r21, r1
 c4a:	78 f0       	brcs	.+30     	; 0xc6a <__divsf3_pse+0x86>
 c4c:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__fp_inf>
 c50:	0c 94 04 07 	jmp	0xe08	; 0xe08 <__fp_szero>
 c54:	5f 3f       	cpi	r21, 0xFF	; 255
 c56:	e4 f3       	brlt	.-8      	; 0xc50 <__divsf3_pse+0x6c>
 c58:	98 3e       	cpi	r25, 0xE8	; 232
 c5a:	d4 f3       	brlt	.-12     	; 0xc50 <__divsf3_pse+0x6c>
 c5c:	86 95       	lsr	r24
 c5e:	77 95       	ror	r23
 c60:	67 95       	ror	r22
 c62:	b7 95       	ror	r27
 c64:	f7 95       	ror	r31
 c66:	9f 5f       	subi	r25, 0xFF	; 255
 c68:	c9 f7       	brne	.-14     	; 0xc5c <__divsf3_pse+0x78>
 c6a:	88 0f       	add	r24, r24
 c6c:	91 1d       	adc	r25, r1
 c6e:	96 95       	lsr	r25
 c70:	87 95       	ror	r24
 c72:	97 f9       	bld	r25, 7
 c74:	08 95       	ret
 c76:	e1 e0       	ldi	r30, 0x01	; 1
 c78:	66 0f       	add	r22, r22
 c7a:	77 1f       	adc	r23, r23
 c7c:	88 1f       	adc	r24, r24
 c7e:	bb 1f       	adc	r27, r27
 c80:	62 17       	cp	r22, r18
 c82:	73 07       	cpc	r23, r19
 c84:	84 07       	cpc	r24, r20
 c86:	ba 07       	cpc	r27, r26
 c88:	20 f0       	brcs	.+8      	; 0xc92 <__divsf3_pse+0xae>
 c8a:	62 1b       	sub	r22, r18
 c8c:	73 0b       	sbc	r23, r19
 c8e:	84 0b       	sbc	r24, r20
 c90:	ba 0b       	sbc	r27, r26
 c92:	ee 1f       	adc	r30, r30
 c94:	88 f7       	brcc	.-30     	; 0xc78 <__divsf3_pse+0x94>
 c96:	e0 95       	com	r30
 c98:	08 95       	ret

00000c9a <__fixunssfsi>:
 c9a:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__fp_splitA>
 c9e:	88 f0       	brcs	.+34     	; 0xcc2 <__fixunssfsi+0x28>
 ca0:	9f 57       	subi	r25, 0x7F	; 127
 ca2:	98 f0       	brcs	.+38     	; 0xcca <__fixunssfsi+0x30>
 ca4:	b9 2f       	mov	r27, r25
 ca6:	99 27       	eor	r25, r25
 ca8:	b7 51       	subi	r27, 0x17	; 23
 caa:	b0 f0       	brcs	.+44     	; 0xcd8 <__fixunssfsi+0x3e>
 cac:	e1 f0       	breq	.+56     	; 0xce6 <__fixunssfsi+0x4c>
 cae:	66 0f       	add	r22, r22
 cb0:	77 1f       	adc	r23, r23
 cb2:	88 1f       	adc	r24, r24
 cb4:	99 1f       	adc	r25, r25
 cb6:	1a f0       	brmi	.+6      	; 0xcbe <__fixunssfsi+0x24>
 cb8:	ba 95       	dec	r27
 cba:	c9 f7       	brne	.-14     	; 0xcae <__fixunssfsi+0x14>
 cbc:	14 c0       	rjmp	.+40     	; 0xce6 <__fixunssfsi+0x4c>
 cbe:	b1 30       	cpi	r27, 0x01	; 1
 cc0:	91 f0       	breq	.+36     	; 0xce6 <__fixunssfsi+0x4c>
 cc2:	0e 94 03 07 	call	0xe06	; 0xe06 <__fp_zero>
 cc6:	b1 e0       	ldi	r27, 0x01	; 1
 cc8:	08 95       	ret
 cca:	0c 94 03 07 	jmp	0xe06	; 0xe06 <__fp_zero>
 cce:	67 2f       	mov	r22, r23
 cd0:	78 2f       	mov	r23, r24
 cd2:	88 27       	eor	r24, r24
 cd4:	b8 5f       	subi	r27, 0xF8	; 248
 cd6:	39 f0       	breq	.+14     	; 0xce6 <__fixunssfsi+0x4c>
 cd8:	b9 3f       	cpi	r27, 0xF9	; 249
 cda:	cc f3       	brlt	.-14     	; 0xcce <__fixunssfsi+0x34>
 cdc:	86 95       	lsr	r24
 cde:	77 95       	ror	r23
 ce0:	67 95       	ror	r22
 ce2:	b3 95       	inc	r27
 ce4:	d9 f7       	brne	.-10     	; 0xcdc <__fixunssfsi+0x42>
 ce6:	3e f4       	brtc	.+14     	; 0xcf6 <__fixunssfsi+0x5c>
 ce8:	90 95       	com	r25
 cea:	80 95       	com	r24
 cec:	70 95       	com	r23
 cee:	61 95       	neg	r22
 cf0:	7f 4f       	sbci	r23, 0xFF	; 255
 cf2:	8f 4f       	sbci	r24, 0xFF	; 255
 cf4:	9f 4f       	sbci	r25, 0xFF	; 255
 cf6:	08 95       	ret

00000cf8 <__floatunsisf>:
 cf8:	e8 94       	clt
 cfa:	09 c0       	rjmp	.+18     	; 0xd0e <__floatsisf+0x12>

00000cfc <__floatsisf>:
 cfc:	97 fb       	bst	r25, 7
 cfe:	3e f4       	brtc	.+14     	; 0xd0e <__floatsisf+0x12>
 d00:	90 95       	com	r25
 d02:	80 95       	com	r24
 d04:	70 95       	com	r23
 d06:	61 95       	neg	r22
 d08:	7f 4f       	sbci	r23, 0xFF	; 255
 d0a:	8f 4f       	sbci	r24, 0xFF	; 255
 d0c:	9f 4f       	sbci	r25, 0xFF	; 255
 d0e:	99 23       	and	r25, r25
 d10:	a9 f0       	breq	.+42     	; 0xd3c <__floatsisf+0x40>
 d12:	f9 2f       	mov	r31, r25
 d14:	96 e9       	ldi	r25, 0x96	; 150
 d16:	bb 27       	eor	r27, r27
 d18:	93 95       	inc	r25
 d1a:	f6 95       	lsr	r31
 d1c:	87 95       	ror	r24
 d1e:	77 95       	ror	r23
 d20:	67 95       	ror	r22
 d22:	b7 95       	ror	r27
 d24:	f1 11       	cpse	r31, r1
 d26:	f8 cf       	rjmp	.-16     	; 0xd18 <__floatsisf+0x1c>
 d28:	fa f4       	brpl	.+62     	; 0xd68 <__floatsisf+0x6c>
 d2a:	bb 0f       	add	r27, r27
 d2c:	11 f4       	brne	.+4      	; 0xd32 <__floatsisf+0x36>
 d2e:	60 ff       	sbrs	r22, 0
 d30:	1b c0       	rjmp	.+54     	; 0xd68 <__floatsisf+0x6c>
 d32:	6f 5f       	subi	r22, 0xFF	; 255
 d34:	7f 4f       	sbci	r23, 0xFF	; 255
 d36:	8f 4f       	sbci	r24, 0xFF	; 255
 d38:	9f 4f       	sbci	r25, 0xFF	; 255
 d3a:	16 c0       	rjmp	.+44     	; 0xd68 <__floatsisf+0x6c>
 d3c:	88 23       	and	r24, r24
 d3e:	11 f0       	breq	.+4      	; 0xd44 <__floatsisf+0x48>
 d40:	96 e9       	ldi	r25, 0x96	; 150
 d42:	11 c0       	rjmp	.+34     	; 0xd66 <__floatsisf+0x6a>
 d44:	77 23       	and	r23, r23
 d46:	21 f0       	breq	.+8      	; 0xd50 <__floatsisf+0x54>
 d48:	9e e8       	ldi	r25, 0x8E	; 142
 d4a:	87 2f       	mov	r24, r23
 d4c:	76 2f       	mov	r23, r22
 d4e:	05 c0       	rjmp	.+10     	; 0xd5a <__floatsisf+0x5e>
 d50:	66 23       	and	r22, r22
 d52:	71 f0       	breq	.+28     	; 0xd70 <__floatsisf+0x74>
 d54:	96 e8       	ldi	r25, 0x86	; 134
 d56:	86 2f       	mov	r24, r22
 d58:	70 e0       	ldi	r23, 0x00	; 0
 d5a:	60 e0       	ldi	r22, 0x00	; 0
 d5c:	2a f0       	brmi	.+10     	; 0xd68 <__floatsisf+0x6c>
 d5e:	9a 95       	dec	r25
 d60:	66 0f       	add	r22, r22
 d62:	77 1f       	adc	r23, r23
 d64:	88 1f       	adc	r24, r24
 d66:	da f7       	brpl	.-10     	; 0xd5e <__floatsisf+0x62>
 d68:	88 0f       	add	r24, r24
 d6a:	96 95       	lsr	r25
 d6c:	87 95       	ror	r24
 d6e:	97 f9       	bld	r25, 7
 d70:	08 95       	ret

00000d72 <__fp_inf>:
 d72:	97 f9       	bld	r25, 7
 d74:	9f 67       	ori	r25, 0x7F	; 127
 d76:	80 e8       	ldi	r24, 0x80	; 128
 d78:	70 e0       	ldi	r23, 0x00	; 0
 d7a:	60 e0       	ldi	r22, 0x00	; 0
 d7c:	08 95       	ret

00000d7e <__fp_nan>:
 d7e:	9f ef       	ldi	r25, 0xFF	; 255
 d80:	80 ec       	ldi	r24, 0xC0	; 192
 d82:	08 95       	ret

00000d84 <__fp_pscA>:
 d84:	00 24       	eor	r0, r0
 d86:	0a 94       	dec	r0
 d88:	16 16       	cp	r1, r22
 d8a:	17 06       	cpc	r1, r23
 d8c:	18 06       	cpc	r1, r24
 d8e:	09 06       	cpc	r0, r25
 d90:	08 95       	ret

00000d92 <__fp_pscB>:
 d92:	00 24       	eor	r0, r0
 d94:	0a 94       	dec	r0
 d96:	12 16       	cp	r1, r18
 d98:	13 06       	cpc	r1, r19
 d9a:	14 06       	cpc	r1, r20
 d9c:	05 06       	cpc	r0, r21
 d9e:	08 95       	ret

00000da0 <__fp_round>:
 da0:	09 2e       	mov	r0, r25
 da2:	03 94       	inc	r0
 da4:	00 0c       	add	r0, r0
 da6:	11 f4       	brne	.+4      	; 0xdac <__fp_round+0xc>
 da8:	88 23       	and	r24, r24
 daa:	52 f0       	brmi	.+20     	; 0xdc0 <__fp_round+0x20>
 dac:	bb 0f       	add	r27, r27
 dae:	40 f4       	brcc	.+16     	; 0xdc0 <__fp_round+0x20>
 db0:	bf 2b       	or	r27, r31
 db2:	11 f4       	brne	.+4      	; 0xdb8 <__fp_round+0x18>
 db4:	60 ff       	sbrs	r22, 0
 db6:	04 c0       	rjmp	.+8      	; 0xdc0 <__fp_round+0x20>
 db8:	6f 5f       	subi	r22, 0xFF	; 255
 dba:	7f 4f       	sbci	r23, 0xFF	; 255
 dbc:	8f 4f       	sbci	r24, 0xFF	; 255
 dbe:	9f 4f       	sbci	r25, 0xFF	; 255
 dc0:	08 95       	ret

00000dc2 <__fp_split3>:
 dc2:	57 fd       	sbrc	r21, 7
 dc4:	90 58       	subi	r25, 0x80	; 128
 dc6:	44 0f       	add	r20, r20
 dc8:	55 1f       	adc	r21, r21
 dca:	59 f0       	breq	.+22     	; 0xde2 <__fp_splitA+0x10>
 dcc:	5f 3f       	cpi	r21, 0xFF	; 255
 dce:	71 f0       	breq	.+28     	; 0xdec <__fp_splitA+0x1a>
 dd0:	47 95       	ror	r20

00000dd2 <__fp_splitA>:
 dd2:	88 0f       	add	r24, r24
 dd4:	97 fb       	bst	r25, 7
 dd6:	99 1f       	adc	r25, r25
 dd8:	61 f0       	breq	.+24     	; 0xdf2 <__fp_splitA+0x20>
 dda:	9f 3f       	cpi	r25, 0xFF	; 255
 ddc:	79 f0       	breq	.+30     	; 0xdfc <__fp_splitA+0x2a>
 dde:	87 95       	ror	r24
 de0:	08 95       	ret
 de2:	12 16       	cp	r1, r18
 de4:	13 06       	cpc	r1, r19
 de6:	14 06       	cpc	r1, r20
 de8:	55 1f       	adc	r21, r21
 dea:	f2 cf       	rjmp	.-28     	; 0xdd0 <__fp_split3+0xe>
 dec:	46 95       	lsr	r20
 dee:	f1 df       	rcall	.-30     	; 0xdd2 <__fp_splitA>
 df0:	08 c0       	rjmp	.+16     	; 0xe02 <__fp_splitA+0x30>
 df2:	16 16       	cp	r1, r22
 df4:	17 06       	cpc	r1, r23
 df6:	18 06       	cpc	r1, r24
 df8:	99 1f       	adc	r25, r25
 dfa:	f1 cf       	rjmp	.-30     	; 0xdde <__fp_splitA+0xc>
 dfc:	86 95       	lsr	r24
 dfe:	71 05       	cpc	r23, r1
 e00:	61 05       	cpc	r22, r1
 e02:	08 94       	sec
 e04:	08 95       	ret

00000e06 <__fp_zero>:
 e06:	e8 94       	clt

00000e08 <__fp_szero>:
 e08:	bb 27       	eor	r27, r27
 e0a:	66 27       	eor	r22, r22
 e0c:	77 27       	eor	r23, r23
 e0e:	cb 01       	movw	r24, r22
 e10:	97 f9       	bld	r25, 7
 e12:	08 95       	ret

00000e14 <_exit>:
 e14:	f8 94       	cli

00000e16 <__stop_program>:
 e16:	ff cf       	rjmp	.-2      	; 0xe16 <__stop_program>
